export type ProviderLoadFunction = (resolve: Function, reject: Function, apiKey: string, options?: any) => any;
/**
 * @callback ProviderLoadFunction
 * @param {function} resolve Callback with no arguments called when the load finishes successfully
 * @param {function} reject Callback with no arguments called when the load fails
 * @param {string} apiKey Provider API key
 * @param {Object} [options={}] Additional provider-specific options
 */
/**
 * {@link module:@yext/components-maps~MapProvider MapProvider} options class
 */
export class MapProviderOptions {
    loadFunction: (resolve: any, reject: any, apiKey: any, options: any) => any;
    mapClass: typeof ProviderMap;
    pinClass: typeof ProviderPin;
    providerName: string;
    /**
     * @param {module:@yext/components-maps~ProviderLoadFunction} loadFunction
     * @returns {module:@yext/components-maps~MapProviderOptions}
     */
    withLoadFunction(loadFunction: any): any;
    /**
     * @param {module:@yext/components-maps~ProviderMap} mapClass Subclass of {@link module:@yext/components-maps~ProviderMap ProviderMap}
     *   for the provider
     * @returns {module:@yext/components-maps~MapProviderOptions}
     */
    withMapClass(mapClass: any): any;
    /**
     * @param {module:@yext/components-maps~ProviderPin} pinClass Subclass of {@link module:@yext/components-maps~ProviderPin ProviderPin}
     *   for the provider
     * @returns {module:@yext/components-maps~MapProviderOptions}
     */
    withPinClass(pinClass: any): any;
    /**
     * @param {string} providerName Name of the map provider
     * @returns {module:@yext/components-maps~MapProviderOptions}
     */
    withProviderName(providerName: string): any;
    /**
     * @returns {module:@yext/components-maps~MapProvider}
     */
    build(): any;
}
/**
 * This class is used for loading the API for a map provider such as Google Maps and creating {@link module:@yext/components-maps~ProviderMap ProviderMap}
 * and {@link module:@yext/components-maps~ProviderPin ProviderPin} instances.
 * Provider map implementations return an instance of this class for their provider that you can use
 * to load the API and pass in to {@link module:@yext/components-maps~MapOptions MapOptions} and {@link module:@yext/components-maps~MapPinOptions MapPinOptions} objects as the provider.
 * Example using {@link module:@yext/components-maps~GoogleMaps GoogleMaps}, an instance of this
 * class: GoogleMaps.load().then(() => map = new MapOptions().withProvider(GoogleMaps).build());
 */
export class MapProvider {
    /**
     * @param {module:@yext/components-maps~MapProviderOptions} options
     */
    constructor(options: any);
    _loadFunction: any;
    _mapClass: any;
    _pinClass: any;
    _providerName: any;
    _loadPromise: Promise<any>;
    _resolveLoad: (value: any) => void;
    _rejectLoad: (reason?: any) => void;
    _apiKey: string;
    _loadInvoked: boolean;
    _loaded: boolean;
    _options: {};
    /**
     * Returns true if the map provider has been successfully loaded
     * @type {boolean}
     */
    get loaded(): boolean;
    /**
     * @returns {module:@yext/components-maps~ProviderMap}
     * @see module:@yext/components-maps~MapProviderOptions#withMapClass
     */
    getMapClass(): any;
    /**
     * @returns {module:@yext/components-maps~ProviderPin}
     * @see module:@yext/components-maps~MapProviderOptions#withPinClass
     */
    getPinClass(): any;
    /**
     * @returns {string}
     * @see module:@yext/components-maps~MapProviderOptions#withProviderName
     */
    getProviderName(): string;
    /**
     * Call {@link module:@yext/components-maps~MapPinOptions~loadFunction MapPinOptions~loadFunction}
     * and resolve or reject when loading succeeds or fails
     * @async
     * @param {string} [apiKey] Provider API key -- uses value from {@link module:@yext/components-maps~MapProvider#setLoadOptions MapProvider#setLoadOptions}
     *   if not passed
     * @param {Object} [options] Additional provider-specific options -- uses value from {@link module:@yext/components-maps~MapProvider#setLoadOptions MapProvider#setLoadOptions}
     *   if not passed
     */
    load(apiKey?: string | undefined, options?: any): Promise<void>;
    /**
     * Resolves or rejects when the map provider has loaded successfully or unsuccessfully
     * @async
     */
    ready(): Promise<void>;
    /**
     * Set the API key and provider options used on load. Does nothing if load was already called.
     * @param {string} apiKey Provider API key
     * @param {?Object} [options=null] Additional provider-specific options
     */
    setLoadOptions(apiKey: string, options?: any | null): void;
}
import { ProviderMap } from "./ProviderMap.js";
import { ProviderPin } from "./ProviderPin.js";
//# sourceMappingURL=MapProvider.d.ts.map