"use strict";
/** @module @yext/components-util */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertInstance = exports.assertType = exports.Type = void 0;
/**
 * @enum {string}
 */
const Type = {
    UNDEFINED: 'undefined',
    NULL: 'object',
    BOOLEAN: 'boolean',
    NUMBER: 'number',
    BIGINT: 'bigint',
    STRING: 'string',
    SYMBOL: 'symbol',
    FUNCTION: 'function',
    OBJECT: 'object'
};
exports.Type = Type;
/**
 * Assert that a value is a certain type. Returns nothing, but throws if the type does not match.
 * @param {*} object Any value
 * @param {string} type Value type
 */
function assertType(object, type) {
    if (typeof type != 'string') {
        throw new Error('Assertion error: \'type\' must be a string');
    }
    if (typeof object !== type) {
        throw new Error(`Expected an object of type '${type}' but received '${typeof object}'`);
    }
}
exports.assertType = assertType;
/**
 * Assert that an object is an instance of the given class. Returns nothing, but throws if the type
 * does not match.
 * @param {Object} object An instance of some class
 * @param {Class} instanceClass
 */
function assertInstance(object, instanceClass) {
    let isInstance;
    try {
        isInstance = object instanceof instanceClass;
    }
    catch (err) {
        throw new Error('Assertion error: \'instanceClass\' is not a valid constructor');
    }
    if (!isInstance) {
        throw new Error(`Expected an instance of '${instanceClass.name}' but received '${object.constructor.name}'`);
    }
}
exports.assertInstance = assertInstance;
//# sourceMappingURL=Assertions.js.map