/**
 * {@link module:@yext/components-maps~ProviderMap ProviderMap} options class
 */
export class ProviderMapOptions {
    /**
     * @param {module:@yext/components-maps~MapProvider} provider
     * @param {HTMLElement} wrapper The wrapper element that the map will be inserted into
     */
    constructor(provider: any, wrapper: HTMLElement);
    providerMapClass: any;
    wrapper: HTMLElement;
    controlEnabled: boolean;
    panHandler: () => void;
    panStartHandler: () => void;
    providerOptions: {};
    /**
     * @param {boolean} controlEnabled Whether the user can interact with the map
     * @returns {module:@yext/components-maps~ProviderMapOptions}
     */
    withControlEnabled(controlEnabled: boolean): any;
    /**
     * @param {function} panHandler Function called after the map bounds change
     * @returns {module:@yext/components-maps~ProviderMapOptions}
     */
    withPanHandler(panHandler: Function): any;
    /**
     * @param {function} panStartHandler Function called before the map bounds change
     * @returns {module:@yext/components-maps~ProviderMapOptions}
     */
    withPanStartHandler(panStartHandler: Function): any;
    /**
     * @param {Object} providerOptions A free-form object used to set any additional provider-specific
     *   options, usually by passing the object to the map's constructor
     * @returns {module:@yext/components-maps~ProviderMapOptions}
     */
    withProviderOptions(providerOptions: any): any;
    /**
     * @returns {module:@yext/components-maps~ProviderMap} An instance of a subclass of {@link module:@yext/components-maps~ProviderMap ProviderMap}
     *   for the given {@link module:@yext/components-maps~MapProvider MapProvider}
     */
    build(): any;
}
/**
 * This class is an interface that should be implemented for each map provider, such as Google Maps.
 * It is used as an API for a {@link module:@yext/components-maps~Map Map} to control a
 * provider-specific map instance. Ideally, this class should have minimal functionality so that
 * adding a new provider is easy and behavior is as consistent as possible across all providers.
 */
export class ProviderMap {
    /**
     * The constructor creates a map instance using the provider's API and initializes it with all the
     * given options. See {@link module:@yext/components-maps~ProviderMapOptions ProviderMapOptions}
     * for the supported options.
     * @param {module:@yext/components-maps~ProviderMapOptions} options
     */
    constructor(options: any);
    _panHandler: any;
    _panStartHandler: any;
    /**
     * @returns {module:@yext/components-tsx-geo~Coordinate} The current center of the map
     */
    getCenter(): any;
    /**
     * Zoom level complies with the specifications in {@link module:@yext/components-maps~Map#getZoom Map#getZoom}
     * @returns {number} The current zoom level of the map
     */
    getZoom(): number;
    /**
     * @param {module:@yext/components-tsx-geo~Coordinate} coordinate The new center for the map
     * @param {boolean} animated Whether to transition smoothly to the new center
     */
    setCenter(coordinate: any, animated: boolean): void;
    /**
     * Zoom level complies with the specifications in {@link module:@yext/components-maps~Map#getZoom Map#getZoom}
     * @param {number} zoom The new zoom level for the map
     * @param {boolean} animated Whether to transition smoothly to the new zoom
     */
    setZoom(zoom: number, animated: boolean): void;
    /**
     * @param {number} zoom
     * @param {Object} center Must be convertible to {@link module:@yext/components-tsx-geo~Coordinate Coordinate}
     * @param {boolean} animated Whether to transition smoothly to the new bounds
     * @see module:@yext/components-maps~ProviderMap#setZoom
     * @see module:@yext/components-maps~ProviderMap#setCenter
     */
    setZoomCenter(zoom: number, center: any, animated: boolean): void;
}
//# sourceMappingURL=ProviderMap.d.ts.map