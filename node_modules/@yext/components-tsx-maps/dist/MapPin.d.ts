export type PinPropertiesForStatus = (status: any) => any;
export type PinClickHandler = () => any;
export type PinFocusHandler = (focused: boolean) => any;
export type PinHoverHandler = (hovered: boolean) => any;
/**
 * @callback PinPropertiesForStatus
 * @param {Object} status A generic object whose properties define the state of the pin, from {@link module:@yext/components-maps~MapPin#setStatus MapPin#setStatus}
 * @returns {module:@yext/components-maps~PinProperties}
 * @see module:@yext/components-maps~MapPin#setStatus
 */
/**
 * @callback PinClickHandler
 */
/**
 * @callback PinFocusHandler
 * @param {boolean} focused Whether the pin is currently focused
 */
/**
 * @callback PinHoverHandler
 * @param {boolean} hovered Whether the pin is currently hovered
 */
/**
 * {@link module:@yext/components-maps~MapPin MapPin} options class
 */
export class MapPinOptions {
    coordinate: Coordinate;
    hideOffscreen: boolean;
    icons: {};
    propertiesForStatus: (status: any) => PinProperties;
    provider: any;
    type: string;
    /**
     * @param {Object} coordinate Must be convertible to {@link module:@yext/components-tsx-geo~Coordinate Coordinate}
     * @returns {module:@yext/components-maps~MapPinOptions}
     */
    withCoordinate(coordinate: any): any;
    /**
     * @param {boolean} hideOffscreen If true, the pin will only be rendered if it's in the visible
     *   portion of the map to improve performance
     * @returns {module:@yext/components-maps~MapPinOptions}
     */
    withHideOffscreen(hideOffscreen: boolean): any;
    /**
     * @param {string} key The unique name for the icon, used in {@link module:@yext/components-maps~PinProperties#getIcon PinProperties#getIcon}
     *   and {@link module:@yext/components-maps~PinProperties#setIcon PinProperties#setIcon}
     * @param {string} icon The URL or data URI of the icon image
     * @returns {module:@yext/components-maps~MapPinOptions}
     */
    withIcon(key: string, icon: string): any;
    /**
     * @param {module:@yext/components-maps~PinPropertiesForStatus} propertiesForStatus
     * @returns {module:@yext/components-maps~MapPinOptions}
     */
    withPropertiesForStatus(propertiesForStatus: any): any;
    /**
     * @param {module:@yext/components-maps~MapProvider} provider
     * @returns {module:@yext/components-maps~MapPinOptions}
     */
    withProvider(provider: any): any;
    /**
     * @param {string} type A string describing the type of the pin
     * @returns {module:@yext/components-maps~MapPinOptions}
     */
    withType(type: string): any;
    /**
     * @returns {module:@yext/components-maps~MapPin}
     */
    build(): any;
}
/**
 * A pin for a {@link module:@yext/components-maps~Map Map} that displays at a given {@link module:@yext/components-tsx-geo~Coordinate Coordinate}.
 * A MapPin can be displayed on at most one Map at a time. Pins support event handlers for clicking,
 * hovering, and focusing. The pin can change its appearance based on its current status, which is
 * changed by {@link module:@yext/components-maps~MapPin#setStatus setStatus}.
 */
export class MapPin {
    /**
     * @param {module:@yext/components-maps~MapPinOptions} options
     */
    constructor(options: any);
    _coordinate: any;
    _hideOffscreen: any;
    _icons: any;
    _propertiesForStatus: any;
    _type: any;
    _clickHandler: () => void;
    _focusHandler: (focused: any) => void;
    _hoverHandler: (hovered: any) => void;
    _hidden: boolean;
    _cancelHiddenUpdater: () => void;
    _map: any;
    _pin: any;
    _status: {};
    /**
     * @returns {module:@yext/components-tsx-geo~Coordinate} The coordinate of the pin
     */
    getCoordinate(): any;
    /**
     * Get the icon for a string key, such as 'default', 'hovered', or 'selected'
     * @param {string} key The unique name of the icon
     * @returns {string} The URL or data URI of the icon image
     * @see module:@yext/components-maps~MapPinOptions#withIcon
     */
    getIcon(key: string): string;
    /**
     * @returns {?module:@yext/components-maps~Map} The map that the pin is currently on, or null if
     * not on a map
     */
    getMap(): module | null;
    /**
     * Intended for internal use only
     * @returns {module:@yext/components-maps~ProviderPin} The pin's {@link module:@yext/components-maps~ProviderPin ProviderPin}
     *   instance
     */
    getProviderPin(): any;
    /**
     * @returns {string} The string describing the type of pin
     */
    getType(): string;
    /**
     * Remove this pin from its current map, if on one.
     */
    remove(): void;
    /**
     * Set a handler function for when the pin is clicked, replacing any previously set click handler.
     * @param {module:@yext/components-maps~PinClickHandler} clickHandler
     */
    setClickHandler(clickHandler: any): void;
    /**
     * @param {Object} coordinate Must be convertible to {@link module:@yext/components-tsx-geo~Coordinate Coordinate}
     */
    setCoordinate(coordinate: any): void;
    /**
     * Set a handler function for when the pin is (un)focused, replacing any previously set focus handler.
     * @param {module:@yext/components-maps~PinFocusHandler} focusHandler
     */
    setFocusHandler(focusHandler: any): void;
    /**
     * Set a handler function for when the pin is (un)hovered, replacing any previously set hover handler.
     * @param {module:@yext/components-maps~PinHoverHandler} hoverHandler
     */
    setHoverHandler(hoverHandler: any): void;
    /**
     * Add the pin to a map, removing it from its current map if on one.
     * @param {?Map} map
     */
    setMap(map: Map | null): void;
    /**
     * Assign all properties in an object to the pin's status.
     * Example: if the pin's status is { a: true, b: true }, passing in { a: false, c: true } will
     * change the pin's status to { a: false, b: true, c: true }
     * @param {Object} status
     */
    setStatus(status: any): void;
    /**
     * Add or remove the pin from the map based on whether its coordinate is within the current bounds
     * @protected
     */
    protected _hideIfOffscreen(): void;
}
import { PinProperties } from "./PinProperties.js";
import { Coordinate } from "@yext/components-tsx-geo/dist/Coordinate.js";
import { Map } from "./Map.js";
export { PinProperties };
//# sourceMappingURL=MapPin.d.ts.map