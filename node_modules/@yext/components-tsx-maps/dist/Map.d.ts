export type PaddingFunction = () => number;
export type PanHandler = (previousBounds: any, currentBounds: any) => any;
export type PanStartHandler = (currentBounds: any) => any;
/**
 * {@link module:@yext/components-maps~Map Map} options class
 */
export class MapOptions {
    controlEnabled: boolean;
    defaultCenter: Coordinate;
    defaultZoom: number;
    legendPins: any[];
    padding: {
        bottom: () => number;
        left: () => number;
        right: () => number;
        top: () => number;
    };
    panHandler: (previousBounds: any, currentBounds: any) => void;
    panStartHandler: (currentBounds: any) => void;
    provider: any;
    providerOptions: {};
    singlePinZoom: number;
    wrapper: HTMLElement | null;
    /**
     * @param {boolean} controlEnabled Whether the user can move and zoom the map
     * @returns {module:@yext/components-maps~MapOptions}
     */
    withControlEnabled(controlEnabled: boolean): any;
    /**
     * @param {module:@yext/components-tsx-geo~Coordinate} defaultCenter The center on initial load and
     *   when calling {@link module:@yext/components-maps~Map#fitCoordinates Map#fitCoordinates} with an empty array
     * @returns {module:@yext/components-maps~MapOptions}
     */
    withDefaultCenter(defaultCenter: any): any;
    /**
     * @param {number} defaultZoom The zoom on initial load and when calling {@link module:@yext/components-maps~Map#fitCoordinates Map#fitCoordinates}
     *   with an empty array
     * @returns {module:@yext/components-maps~MapOptions}
     */
    withDefaultZoom(defaultZoom: number): any;
    /**
     * @todo GENERATOR TODO Map legend not yet implemented
     * @param {module:@yext/components-maps~MapPin[]} legendPins Pins used to construct the map legend
     * @returns {module:@yext/components-maps~MapOptions}
     */
    withLegendPins(legendPins: any): any;
    /**
     * Padding is used by {@link module:@yext/components-maps~Map#fitCoordinates Map#fitCoordinates}.
     * Padding can either be constant values or funtions that return a padding value.
     * See {@link module:@yext/components-maps~Map#setPadding Map#setPadding} for more information.
     * @param {Object} padding
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.bottom Minimum number of
     *   pixels between the map's bottom edge and a pin
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.left Minimum number of
     *   pixels between the map's left edge and a pin
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.right Minimum number of
     *   pixels between the map's right edge and a pin
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.top Minimum number of
     *   pixels between the map's top edge and a pin
     * @returns {module:@yext/components-maps~MapOptions}
     * @see module:@yext/components-maps~Map#setPadding
     */
    withPadding(padding: any): any;
    /**
     * @param {module:@yext/components-maps~PanHandler} panHandler
     * @returns {module:@yext/components-maps~MapOptions}
     */
    withPanHandler(panHandler: any): any;
    /**
     * @param {module:@yext/components-maps~PanStartHandler} panStartHandler
     * @returns {module:@yext/components-maps~MapOptions}
     */
    withPanStartHandler(panStartHandler: any): any;
    /**
     * The {@link module:@yext/components-maps~MapProvider MapProvider} must be loaded before
     * constructing the {@link module:@yext/components-maps~Map Map}.
     * @param {module:@yext/components-maps~MapProvider} provider
     * @returns {module:@yext/components-maps~MapOptions}
     */
    withProvider(provider: any): any;
    /**
     * @param {Object} providerOptions A free-form object used to set any additional provider-specific
     *   options in the {@link module:@yext/components-maps~ProviderMap ProviderMap}
     * @returns {module:@yext/components-maps~MapOptions}
     */
    withProviderOptions(providerOptions: any): any;
    /**
     * @param {number} singlePinZoom The zoom when calling {@link module:@yext/components-maps~Map#fitCoordinates Map#fitCoordinates}
     *   with an array containing one coordinate
     * @returns {MapOptions}
     */
    withSinglePinZoom(singlePinZoom: number): MapOptions;
    /**
     * @param {HTMLElement} wrapper The wrapper element that the map will be inserted into. The
     *   existing contents of the element will be removed.
     * @returns {module:@yext/components-maps~MapOptions}
     */
    withWrapper(wrapper: HTMLElement): any;
    /**
     * @returns {module:@yext/components-maps~Map}
     */
    build(): any;
}
/**
 * An interactive map that supports various map providers, such as Google Maps and Mapbox, with a
 * single API. Code written using this class functions approximately the same regardless of the map
 * provider used. Any map provider can be supported via an instance of {@link module:@yext/components-maps~MapProvider MapProvider}.
 */
export class Map {
    /**
     * The {@link module:@yext/components-maps~MapProvider MapProvider} for the map must be loaded
     * before calling this constructor.
     * @param {module:@yext/components-maps~MapOptions} options
     */
    constructor(options: any);
    _defaultCenter: any;
    _defaultZoom: any;
    _legendPins: any;
    _provider: any;
    _singlePinZoom: any;
    _wrapper: any;
    _padding: {};
    _cachedBounds: GeoBounds | null;
    _resolveIdle: () => void;
    _resolveMoving: () => void;
    _idlePromise: Promise<void>;
    _panHandlerRunning: boolean;
    _panStartHandlerRunning: boolean;
    _map: any;
    _currentBounds: any;
    /**
     * Set the map bounds so that all the given coordinates are within the {@link module:@yext/components-maps~MapOptions#withPadding padded}
     * view.
     * @param {module:@yext/components-tsx-geo~Coordinate[]} coordinates
     * @param {boolean} [animated=false] Whether to transition smoothly to the new bounds
     * @param {number} [maxZoom=singlePinZoom] The max zoom level after fitting. Uses {@link module:@yext/components-maps~MapOptions#withSinglePinZoom singlePinZoom}
     *   by default.
     */
    fitCoordinates(coordinates: any, animated?: boolean | undefined, maxZoom?: number | undefined): void;
    /**
     * Get the current visible region of the map. If the map is zoomed out to show multiple copies of
     * the world, the longitude bounds will be outside [-180, 180) but the center will always be
     * within [-180, 180).
     * @returns {module:@yext/components-tsx-geo~GeoBounds}
     */
    getBounds(): any;
    /**
     * @returns {module:@yext/components-tsx-geo~Coordinate} The center of the current visible region of
     *   the map
     */
    getCenter(): any;
    /**
     * Intended for internal use only
     * @returns {module:@yext/components-maps~ProviderMap} The map's {@link module:@yext/components-maps~ProviderMap ProviderMap}
     *   instance
     */
    getProviderMap(): any;
    /**
     * To standardize zoom for all providers, zoom level is calculated with this formula:
     * zoom = log2(pixel width of equator) - 8.
     * At zoom = 0, the entire world is 256 pixels wide.
     * At zoom = 1, the entire world is 512 pixels wide.
     * Zoom 2 → 1024 pixels, zoom 3 → 2056 pixels, etc.
     * Negative and non-integer zoom levels are valid and follow the formula.
     * @returns {number} The current zoom level of the map
     */
    getZoom(): number;
    /**
     * Returns when the map is not moving.
     * Use map.idle().then(callback) to run callback immediately if the map is currently idle or once
     * the map becomes idle if it's not.
     */
    idle(): Promise<void>;
    /**
     * Returns when the map is moving.
     * Use map.moving().then(callback) to run callback immediately if the map is currently moving or
     * once the map starts moving if it's not.
     */
    moving(): Promise<void>;
    /**
     * @returns {module:@yext/components-maps~MapPinOptions} A {@link module:@yext/components-maps~MapPinOptions MapPinOptions}
     *   instance with the same provider as this map
     */
    newPinOptions(): any;
    /**
     * Called when the map has finished moving, at most once per animation frame.
     * Passes the current and previous bounds to the custom pan handler given by {@link module:@yext/components-maps~MapOptions#withPanHandler MapOptions#withPanHandler}
     */
    panHandler(): void;
    /**
     * Called when the map has started moving, at most once per animation frame.
     * Passes the current bounds to the custom pan handler given by {@link module:@yext/components-maps~MapOptions#withPanStartHandler MapOptions#withPanStartHandler}
     */
    panStartHandler(): void;
    /**
     * @param {Object} bounds
     * @param {Object} bounds.ne The northeast corner of the bounds -- must be convertible to {@link module:@yext/components-tsx-geo~Coordinate Coordinate}
     * @param {Object} bounds.sw The southwest corner of the bounds -- must be convertible to {@link module:@yext/components-tsx-geo~Coordinate Coordinate}
     * @param {boolean} [animated=false] Whether to transition smoothly to the new bounds
     * @param {Object} [padding={}]
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.bottom Minimum number of
     *   pixels between the map's bottom edge and a pin
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.left Minimum number of
     *   pixels between the map's left edge and a pin
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.right Minimum number of
     *   pixels between the map's right edge and a pin
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.top Minimum number of
     *   pixels between the map's top edge and a pin
     * @param {number} [maxZoom=Infinity]
     */
    setBounds({ ne, sw }: {
        ne: any;
        sw: any;
    }, animated?: boolean | undefined, padding?: any, maxZoom?: number | undefined): void;
    /**
     * @param {Object} coordinate Must be convertible to {@link module:@yext/components-tsx-geo~Coordinate Coordinate}
     * @param {boolean} [animated=false] Whether to transition smoothly to the new center
     */
    setCenter(coordinate: any, animated?: boolean | undefined): void;
    /**
     * Padding is used by {@link module:@yext/components-maps~Map#fitCoordinates Map#fitCoordinates}.
     * Padding can either be constant values or funtions that return a padding value.
     * Constant values are good if the map should always have the same padding on every breakpoint.
     * Functions are useful if the map should have different padding at different breakpoints/layouts.
     * The function can check window.innerWidth or any other condition before returning a number.
     * @param {Object} padding
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.bottom Minimum number of
     *   pixels between the map's bottom edge and a pin
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.left Minimum number of
     *   pixels between the map's left edge and a pin
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.right Minimum number of
     *   pixels between the map's right edge and a pin
     * @param {number|module:@yext/components-maps~PaddingFunction} padding.top Minimum number of
     *   pixels between the map's top edge and a pin
     * @returns {module:@yext/components-maps~Map}
     */
    setPadding({ bottom, left, right, top }: any): any;
    /**
     * @param {module:@yext/components-maps~Map~panHandler} panHandler
     */
    setPanHandler(panHandler: any): void;
    _panHandler: any;
    /**
     * @param {module:@yext/components-maps~Map~panStartHandler} panStartHandler
     */
    setPanStartHandler(panStartHandler: any): void;
    _panStartHandler: any;
    /**
     * @param {number} zoom
     * @param {boolean} [animated=false] Whether to transition smoothly to the new zoom
     * @see module:@yext/components-maps~Map#getZoom
     */
    setZoom(zoom: number, animated?: boolean | undefined): void;
    /**
     * @param {number} zoom
     * @param {Object} center Must be convertible to {@link module:@yext/components-tsx-geo~Coordinate Coordinate}
     * @param {boolean} [animated=false] Whether to transition smoothly to the new bounds
     * @see module:@yext/components-maps~Map#setZoom
     * @see module:@yext/components-maps~Map#setCenter
     */
    setZoomCenter(zoom: number, center: any, animated?: boolean | undefined): void;
    /**
     * Set the map state to idle
     * @protected
     */
    protected _setIdle(): void;
    _movingPromise: Promise<any> | undefined;
    /**
     * Set the map state to moving
     * @protected
     */
    protected _setMoving(): void;
}
import { Coordinate } from "@yext/components-tsx-geo/dist/Coordinate.js";
import { GeoBounds } from "@yext/components-tsx-geo/dist/GeoBounds.js";
//# sourceMappingURL=Map.d.ts.map