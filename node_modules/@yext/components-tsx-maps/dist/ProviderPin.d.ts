/**
 * {@link module:@yext/components-maps~ProviderPin ProviderPin} options class
 */
export class ProviderPinOptions {
    /**
     * @param {module:@yext/components-maps~MapProvider} provider
     */
    constructor(provider: any);
    providerPinClass: any;
    clickHandler: () => void;
    focusHandler: (focused: any) => void;
    hoverHandler: (hovered: any) => void;
    icons: {};
    /**
     * @param {import('./MapPin.js').PinClickHandler} clickHandler Function called when the pin is clicked
     * @returns {module:@yext/components-maps~ProviderPinOptions}
     */
    withClickHandler(clickHandler: import('./MapPin.js').PinClickHandler): any;
    /**
     * @param {import('./MapPin.js').PinFocusHandler} focusHandler Function called when the pin becomes (un)focused
     * @returns {module:@yext/components-maps~ProviderPinOptions}
     */
    withFocusHandler(focusHandler: import('./MapPin.js').PinFocusHandler): any;
    /**
     * @param {import('./MapPin.js').PinHoverHandler} hoverHandler Function called when the pin becomes (un)hovered
     * @returns {module:@yext/components-maps~ProviderPinOptions}
     */
    withHoverHandler(hoverHandler: import('./MapPin.js').PinHoverHandler): any;
    /**
     * Similar to {@link module:@yext/components-maps~MapPinOptions#withIcon MapPinOptions#withIcon},
     * but all icons are given as a map of key => icon. If a provider pin instance needs an icon to be
     * a specialized class rather than a simple URL, the icons in this object can be converted in this
     * function and assigned back to the icons object instead of being recreated from the URL every
     * time the pin's icon changes.
     * @param {Object<string,string>} icons Map of a string key to the URL or data URI of an image
     * @returns {module:@yext/components-maps~ProviderPinOptions}
     */
    withIcons(icons: {
        [x: string]: string;
    }): any;
    /**
     * @returns {module:@yext/components-maps~ProviderPin} An instance of a subclass of {@link module:@yext/components-maps~ProviderPin ProviderPin}
     *   for the given {@link module:@yext/components-maps~MapProvider MapProvider}
     */
    build(): any;
}
/**
 * This class is an interface that should be implemented for each map provider, such as Google Maps.
 * It is used as an API for a {@link module:@yext/components-maps~MapPin MapPin} to control a
 * provider-specific pin instance. Ideally, this class should have minimal functionality so that
 * adding a new provider is easy and behavior is as consistent as possible across all providers.
 */
export class ProviderPin {
    /**
     * The constructor creates a pin instance using the provider's API and initializes it with all the
     * given options. See {@link module:@yext/components-maps~ProviderPinOptions ProviderPinOptions}
     * for the supported options.
     * @param {module:@yext/components-maps~ProviderPinOptions} options
     */
    constructor(options: any);
    _clickHandler: any;
    _focusHandler: any;
    _hoverHandler: any;
    _icons: any;
    /**
     * @param {module:@yext/components-tsx-geo~Coordinate} coordinate The position of the pin
     */
    setCoordinate(coordinate: any): void;
    /**
     * Remove the pin from its current map and, if newMap is not null, add it to the new map.
     * @param {?module:@yext/components-maps~Map} newMap The new map -- if null, the pin will not be
     *   shown on any map
     * @param {?module:@yext/components-maps~Map} currentMap The current map -- if null, the pin is
     *   not shown on any map
     */
    setMap(newMap: any, currentMap: any): void;
    /**
     * Apply the given properties to modify the appearance of the pin.
     * @param {module:@yext/components-maps~PinProperties} pinProperties
     * @see module:@yext/components-maps~PinProperties
     */
    setProperties(pinProperties: any): void;
}
/**
 * This class is an extension of {@link module:@yext/components-maps~ProviderPin ProviderPin} that
 * allows HTML elements to be used as map pins.
 * @extends module:@yext/components-maps~ProviderPin
 */
export class HTMLProviderPin {
    /**
     * This is the base style applied to pin elements. It is a map from CSS property to value, such
     * as 'position': 'absolute'
     * @type {Object}
     */
    static get baseStyle(): any;
    /**
     * After instatiating a {@link module:@yext/components-maps~ProviderPin ProviderPin}, this creates
     * a wrapper element and a default pin element.
     * @param {module:@yext/components-maps~ProviderPinOptions} options
     */
    constructor(options: any);
    _pinEl: HTMLButtonElement;
    _pinAlt: HTMLSpanElement;
    _wrapper: HTMLDivElement;
    /**
     * Adds click, hover, and focus event listeners to the wrapper element
     */
    addListeners(): void;
    /**
     * @returns {HTMLElement} HTML button element for pin element
     */
    getPinElement(): HTMLElement;
    /**
     * @returns {HTMLElement} HTML button element for wrapper element
     */
    getWrapperElement(): HTMLElement;
    /**
     * @param {module:@yext/components-maps~PinProperties} pinProperties
     * @see module:@yext/components-maps~ProviderPin#setProperties
     */
    setProperties(pinProperties: any): void;
    /**
     * Sets properties used specifically by the pin element
     * @param {module:@yext/components-maps~PinProperties} pinProperties
     */
    setElementProperties(pinProperties: any): void;
}
//# sourceMappingURL=ProviderPin.d.ts.map