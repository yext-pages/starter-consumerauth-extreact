/** @module @yext/components-maps */
/**
 * This class is used to set the appearance of a {@link module:@yext/components-maps~MapPin MapPin}.
 * Most properties are supported by all providers, but some are only supported by providers that
 * implement {@link module:@yext/components-maps~HTMLProviderPin HTMLProviderPin}.
 */
export class PinProperties {
    _anchorX: number;
    _anchorY: number;
    _height: number;
    _icon: string;
    _srText: string;
    _width: number;
    _zIndex: number;
    _class: string;
    _element: HTMLElement | null;
    /**
     * @returns {number} The point in the pin that should be positioned over the coordinate, from 0
     *   (left edge) to 1 (right edge)
     */
    getAnchorX(): number;
    /**
     * @returns {number} The point in the pin that should be positioned over the coordinate, from 0
     *   (top edge) to 1 (bottom edge)
     */
    getAnchorY(): number;
    /**
     * {@link module:@yext/components-maps~HTMLProviderPin HTMLProviderPins} only
     * @returns {string} The class of the wrapper element for an HTML pin
     */
    getClass(): string;
    /**
     * {@link module:@yext/components-maps~HTMLProviderPin HTMLProviderPins} only
     * @returns {string} The HTML pin element
     */
    getElement(): string;
    /**
     * @returns {number} The pixel height of the pin
     */
    getHeight(): number;
    /**
     * This returns a string key that can be used with {@link module:@yext/components-maps~MapPin#getIcon MapPin#getIcon}
     * to get the icon image for a pin.
     * @returns {string} The unique name of the icon
     */
    getIcon(): string;
    /**
     * @returns {string} The text that a screen reader reads when focused on the pin
     */
    getSRText(): string;
    /**
     * @returns {number} The pixel width of the pin
     */
    getWidth(): number;
    /**
     * @returns {number} The z-index of the pin
     */
    getZIndex(): number;
    /**
     * @param {number} anchorX
     * @returns {module:@yext/components-maps~PinProperties}
     * @see module:@yext/components-maps~PinProperties#getAnchorX
     */
    setAnchorX(anchorX: number): any;
    /**
     * @param {number} anchorY
     * @returns {module:@yext/components-maps~PinProperties}
     * @see module:@yext/components-maps~PinProperties#getAnchorY
     */
    setAnchorY(anchorY: number): any;
    /**
     * @param {string} className
     * @returns {module:@yext/components-maps~PinProperties}
     * @see module:@yext/components-maps~PinProperties#getClass
     */
    setClass(className: string): any;
    /**
     * @param {HTMLElement} element
     * @returns {module:@yext/components-maps~PinProperties}
     * @see module:@yext/components-maps~PinProperties#getElement
     */
    setElement(element: HTMLElement): any;
    /**
     * @param {number} height
     * @returns {module:@yext/components-maps~PinProperties}
     * @see module:@yext/components-maps~PinProperties#getHeight
     */
    setHeight(height: number): any;
    /**
     * @param {string} icon
     * @returns {module:@yext/components-maps~PinProperties}
     * @see module:@yext/components-maps~PinProperties#getIcon
     */
    setIcon(icon: string): any;
    /**
     * @param {string} srText
     * @returns {module:@yext/components-maps~PinProperties}
     * @see module:@yext/components-maps~PinProperties#getSRText
     */
    setSRText(srText: string): any;
    /**
     * @param {number} width
     * @returns {module:@yext/components-maps~PinProperties}
     * @see module:@yext/components-maps~PinProperties#getWidth
     */
    setWidth(width: number): any;
    /**
     * @param {number} zIndex
     * @returns {module:@yext/components-maps~PinProperties}
     * @see module:@yext/components-maps~PinProperties#getZIndex
     */
    setZIndex(zIndex: number): any;
}
//# sourceMappingURL=PinProperties.d.ts.map