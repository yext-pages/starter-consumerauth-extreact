import { useCallback, useContext, useEffect, useRef } from 'react';
import { SearchHeadlessContext } from './SearchHeadlessContext';
import { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';
/**
 * Returns the Search State returned by the map function.
 * Uses "use-sync-external-store/shim" to handle reading
 * and subscribing from external store in React version
 * pre-18 and 18.
 */
export function useSearchState(stateSelector) {
    const search = useContext(SearchHeadlessContext);
    if (search.state === undefined) {
        throw new Error('Attempted to call useSearchState() outside of SearchHeadlessProvider.'
            + ' Please ensure that \'useSearchState()\' is called within an SearchHeadlessProvider component.');
    }
    const getSnapshot = useCallback(() => search.state, [search.state]);
    const isMountedRef = useRef(false);
    useEffect(() => {
        isMountedRef.current = true;
        return () => {
            isMountedRef.current = false;
        };
    }, []);
    const subscribe = useCallback(cb => search.addListener({
        valueAccessor: state => state,
        callback: () => {
            // prevent React state update on an unmounted component
            if (!isMountedRef.current) {
                return;
            }
            cb();
        }
    }), [search]);
    const selectedState = useSyncExternalStoreWithSelector(subscribe, getSnapshot, getSnapshot, stateSelector);
    return selectedState;
}
//# sourceMappingURL=useSearchState.js.map