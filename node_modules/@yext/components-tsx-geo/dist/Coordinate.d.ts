/**
 * This class represents a point on a sphere defined by latitude and longitude.
 * Latitude is a degree number in the range [-90, 90].
 * Longitude is a degree number without limits but is normalized to [-180, 180).
 */
export class Coordinate {
    /**
     * Constructor takes either 1 or 2 arguments.
     * 2 arguments: latitude and longitude.
     * 1 argument: an object with at least one {@link module:@yext/components-geo~Coordinate~LATITUDE_ALIASES latitude alias}
     * and one one {@link module:@yext/components-geo~CoordinateCoordinate~LONGITUDE_ALIASES longitude alias}.
     * @param {number|Object} latitudeOrObject
     * @param {number} [longitude] Optional only if the first argument is a {@link module:@yext/components-geo~Coordinate Coordinate}-like object
     */
    constructor(latitudeOrObject: number | Object, longitude?: number | undefined);
    set latitude(arg: number);
    /**
     * Degrees latitude in the range [-90, 90].
     * If setting a value outside this range, it will be set to -90 or 90, whichever is closer.
     * @type {number}
     */
    get latitude(): number;
    set longitude(arg: number);
    /**
     * Degrees longitude in the range [-Infinity, Infinity].
     * @type {number}
     */
    get longitude(): number;
    /**
     * Degrees longitude in the range [-180, 180).
     * If the coordinate's longitude is outside this range, the equivalent value within it is used.
     * Examples: 123 => 123, 270 => -90, -541 => 179
     * @type {number}
     */
    get normalLon(): number;
    _lat: number | undefined;
    _lon: number | undefined;
    /**
     * Add distance to the coordinate to change its position.
     * @param {number} latDist latitude distance
     * @param {number} lonDist longitude distance
     * @param {module:@yext/components-geo~Unit} [unit=Unit.DEGREE] The unit of latDist and lonDist
     * @param {module:@yext/components-geo~Projection} [projection=Projection.SPHERICAL] The projection of Earth (not relevant when using a physical distance unit, e.g. Mile)
     */
    add(latDist: number, lonDist: number, unit?: any, projection?: any): void;
    /**
     * Calculate the distance from this coordinate to another coordinate.
     * @param {module:@yext/components-geo~Coordinate} coordinate
     * @param {module:@yext/components-geo~Unit} [unit=Unit.MILE] The unit of distance
     * @param {module:@yext/components-geo~Projection} [projection=Projection.SPHERICAL] The projection of Earth (not relevant when using a physical distance unit, e.g. Mile)
     * @returns {number} Distance in the requested unit
     */
    distanceTo(coordinate: any, unit?: any, projection?: any): number;
    /**
     * Test if this coordinate has the same latitude and longitude as another.
     * @param {module:@yext/components-geo~Coordinate} coordinate
     * @returns {boolean}
     */
    equals(coordinate: any): boolean;
    /**
     * Get the coordinate as a string that can be used in a search query.
     * Example: {latitude: -45, longitude: 123} => '-45,123'
     * @returns {string}
     */
    searchQueryString(): string;
}
//# sourceMappingURL=Coordinate.d.ts.map