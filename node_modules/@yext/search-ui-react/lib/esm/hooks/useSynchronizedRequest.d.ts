/**
 * Handles the network request race condition by synchronizing requests with their responses. If multiple
 * requests are sent before getting a response, only the response corresponding to the latest request will
 * be returned.
 *
 * @param executeRequest - Function that executes the network request
 * @param handleRejectedPromise - Function that executes when a rejected promise is received from the request
 *
 * @returns Reponse to the latest request and a function to execute the request in a synchronized manner
 */
export declare function useSynchronizedRequest<RequestDataType, ResponseType>(executeRequest: (data?: RequestDataType) => Promise<ResponseType | undefined>, handleRejectedPromise?: (error: unknown) => void): [
    ResponseType | undefined,
    (data?: RequestDataType) => Promise<ResponseType | undefined>,
    () => void
];
//# sourceMappingURL=useSynchronizedRequest.d.ts.map