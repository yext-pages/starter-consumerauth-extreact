import { useCallback, useEffect, useState } from 'react';
import RecentSearches from 'recent-searches';
export function useRecentSearches(recentSearchesLimit, verticalKey) {
    const recentSearchesKey = getRecentSearchesKey(verticalKey);
    const [recentSearches, setRecentSeaches] = useState(new RecentSearches({
        limit: recentSearchesLimit,
        namespace: recentSearchesKey
    }));
    const clearRecentSearches = useCallback(() => {
        localStorage.removeItem(recentSearchesKey);
        setRecentSeaches(new RecentSearches({
            limit: recentSearchesLimit,
            namespace: recentSearchesKey
        }));
        localStorage.removeItem(recentSearchesKey);
    }, [recentSearchesKey, recentSearchesLimit]);
    const setRecentSearch = useCallback((input) => {
        recentSearches.setRecentSearch(input);
    }, [recentSearches]);
    useEffect(() => {
        setRecentSeaches(new RecentSearches({
            limit: recentSearchesLimit,
            namespace: recentSearchesKey
        }));
    }, [recentSearchesKey, recentSearchesLimit]);
    return [recentSearches === null || recentSearches === void 0 ? void 0 : recentSearches.getRecentSearches(), setRecentSearch, clearRecentSearches];
}
function getRecentSearchesKey(verticalKey) {
    if (verticalKey) {
        return `__yxt_recent_searches_${verticalKey}__`;
    }
    else {
        return '__yxt_recent_searches_universal__';
    }
}
//# sourceMappingURL=useRecentSearches.js.map