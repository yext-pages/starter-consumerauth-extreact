import { useSearchState, useSearchActions } from '@yext/search-headless-react';
import { useMemo } from 'react';
import { getSelectableFieldValueFilters } from '../utils/filterutils';
import { useStateUpdatedOnSearch } from './useStateUpdatedOnSearch';
/**
 * Returns a RemovableFilter[] sourced from the static filters state.
 *
 * @internal
 */
export function useRemovableStaticFilters(hiddenFields) {
    const staticFilters = useStateUpdatedOnSearch(state => state.filters.static);
    const hasResults = !!useSearchState(state => state.vertical.results);
    const searchActions = useSearchActions();
    return useMemo(() => {
        if (!hasResults || !staticFilters) {
            return [];
        }
        function handleRemoveStaticFilterOption(filter) {
            searchActions.setFilterOption({
                filter: Object.assign(Object.assign({}, filter), { kind: 'fieldValue' }),
                selected: false
            });
        }
        return getSelectableFieldValueFilters(staticFilters)
            .filter(f => f.selected && !hiddenFields.includes(f.fieldId))
            .map(f => {
            var _a;
            return ({
                displayName: (_a = f.displayName) !== null && _a !== void 0 ? _a : '',
                handleRemove: () => handleRemoveStaticFilterOption(f),
                filter: f
            });
        });
    }, [hasResults, hiddenFields, searchActions, staticFilters]);
}
//# sourceMappingURL=useRemovableStaticFilters.js.map