import { useMemo } from 'react';
/**
 * Parses a `DisplayableFacet` into a `HierarchicalFacetTree`, then memoizes it.
 */
export function useHierarchicalFacetTree(hierarchicalFacet, delimiter) {
    return useMemo(() => {
        return parseHierarchicalFacetTree(hierarchicalFacet, delimiter);
    }, [delimiter, hierarchicalFacet]);
}
/**
 * Parses a `DisplayableFacet` into a `HierarchicalFacetTree`.
 */
export function parseHierarchicalFacetTree(hierarchicalFacet, delimiter) {
    const optionsInAscendingLength = (hierarchicalFacet === null || hierarchicalFacet === void 0 ? void 0 : hierarchicalFacet.options.map(o => {
        const displayNameTokens = o.displayName.split(delimiter).map(s => s.trim());
        return Object.assign(Object.assign({}, o), { displayNameTokens });
    }).sort((a, b) => a.displayNameTokens.length - b.displayNameTokens.length)) || [];
    const tree = {};
    optionsInAscendingLength.forEach(o => {
        const { displayNameTokens, displayName } = o;
        let currentTree = tree;
        let parentNode = undefined;
        for (const token of displayNameTokens.slice(0, -1)) {
            if (!(token in currentTree)) {
                console.error(`Error parsing hierarchical facet option "${displayName}" at token "${token}". Current tree:`, JSON.stringify(tree));
                return;
            }
            if (o.selected) {
                currentTree[token].hasSelectedChild = true;
            }
            parentNode = currentTree[token];
            currentTree = currentTree[token].childTree;
        }
        const lastDisplayNameToken = displayNameTokens[displayNameTokens.length - 1];
        currentTree[lastDisplayNameToken] = {
            selected: o.selected,
            displayNameTokens,
            lastDisplayNameToken,
            facetOption: {
                value: o.value,
                matcher: o.matcher
            },
            hasSelectedChild: false,
            childTree: {},
            parentNode: parentNode
        };
    });
    return tree;
}
//# sourceMappingURL=useHierarchicalFacetTree.js.map