var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { useSearchActions, useSearchState } from '@yext/search-headless-react';
import { useMemo } from 'react';
import { getSelectableFieldValueFilters } from '../../utils/filterutils';
import { executeSearch } from '../../utils/search-operations';
import { FiltersContext } from './FiltersContext';
/**
 * The StaticFilters component is a wrapper component around {@link Filters} that updates static filter
 * options when a child filter is updated.
 *
 * The representation of the facets is configured using props.children,
 * and is intended for use with components like {@link Filters.CheckboxOption}.
 *
 * @param props - {@link Filters.StaticFiltersProviderProps}
 *
 * @public
 */
export function StaticFiltersProvider({ children, className = 'w-full', searchOnChange = true }) {
    const searchActions = useSearchActions();
    const displayableFilters = useSearchState(state => state.filters.static);
    const filtersContextInstance = useMemo(() => {
        return {
            selectFilter(filter) {
                const { selected, displayName } = filter, fieldValueFilter = __rest(filter, ["selected", "displayName"]);
                searchActions.setFilterOption({
                    filter: Object.assign({ kind: 'fieldValue' }, fieldValueFilter),
                    selected,
                    displayName
                });
            },
            applyFilters() {
                if (searchOnChange) {
                    searchActions.setOffset(0);
                    searchActions.resetFacets();
                    executeSearch(searchActions);
                }
            },
            filters: getSelectableFieldValueFilters(displayableFilters !== null && displayableFilters !== void 0 ? displayableFilters : [])
        };
    }, [searchActions, displayableFilters, searchOnChange]);
    return (_jsx("div", Object.assign({ className: className }, { children: _jsx(FiltersContext.Provider, Object.assign({ value: filtersContextInstance }, { children: children }), void 0) }), void 0));
}
//# sourceMappingURL=StaticFiltersProvider.js.map