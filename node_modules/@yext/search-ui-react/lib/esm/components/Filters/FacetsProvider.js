import { jsx as _jsx } from "react/jsx-runtime";
import { useSearchActions, useSearchState } from '@yext/search-headless-react';
import { useMemo } from 'react';
import { getSelectedNumericalFacetFields, isNumberRangeValue } from '../../utils/filterutils';
import { clearStaticRangeFilters } from '../../utils/filterutils';
import { executeSearch } from '../../utils/search-operations';
import { FiltersContext } from './FiltersContext';
/**
 * The FacetsProvider component is a wrapper component around {@link Filters} that updates facet
 * options when a child filter is updated.
 *
 * The representation of the facets is configured using a FACC (function as a child component)
 * The FACC is passed the facets data, and is intended for use with components like
 * {@link Filters.CheckboxOption}.
 *
 * @public
 *
 * @param props - {@link Filters.FacetsProviderProps}
 */
export function FacetsProvider({ children, className = 'w-full', searchOnChange = true }) {
    const searchActions = useSearchActions();
    const facetsInState = useSearchState(state => state.filters.facets);
    const facets = useMemo(() => facetsInState !== null && facetsInState !== void 0 ? facetsInState : [], [facetsInState]);
    const filters = useMemo(() => {
        return facets.flatMap(f => f.options.map(o => {
            return {
                fieldId: f.fieldId,
                value: o.value,
                matcher: o.matcher,
                selected: o.selected,
                displayName: o.displayName
            };
        }));
    }, [facets]);
    const filtersContextInstance = useMemo(() => {
        return {
            selectFilter(filter) {
                if (typeof filter.value === 'object' && !isNumberRangeValue(filter.value)) {
                    console.error('Facets only support string, number, boolean, and NumberRangeValue. Found the following object value instead:', filter.value);
                    return;
                }
                const facetOption = {
                    matcher: filter.matcher,
                    value: filter.value
                };
                searchActions.setFacetOption(filter.fieldId, facetOption, filter.selected);
            },
            applyFilters() {
                if (searchOnChange) {
                    searchActions.setOffset(0);
                    clearStaticRangeFilters(searchActions, getSelectedNumericalFacetFields(searchActions));
                    executeSearch(searchActions);
                }
            },
            filters
        };
    }, [searchActions, filters, searchOnChange]);
    return (_jsx("div", Object.assign({ className: className }, { children: _jsx(FiltersContext.Provider, Object.assign({ value: filtersContextInstance }, { children: children === null || children === void 0 ? void 0 : children(facets) }), void 0) }), void 0));
}
//# sourceMappingURL=FacetsProvider.js.map