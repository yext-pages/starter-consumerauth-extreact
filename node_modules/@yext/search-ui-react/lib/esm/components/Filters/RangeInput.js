import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Matcher, useSearchActions, useSearchState } from '@yext/search-headless-react';
import { useCallback, useEffect, useMemo, useState } from 'react';
import { useFilterGroupContext } from './FilterGroupContext';
import { useComposedCssClasses } from '../../hooks/useComposedCssClasses';
import { clearStaticRangeFilters, findSelectableFieldValueFilter, getSelectableFieldValueFilters, parseNumberRangeInput } from '../../utils/filterutils';
import { executeSearch } from '../../utils/search-operations';
import classNames from 'classnames';
import { useFiltersContext } from './FiltersContext';
import { InvalidIcon } from '../../icons/InvalidIcon';
const builtInCssClasses = {
    rangeInputContainer: 'flex flex-col',
    input: 'w-full h-9 form-input cursor-pointer border rounded-md focus:ring-0 text-neutral-dark text-sm text-right appearance-none leading-9',
    input___withPrefix: 'pl-[2.5rem]',
    input___withoutPrefix: 'px-2',
    input___disabled: 'bg-gray-50 placeholder:text-neutral-light cursor-not-allowed',
    input___enabled: 'placeholder:text-neutral',
    input___valid: 'border-gray-300 focus:border-primary',
    input___invalid: 'border-red-700 focus:border-red-700',
    inputContainer: 'relative',
    inputRowContainer: 'flex flex-row items-center space-x-3 group',
    buttonsContainer: 'flex flex-row items-center justify-between pt-2',
    inputPrefix: 'absolute left-2 top-2 text-sm',
    inputPrefix___disabled: 'text-neutral-light cursor-not-allowed',
    inputPrefix___enabled: 'text-neutral',
    applyButton: 'text-sm text-primary font-medium',
    clearButton: 'text-sm text-neutral font-medium',
    tooltipContainer: 'invisible group-hover:visible relative -top-6',
    tooltip: 'absolute z-10 left-0 whitespace-nowrap rounded shadow-lg p-3 text-sm bg-neutral-dark text-white',
    invalidMessage: 'pl-3 text-sm text-red-700',
    invalidRowContainer: 'pt-2 flex flex-row items-center'
};
/**
 * Represents a single number range static filter which accepts user input.
 *
 * @public
 *
 * @param props - RangeInputProps
 */
export function RangeInput(props) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { filters } = useFiltersContext();
    const { fieldId, setIsOptionsDisabled } = useFilterGroupContext();
    const { getFilterDisplayName = getDefaultFilterDisplayName, inputPrefix } = props;
    const cssClasses = useComposedCssClasses(builtInCssClasses, props.customCssClasses);
    const searchActions = useSearchActions();
    const [minRangeInput, setMinRangeInput] = useState('');
    const [maxRangeInput, setMaxRangeInput] = useState('');
    const staticFilters = useSearchState(state => state.filters.static);
    const fieldValueFilters = useMemo(() => getSelectableFieldValueFilters(staticFilters !== null && staticFilters !== void 0 ? staticFilters : []), [staticFilters]);
    const isDisabled = filters.some(filter => filter.selected && filter.fieldId === fieldId);
    const rangeFilter = useMemo(() => {
        return {
            kind: 'fieldValue',
            fieldId,
            matcher: Matcher.Between,
            value: parseNumberRangeInput(minRangeInput, maxRangeInput),
        };
    }, [fieldId, maxRangeInput, minRangeInput]);
    const isValid = isValidRange(rangeFilter.value);
    // Find a static filter which matches the current range input
    const matchingFilter = findSelectableFieldValueFilter(rangeFilter, fieldValueFilters);
    const isSelectedInAnswersState = (matchingFilter === null || matchingFilter === void 0 ? void 0 : matchingFilter.selected) === true;
    const hasUserInput = !!(minRangeInput || maxRangeInput);
    const shouldRenderApplyButton = hasUserInput && !isSelectedInAnswersState;
    useEffect(() => {
        setIsOptionsDisabled(hasUserInput);
    }, [hasUserInput, setIsOptionsDisabled]);
    const handleMinChange = useCallback(event => {
        var _a;
        const input = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.value;
        validateNumericInput(input) && setMinRangeInput(input);
    }, []);
    const handleMaxChange = useCallback(event => {
        var _a;
        const input = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.value;
        validateNumericInput(input) && setMaxRangeInput(input);
    }, []);
    const handleClickApply = useCallback(() => {
        if (!rangeFilter.value.start && !rangeFilter.value.end) {
            return;
        }
        if (!isValid) {
            return;
        }
        const displayName = getFilterDisplayName(rangeFilter.value);
        clearStaticRangeFilters(searchActions, new Set([fieldId]));
        searchActions.setFilterOption({
            filter: rangeFilter,
            selected: true,
            displayName
        });
        searchActions.setOffset(0);
        executeSearch(searchActions);
    }, [searchActions, fieldId, getFilterDisplayName, isValid, rangeFilter]);
    const handleClickClear = useCallback(() => {
        const displayName = getFilterDisplayName(rangeFilter.value);
        searchActions.setFilterOption({
            filter: rangeFilter,
            selected: false,
            displayName
        });
        setMinRangeInput('');
        setMaxRangeInput('');
        searchActions.setOffset(0);
        executeSearch(searchActions);
    }, [searchActions, getFilterDisplayName, rangeFilter]);
    const inputClasses = classNames(cssClasses.input, {
        [(_a = cssClasses.input___withPrefix) !== null && _a !== void 0 ? _a : '']: !!inputPrefix,
        [(_b = cssClasses.input___withoutPrefix) !== null && _b !== void 0 ? _b : '']: !inputPrefix,
        [(_c = cssClasses.input___disabled) !== null && _c !== void 0 ? _c : '']: isDisabled,
        [(_d = cssClasses.input___enabled) !== null && _d !== void 0 ? _d : '']: !isDisabled,
        [(_e = cssClasses.input___invalid) !== null && _e !== void 0 ? _e : '']: !isValid,
        [(_f = cssClasses.input___valid) !== null && _f !== void 0 ? _f : '']: isValid
    });
    const inputPrefixClasses = classNames(cssClasses.inputPrefix, {
        [(_g = cssClasses.inputPrefix___disabled) !== null && _g !== void 0 ? _g : '']: isDisabled,
        [(_h = cssClasses.inputPrefix___enabled) !== null && _h !== void 0 ? _h : '']: !isDisabled,
    });
    function renderInput(value, onChange, placeholder) {
        return (_jsxs("div", Object.assign({ className: cssClasses.inputContainer }, { children: [inputPrefix && _jsx("span", Object.assign({ className: inputPrefixClasses, "aria-hidden": "true" }, { children: inputPrefix }), void 0), _jsx("input", { type: 'text', inputMode: 'decimal', value: value, placeholder: placeholder, disabled: isDisabled, className: inputClasses, onChange: onChange }, void 0)] }), void 0));
    }
    return (_jsxs("div", Object.assign({ className: cssClasses.rangeInputContainer }, { children: [_jsxs("div", Object.assign({ className: cssClasses.inputRowContainer }, { children: [renderInput(minRangeInput, handleMinChange, 'Min'), _jsx("div", Object.assign({ className: 'w-2.5 text-sm text-neutral' }, { children: "-" }), void 0), renderInput(maxRangeInput, handleMaxChange, 'Max'), isDisabled &&
                        _jsx("div", Object.assign({ className: cssClasses.tooltipContainer }, { children: _jsx("div", Object.assign({ className: cssClasses.tooltip }, { children: "Unselect an option to enter in a range." }), void 0) }), void 0)] }), void 0), !isValid &&
                _jsxs("div", Object.assign({ className: cssClasses.invalidRowContainer }, { children: [_jsx(InvalidIcon, {}, void 0), _jsx("div", Object.assign({ className: cssClasses.invalidMessage }, { children: "Invalid range" }), void 0)] }), void 0), hasUserInput &&
                _jsxs("div", Object.assign({ className: cssClasses.buttonsContainer }, { children: [_jsx("button", Object.assign({ className: cssClasses.clearButton, onClick: handleClickClear }, { children: "Clear min and max" }), void 0), shouldRenderApplyButton &&
                            _jsx("button", Object.assign({ className: cssClasses.applyButton, onClick: handleClickApply }, { children: "Apply" }), void 0)] }), void 0)] }), void 0));
}
/**
 * Creates the filter's display name based on the number range.
 */
function getDefaultFilterDisplayName(numberRange) {
    const start = numberRange.start;
    const end = numberRange.end;
    if (start && end) {
        return `${start.value} - ${end.value}`;
    }
    else if (start && !end) {
        return `Over ${start.value}`;
    }
    else if (end && !start) {
        return `Up to ${end.value}`;
    }
    return '';
}
/**
 * Returns true only if the provided string passes the numeric validation.
 *
 * @remarks
 * Allows whole numbers and numbers with a single period.
 */
function validateNumericInput(str) {
    const numberRegex = new RegExp(/^\d*\.?\d*$/);
    return numberRegex.test(str);
}
/**
 * Determines if the range is valid.
 */
function isValidRange(range) {
    if (range.start && range.end) {
        return range.start.value <= range.end.value;
    }
    return true;
}
//# sourceMappingURL=RangeInput.js.map