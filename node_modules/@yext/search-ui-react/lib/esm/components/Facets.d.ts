/// <reference types="react" />
import { FacetsProps, HierarchicalFacetProps, NumericalFacetProps, StandardFacetProps } from './FacetProps';
import { DisplayableFacet } from '@yext/search-headless-react';
/** @internal */
declare enum FacetType {
    STANDARD = "STANDARD",
    NUMERICAL = "NUMERICAL",
    HIERARCHICAL = "HIERARCHICAL"
}
/**
 * A component that displays all facets applicable to the current vertical search.
 *
 * @remarks
 * This component is a quick way of getting facets on the page, and it will render standard facets,
 * numerical facets, and hierarchical facets. The {@link StandardFacet}, {@link NumericalFacet},
 * and {@link HierarchicalFacet} components can be used to override the default facet configuration.
 *
 * @param props - {@link FacetsProps}
 * @returns A React component for facets
 *
 * @public
 */
export declare function Facets(props: FacetsProps): JSX.Element;
/**
 * A component that displays a single standard facet. Use this to override the default rendering.
 *
 * @param props - {@link StandardFacetProps}
 * @returns ReactElement
 * @public
 */
export declare function StandardFacet(props: StandardFacetProps): null;
/**
 * A component that displays a single numerical facet. Use this to override the default rendering.
 *
 * @param props - {@link NumericalFacetProps}
 * @returns ReactElement
 * @public
 */
export declare function NumericalFacet(props: NumericalFacetProps): null;
/**
 * A component that displays a single hierarchical facet, in a tree level structure, applicable to
 * the current vertical search. Use this to override the default rendering.
 *
 * @param props - {@link HierarchicalFacetProps}
 * @returns ReactElement
 * @public
 */
export declare function HierarchicalFacet(props: HierarchicalFacetProps): null;
/**
 * A component that represents a single facet.
 *
 * @param facet - {@link DisplayableFacet}
 * @param facetsCustomCssClasses - {@link FacetsCssClasses}
 * @param fieldIdToCustomFacetProps - a map of fieldId to facet props
 * @param hierarchicalFieldIds - a list of hierarchical field ids
 * @returns {@link ReactElement}
 *
 * @internal
 */
export declare function Facet({ facet, facetsCustomCssClasses, fieldIdToCustomFacetProps, hierarchicalFieldIds, }: {
    facet: any;
    facetsCustomCssClasses: any;
    fieldIdToCustomFacetProps: any;
    hierarchicalFieldIds: any;
}): JSX.Element;
/**
 * Returns the type of the facet based on the props.
 * @param elementType - string
 * @returns {@link FacetType}
 *
 * @internal
 */
export declare function getFacetTypeFromReactElementType(elementType: string): FacetType;
/**
 * Returns the type of the facet based on facet.
 * @param facet - {@link DisplayableFacet}
 * @param hierarchicalFieldIds - string
 * @returns {@link FacetType}
 *
 * @internal
 */
export declare function getFacetTypeFromFacet(facet: DisplayableFacet, hierarchicalFieldIds?: string[]): FacetType;
export {};
//# sourceMappingURL=Facets.d.ts.map