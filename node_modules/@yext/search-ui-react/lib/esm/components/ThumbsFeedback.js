import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useSearchState } from '@yext/search-headless-react';
import { useCallback, useState } from 'react';
import { ThumbIcon } from '../icons/ThumbIcon';
import useLayoutEffect from 'use-isomorphic-layout-effect';
import { useComposedCssClasses } from '../hooks/useComposedCssClasses';
export const builtInCssClasses = {
    thumbsFeedbackContainer: 'flex justify-end mt-2 text-sm text-gray-500 font-medium',
    thumbsUpIcon: 'ml-3 w-5',
    thumbsDownIcon: 'w-5 ml-1 transform rotate-180'
};
/**
 * Renders a quality feedback widget composed of thumbs up and thumbs down buttons.
 *
 * @public
 *
 * @param props - The configuration for the the feedback component.
 * @returns A React element for quality feedback widget.
 */
export function ThumbsFeedback(props) {
    const { onClick, feedbackText = 'Feedback', feedbackTextOnSubmission = 'Thank you for your feedback!', } = props;
    const cssClasses = useComposedCssClasses(builtInCssClasses, props.customCssClasses);
    const query = useSearchState(state => state.query.mostRecentSearch);
    const [isFeedbackProvided, setIsFeedbackProvided] = useState(false);
    const handleClickThumbsUp = useCallback(() => {
        onClick('THUMBS_UP');
        setIsFeedbackProvided(true);
    }, [onClick]);
    const handleClickThumbsDown = useCallback(() => {
        onClick('THUMBS_DOWN');
        setIsFeedbackProvided(true);
    }, [onClick]);
    // Changes to most recent search query will trigger re-render to reset quality feedback submission.
    useLayoutEffect(() => {
        setIsFeedbackProvided(false);
    }, [query]);
    return (_jsx("div", Object.assign({ className: cssClasses.thumbsFeedbackContainer }, { children: isFeedbackProvided
            ? feedbackTextOnSubmission
            : _jsxs(_Fragment, { children: [feedbackText, _jsx("button", Object.assign({ className: cssClasses.thumbsUpIcon, onClick: handleClickThumbsUp, "aria-label": 'This answered my question' }, { children: _jsx(ThumbIcon, {}, void 0) }), void 0), _jsx("button", Object.assign({ className: cssClasses.thumbsDownIcon, onClick: handleClickThumbsDown, "aria-label": 'This did not answer my question' }, { children: _jsx(ThumbIcon, {}, void 0) }), void 0)] }, void 0) }), void 0));
}
//# sourceMappingURL=ThumbsFeedback.js.map