import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { useSearchState } from '@yext/search-headless-react';
import { StandardSection } from './sections/StandardSection';
import { SectionHeader, builtInCssClasses as sectionHeaderCssClasses } from './sections/SectionHeader';
import { useComposedCssClasses } from '../hooks/useComposedCssClasses';
import classNames from 'classnames';
const builtInCssClasses = Object.assign({ universalResultsContainer: 'space-y-8', universalResultsLoading: 'opacity-50' }, sectionHeaderCssClasses);
/**
 * Displays the results of a universal search with the results for each vertical separated
 * into sections.
 *
 * @public
 *
 * @param props - {@link UniversalResultsProps}
 * @returns A React element for the universal results, or null if there are none
 */
export function UniversalResults({ verticalConfigMap, showAppliedFilters, customCssClasses }) {
    var _a;
    const cssClasses = useComposedCssClasses(builtInCssClasses, customCssClasses);
    const resultsFromAllVerticals = useSearchState(state => { var _a; return (_a = state === null || state === void 0 ? void 0 : state.universal) === null || _a === void 0 ? void 0 : _a.verticals; }) || [];
    const isLoading = useSearchState(state => state.searchStatus.isLoading);
    if (resultsFromAllVerticals.length === 0) {
        return null;
    }
    const resultsClassNames = classNames(cssClasses.universalResultsContainer, {
        [(_a = cssClasses.universalResultsLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    return (_jsx("div", Object.assign({ className: resultsClassNames }, { children: renderVerticalSections({ resultsFromAllVerticals, showAppliedFilters, verticalConfigMap, cssClasses }) }), void 0));
}
/**
 * Renders a list of {@link SectionComponent}s based on the given list of vertical results and
 * corresponding configs, including specifying which section template to use.
 */
function renderVerticalSections(props) {
    const { resultsFromAllVerticals, verticalConfigMap, cssClasses } = props;
    return _jsx(_Fragment, { children: resultsFromAllVerticals
            .filter(verticalResults => verticalResults.results)
            .map(verticalResults => {
            var _a;
            const verticalKey = verticalResults.verticalKey;
            const verticalConfig = verticalConfigMap[verticalKey] || {};
            const label = (_a = verticalConfig.label) !== null && _a !== void 0 ? _a : verticalKey;
            const results = verticalResults.results;
            const SectionComponent = verticalConfig.SectionComponent || StandardSection;
            const appliedQueryFilters = props.showAppliedFilters
                ? verticalResults.appliedQueryFilters
                : undefined;
            return (_jsx(SectionComponent, { results: results, verticalKey: verticalKey, header: _jsx(SectionHeader, Object.assign({}, {
                    label,
                    appliedQueryFilters,
                    verticalKey,
                    viewAllButton: verticalConfig.viewAllButton,
                    getViewAllUrl: verticalConfig.getViewAllUrl,
                    cssClasses
                }), void 0), CardComponent: verticalConfig.CardComponent }, verticalKey));
        }) }, void 0);
}
//# sourceMappingURL=UniversalResults.js.map