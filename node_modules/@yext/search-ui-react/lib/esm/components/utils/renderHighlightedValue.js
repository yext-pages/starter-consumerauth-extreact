import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
const defaultCssClasses = {
    highlighted: 'font-normal',
    nonHighlighted: 'font-semibold'
};
/**
 * Renders a HighlightedValue with highlighting based on its matchedSubstrings.
 * @returns JSX.Element
 *
 * @public
 *
 * @param highlightedValueOrString - the text to add highlight to.
 * @param customCssClasses - css classes use for the non-highlighted and highlighted text.
 */
export function renderHighlightedValue(highlightedValueOrString, customCssClasses) {
    const { value = '', matchedSubstrings } = typeof highlightedValueOrString === 'string'
        ? { value: highlightedValueOrString, matchedSubstrings: [] }
        : highlightedValueOrString;
    const cssClasses = Object.assign(Object.assign({}, defaultCssClasses), customCssClasses);
    if (!matchedSubstrings || matchedSubstrings.length === 0) {
        return _jsx("span", { children: value }, void 0);
    }
    const substrings = [...matchedSubstrings];
    substrings.sort((a, b) => a.offset - b.offset);
    const highlightedJSX = [];
    let curr = 0;
    for (const { offset, length } of substrings) {
        if (offset > curr) {
            highlightedJSX.push(_jsx("span", Object.assign({ className: cssClasses.nonHighlighted }, { children: value.substring(curr, offset) }), curr));
        }
        highlightedJSX.push(_jsx("span", Object.assign({ className: cssClasses.highlighted }, { children: value.substring(offset, offset + length) }), offset));
        curr = offset + length;
    }
    if (curr < value.length) {
        highlightedJSX.push(_jsx("span", Object.assign({ className: cssClasses.nonHighlighted }, { children: value.substring(curr) }), curr));
    }
    return _jsx(_Fragment, { children: highlightedJSX }, void 0);
}
//# sourceMappingURL=renderHighlightedValue.js.map