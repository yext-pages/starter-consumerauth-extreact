import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useComposedCssClasses } from '../hooks/useComposedCssClasses';
import LoadingIndicator from '../icons/LoadingIndicator';
import { YextIcon } from '../icons/YextIcon';
import { useGeolocationHandler } from '../hooks/useGeolocationHandler';
const builtInCssClasses = {
    geolocationContainer: 'text-sm text-neutral text-center justify-center items-center flex flex-row',
    button: 'text-primary font-semibold hover:underline focus:underline',
    iconContainer: 'w-4 ml-2'
};
/**
 * A React Component which collects location information to create a
 * location filter and perform a new search.
 *
 * @public
 *
 * @param props - {@link GeolocationProps}
 * @returns A react component for geolocation
 */
export function Geolocation({ geolocationOptions, radius = 50, label = 'Use my location', 
//TODO: replace default icon with SVG create from design team
GeolocationIcon = YextIcon, handleClick, customCssClasses, }) {
    const cssClasses = useComposedCssClasses(builtInCssClasses, customCssClasses);
    const [handleGeolocationClick, isFetchingUserLocation] = useGeolocationHandler({
        geolocationOptions,
        radius,
        handleUserPosition: handleClick
    });
    return (_jsxs("div", Object.assign({ className: cssClasses.geolocationContainer }, { children: [_jsx("button", Object.assign({ className: cssClasses.button, onClick: handleGeolocationClick }, { children: label }), void 0), _jsx("div", Object.assign({ className: cssClasses.iconContainer }, { children: isFetchingUserLocation ? _jsx(LoadingIndicator, {}, void 0) : _jsx(GeolocationIcon, {}, void 0) }), void 0)] }), void 0));
}
//# sourceMappingURL=Geolocation.js.map