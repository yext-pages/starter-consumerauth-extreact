import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { AppliedFiltersDisplay } from '../AppliedFiltersDisplay';
import { CollectionIcon } from '../../icons/CollectionIcon';
import { useSearchState } from '@yext/search-headless-react';
import classNames from 'classnames';
import { useAnalytics } from '../../hooks/useAnalytics';
import { useCallback } from 'react';
const FALLBACK_CSS_CLASSES = {};
export const builtInCssClasses = {
    sectionHeaderContainer: 'flex items-center w-full pl-1 mb-4',
    sectionHeaderIconContainer: 'w-5 h-5',
    sectionHeaderLabel: 'font-bold text-neutral-dark text-base pl-3',
    viewMoreContainer: 'flex justify-end flex-grow ml-auto font-medium text-neutral-dark',
    viewMoreLink: 'text-primary pr-1 pl-3',
    appliedFiltersContainer: 'ml-3 flex flex-wrap',
    nlpFilter: 'border border-gray-200 rounded-3xl px-3 py-1.5 text-sm font-medium text-neutral-dark mr-2',
    removableFilter: 'flex items-center border border-gray-200 rounded-3xl px-3 py-1.5 text-sm font-medium text-neutral-dark mr-2'
};
/**
 * The header of a section which includes an icon, the section title, applied query filters, and optionally
 * a view all button.
 *
 * @param props - {@link SectionHeaderProps}
 * @returns A React element for a Section Header
 */
export function SectionHeader(props) {
    var _a;
    const { label, verticalKey, viewAllButton = false, appliedQueryFilters, cssClasses = FALLBACK_CSS_CLASSES, getViewAllUrl } = props;
    const latestQuery = useSearchState(state => state.query.mostRecentSearch);
    const nlpFilterDisplayNames = appliedQueryFilters === null || appliedQueryFilters === void 0 ? void 0 : appliedQueryFilters.map(f => f.displayValue);
    const analytics = useAnalytics();
    const queryId = useSearchState(state => state.query.queryId);
    const isLoading = useSearchState(state => state.searchStatus.isLoading);
    cssClasses.appliedFiltersContainer = classNames(cssClasses.appliedFiltersContainer, {
        [(_a = cssClasses.appliedFiltersLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    const href = getViewAllUrl
        ? getViewAllUrl({ verticalKey, query: latestQuery })
        : `/${verticalKey}?query=${latestQuery}`;
    const handleClickViewAllButton = useCallback(() => {
        if (!analytics) {
            return;
        }
        if (!queryId) {
            console.error('Unable to report a vertical view all event. Missing field: queryId.');
            return;
        }
        analytics === null || analytics === void 0 ? void 0 : analytics.report({
            type: 'VERTICAL_VIEW_ALL',
            queryId,
            verticalKey
        });
    }, [analytics, queryId, verticalKey]);
    return (_jsxs("div", Object.assign({ className: cssClasses.sectionHeaderContainer }, { children: [_jsx("div", Object.assign({ className: cssClasses.sectionHeaderIconContainer }, { children: _jsx(CollectionIcon, {}, void 0) }), void 0), _jsx("h2", Object.assign({ className: cssClasses.sectionHeaderLabel }, { children: label }), void 0), appliedQueryFilters &&
                _jsx(AppliedFiltersDisplay, { nlpFilterDisplayNames: nlpFilterDisplayNames, cssClasses: cssClasses }, void 0), viewAllButton &&
                _jsx("div", Object.assign({ className: cssClasses.viewMoreContainer }, { children: _jsx("a", Object.assign({ className: cssClasses.viewMoreLink, href: href }, { children: _jsx("button", Object.assign({ onClick: handleClickViewAllButton }, { children: "View all" }), void 0) }), void 0) }), void 0)] }), void 0));
}
//# sourceMappingURL=SectionHeader.js.map