var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FacetsProvider } from './Filters';
import { FilterGroup } from './FilterGroup';
import { Fragment } from 'react';
import { FilterDivider } from './FilterDivider';
import { isStringFacet } from '../utils/filterutils';
/**
 * A component that displays simple facets applicable to the current vertical search.
 *
 * @remarks
 * Numerical facets is not included. Hierachical facets will not be display in a
 * tree level structure. Use `excludedFieldIds` to exclude hierachical facets, if any,
 * when using this component.
 *
 * @param props - {@link StandardFacetsProps}
 * @returns A React component for facets
 *
 * @deprecated Use {@link Facets} instead.
 * @public
 */
export function StandardFacets(props) {
    const { searchOnChange, excludedFieldIds = [], customCssClasses = {}, showMoreLimit = 10, showOptionCounts = true } = props, filterGroupProps = __rest(props, ["searchOnChange", "excludedFieldIds", "customCssClasses", "showMoreLimit", "showOptionCounts"]);
    return (_jsx(FacetsProvider, Object.assign({ searchOnChange: searchOnChange, className: customCssClasses.standardFacetsContainer }, { children: facets => facets
            .filter(f => !excludedFieldIds.includes(f.fieldId) && isStringFacet(f))
            .map((f, i) => {
            return (_jsxs(Fragment, { children: [_jsx(FilterGroup, Object.assign({ fieldId: f.fieldId, filterOptions: f.options.map(o => {
                            return showOptionCounts ? Object.assign(Object.assign({}, o), { resultsCount: o.count }) : o;
                        }), title: f.displayName, customCssClasses: customCssClasses, showMoreLimit: showMoreLimit, searchable: f.options.length > showMoreLimit }, filterGroupProps), void 0), (i < facets.length - 1) && _jsx(FilterDivider, { className: customCssClasses.divider }, void 0)] }, f.fieldId));
        }) }), void 0));
}
//# sourceMappingURL=StandardFacets.js.map