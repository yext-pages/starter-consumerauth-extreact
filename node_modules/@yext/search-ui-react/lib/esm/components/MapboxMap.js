import { jsx as _jsx } from "react/jsx-runtime";
import { useRef, useEffect } from 'react';
import mapboxgl, { Map, Marker, LngLatBounds } from 'mapbox-gl';
import { useSearchState } from '@yext/search-headless-react';
import { useDebouncedFunction } from '../hooks/useDebouncedFunction';
import ReactDOM from 'react-dom';
/**
 * A component that renders a map with markers to show result locations using Mapbox GL.
 *
 * @remarks
 * For the map to work properly, be sure to include Mapbox GL stylesheet in the application.
 *
 * @example
 * For instance, user may add the following import statement in their application's index file
 * or in the file where `MapboxMap` is used:
 * `import 'mapbox-gl/dist/mapbox-gl.css';`
 *
 * Or, user may add a stylesheet link in their html page:
 * `<link href="https://api.mapbox.com/mapbox-gl-js/v2.9.2/mapbox-gl.css" rel="stylesheet" />`
 *
 * @param props - {@link MapboxMapProps}
 * @returns A React element containing a Mapbox Map
 *
 * @public
 */
export function MapboxMap({ mapboxAccessToken, mapboxOptions, PinComponent, getCoordinate = getDefaultCoordinate, onDrag }) {
    useEffect(() => {
        mapboxgl.accessToken = mapboxAccessToken;
    }, [mapboxAccessToken]);
    const mapContainer = useRef(null);
    const map = useRef(null);
    const markers = useRef([]);
    const locationResults = useSearchState(state => state.vertical.results);
    const onDragDebounced = useDebouncedFunction(onDrag, 100);
    useEffect(() => {
        if (mapContainer.current && !map.current) {
            const options = Object.assign({ container: mapContainer.current, style: 'mapbox://styles/mapbox/streets-v11', center: [-74.005371, 40.741611], zoom: 9 }, mapboxOptions);
            map.current = new Map(options);
            const mapbox = map.current;
            mapbox.resize();
            if (onDragDebounced) {
                mapbox.on('drag', () => {
                    onDragDebounced(mapbox.getCenter(), mapbox.getBounds());
                });
            }
        }
    }, [mapboxOptions, onDragDebounced]);
    useEffect(() => {
        markers.current.forEach(marker => marker.remove());
        markers.current = [];
        const mapbox = map.current;
        if (mapbox && (locationResults === null || locationResults === void 0 ? void 0 : locationResults.length) > 0) {
            const bounds = new LngLatBounds();
            locationResults.forEach((result, i) => {
                const markerLocation = getCoordinate(result);
                if (markerLocation) {
                    const { latitude, longitude } = markerLocation;
                    const el = document.createElement('div');
                    const markerOptions = {};
                    if (PinComponent) {
                        ReactDOM.render(_jsx(PinComponent, { index: i, mapbox: mapbox, result: result }, void 0), el);
                        markerOptions.element = el;
                    }
                    const marker = new Marker(markerOptions)
                        .setLngLat({ lat: latitude, lng: longitude })
                        .addTo(mapbox);
                    markers.current.push(marker);
                    bounds.extend([longitude, latitude]);
                }
            });
            if (!bounds.isEmpty()) {
                mapbox.fitBounds(bounds, {
                    padding: { top: 50, bottom: 50, left: 50, right: 50 },
                    maxZoom: 15
                });
            }
        }
    }, [PinComponent, getCoordinate, locationResults]);
    return (_jsx("div", { ref: mapContainer, className: 'h-full w-full' }, void 0));
}
function isCoordinate(data) {
    return typeof data == 'object'
        && typeof (data === null || data === void 0 ? void 0 : data['latitude']) === 'number'
        && typeof (data === null || data === void 0 ? void 0 : data['longitude']) === 'number';
}
function getDefaultCoordinate(result) {
    const yextDisplayCoordinate = result.rawData['yextDisplayCoordinate'];
    if (!yextDisplayCoordinate) {
        console.error('Unable to use the default "yextDisplayCoordinate" field as the result\'s coordinate to display on map.'
            + '\nConsider providing the "getCoordinate" prop to MapboxMap component to fetch the desire coordinate from result.');
        return undefined;
    }
    if (!isCoordinate(yextDisplayCoordinate)) {
        console.error('The default `yextDisplayCoordinate` field from result is not of type "Coordinate".');
        return undefined;
    }
    return yextDisplayCoordinate;
}
//# sourceMappingURL=MapboxMap.js.map