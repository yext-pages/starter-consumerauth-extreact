import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CollapsibleLabel, CollapsibleSection, FacetsProvider, FilterGroupProvider, HierarchicalFacetDisplay } from './Filters';
import { Fragment } from 'react';
import { FilterDivider } from './FilterDivider';
/**
 * A component that displays hierarchical facets, in a tree level structure,
 * applicable to the current vertical search.
 *
 * @param props - {@link HierarchicalFacetsProps}
 * @returns A React component for facets
 *
 * @deprecated Use {@link HierarchicalFacet} with {@link Facets} instead.
 * @public
 */
export function HierarchicalFacets({ searchOnChange, collapsible, defaultExpanded, includedFieldIds, customCssClasses = {}, delimiter, showMoreLimit }) {
    return (_jsx(FacetsProvider, Object.assign({ searchOnChange: searchOnChange, className: customCssClasses.hierarchicalFacetsContainer }, { children: facets => facets
            .filter(f => f.options.length > 0 && includedFieldIds.includes(f.fieldId))
            .map((f, i) => {
            return (_jsxs(Fragment, { children: [_jsxs(FilterGroupProvider, Object.assign({ fieldId: f.fieldId, defaultExpanded: !collapsible || defaultExpanded }, { children: [collapsible
                                ? _jsx(CollapsibleLabel, { label: f.displayName }, void 0)
                                : (f.displayName && _jsx("div", Object.assign({ className: 'text-neutral-dark text-sm font-medium text-left mb-4' }, { children: f.displayName }), void 0)), _jsx(CollapsibleSection, { children: _jsx(HierarchicalFacetDisplay, { facet: f, delimiter: delimiter, showMoreLimit: showMoreLimit, customCssClasses: customCssClasses }, void 0) }, void 0)] }), void 0), (i < facets.length - 1) && _jsx(FilterDivider, { className: customCssClasses.divider }, void 0)] }, f.fieldId));
        }) }), void 0));
}
//# sourceMappingURL=HierarchicalFacets.js.map