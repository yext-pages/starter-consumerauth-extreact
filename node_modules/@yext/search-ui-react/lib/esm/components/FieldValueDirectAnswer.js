import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { BuiltInFieldType } from '@yext/search-headless-react';
import { useMemo } from 'react';
/**
 * Renders a field value direct answer provided by the Search API.
 *
 * @internal
 */
export function FieldValueDirectAnswer({ result, viewDetailsClickHandler, UnknownFieldTypeDisplay, cssClasses = {} }) {
    var _a;
    const title = `${result.entityName} / ${result.fieldName}`;
    const link = (_a = result.relatedResult.link) !== null && _a !== void 0 ? _a : result.relatedResult.rawData.landingPageUrl;
    const resultContent = useMemo(() => {
        return getResultContent(result, UnknownFieldTypeDisplay);
    }, [result, UnknownFieldTypeDisplay]);
    return (_jsxs("div", Object.assign({ className: cssClasses.answerContainer }, { children: [title &&
                _jsx("div", Object.assign({ className: cssClasses.header }, { children: title }), void 0), _jsxs("div", Object.assign({ className: cssClasses.content }, { children: [_jsx("div", Object.assign({ className: cssClasses.body }, { children: resultContent }), void 0), link && _jsx("div", Object.assign({ className: 'mt-4' }, { children: _jsx("a", Object.assign({ href: link, className: 'text-primary', onClick: viewDetailsClickHandler }, { children: "View Details" }), void 0) }), void 0)] }), void 0)] }), void 0));
}
function DefaultUnknownFieldTypeDisplay({ result }) {
    let val;
    if (typeof result.value !== 'string' && typeof result.value !== 'number') {
        console.warn(`Unknown field type for direct answer with "${result.fieldApiName}" fieldApiName. Rendering result's value as a string.`
            + '\nConsider using prop "UnknownFieldTypeDisplay" in DirectAnswer component to properly render result of unknown field type.');
        val = JSON.stringify(result.value);
    }
    else {
        val = result.value;
    }
    return getTextJsxElement(val);
}
function getResultContent(result, UnknownFieldTypeDisplay = DefaultUnknownFieldTypeDisplay) {
    switch (result.fieldType) {
        case BuiltInFieldType.InstagramHandle:
            return getAnchorTagJsxElement(`https://www.instagram.com/${result.value}`, result.value);
        case BuiltInFieldType.TwitterHandle:
            return getAnchorTagJsxElement(`https://twitter.com/${result.value}`, `@${result.value}`);
        case BuiltInFieldType.FacebookURL:
        case BuiltInFieldType.AndroidAppURL:
        case BuiltInFieldType.IOSAppURL:
            return getAnchorTagJsxElement(result.value);
        case BuiltInFieldType.ComplexURL:
            const url = result.value.url;
            const displayUrl = result.value.preferDisplayUrl ? result.value.displayUrl : url;
            return getAnchorTagJsxElement(url, displayUrl);
        case BuiltInFieldType.URL:
            return Array.isArray(result.value)
                ? getListJsxElement(result.value, url => getAnchorTagJsxElement(url))
                : getAnchorTagJsxElement(result.value);
        case BuiltInFieldType.Phone:
            return getAnchorTagJsxElement(`tel:${result.value}`, result.value);
        case BuiltInFieldType.Email:
            return getListJsxElement(result.value, e => getAnchorTagJsxElement(`mailto:${e}`, e));
        case BuiltInFieldType.Address:
            return getAddressJsxElement(result.value);
        case BuiltInFieldType.RichText:
            //TODO: SLAP-2340
            console.warn('Rendering markdown for rich text direct answer is currently not supported. Displaying the unrendered markdown string(s) as is.');
            return Array.isArray(result.value)
                ? getListJsxElement(result.value, val => getTextJsxElement(val))
                : getTextJsxElement(result.value);
        case BuiltInFieldType.Hours:
            return _jsx("div", { children: JSON.stringify(result.value) }, void 0);
        case 'unknown':
            return _jsx(UnknownFieldTypeDisplay, { result: result }, void 0);
        default:
            return Array.isArray(result.value)
                ? getListJsxElement(result.value, val => getTextJsxElement(val))
                : getTextJsxElement(result.value);
    }
}
function getListJsxElement(list, getItemJsxElement) {
    return (_jsx("ul", Object.assign({ className: 'list-disc list-inside' }, { children: list.map((el, i) => _jsx("li", { children: getItemJsxElement(el) }, i)) }), void 0));
}
function getTextJsxElement(text) {
    return _jsx("p", Object.assign({ className: 'whitespace-pre-wrap' }, { children: text }), void 0);
}
function getAnchorTagJsxElement(href, displayText) {
    return _jsx("a", Object.assign({ href: href, className: 'text-primary' }, { children: displayText !== null && displayText !== void 0 ? displayText : href }), void 0);
}
function getAddressJsxElement(address) {
    // user specified display Address in KM
    if (address.extraDescription) {
        return _jsx("div", { children: address.extraDescription }, void 0);
    }
    const formattedCity = address.city ? address.city + ',' : '';
    const formattedCityRegionPostalCode = [formattedCity, address.region, address.postalCode].join(' ').trim();
    return _jsxs("div", { children: [address.line1 && _jsx("p", { children: address.line1 }, void 0), address.line2 && _jsx("p", { children: address.line2 }, void 0), address.line3 && _jsx("p", { children: address.line3 }, void 0), formattedCityRegionPostalCode && _jsx("p", { children: formattedCityRegionPostalCode }, void 0), _jsx("p", { children: address.countryCode }, void 0)] }, void 0);
}
//# sourceMappingURL=FieldValueDirectAnswer.js.map