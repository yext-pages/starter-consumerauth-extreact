import { jsx as _jsx } from "react/jsx-runtime";
import { useSearchState } from '@yext/search-headless-react';
import { useComposedCssClasses } from '../hooks/useComposedCssClasses';
import classNames from 'classnames';
import { AppliedFiltersDisplay } from './AppliedFiltersDisplay';
import { DEFAULT_HIERARCHICAL_DELIMITER } from './Filters/HierarchicalFacetDisplay';
import { useNlpFilterDisplayNames } from '../hooks/useNlpFilterDisplayNames';
import { useRemovableFilters } from '../hooks/useRemovableFilters';
export const builtInCssClasses = {
    // Use negative margin to remove space above the filters on mobile
    appliedFiltersContainer: 'flex flex-wrap -mt-3 md:mt-0 mb-2',
    appliedFiltersLoading: 'opacity-50',
    nlpFilter: 'border border-gray-200 rounded-3xl px-3 py-1.5 text-sm font-medium text-neutral-dark mr-2 mb-2',
    removableFilter: 'flex items-center border border-gray-200 rounded-3xl px-3 py-1.5 text-sm font-medium text-neutral-dark mr-2 mb-2',
    clearAllButton: 'text-sm font-medium text-primary hover:underline focus:underline mb-2'
};
const DEFAULT_HIDDEN_FIELDS = ['builtin.entityType'];
/**
 * A component that displays a list of filters applied to the current vertical
 * search, which may include any selected options from facets, NLP filters, and
 * field value static filters.
 *
 * @public
 *
 * @param props - {@link AppliedFiltersProps}
 * @returns A React element for the applied filters
 */
export function AppliedFilters(props) {
    var _a;
    const isLoading = useSearchState(state => state.searchStatus.isLoading);
    const { hiddenFields = DEFAULT_HIDDEN_FIELDS, customCssClasses = {}, hierarchicalFacetsDelimiter = DEFAULT_HIERARCHICAL_DELIMITER, hierarchicalFacetsFieldIds } = props;
    const removableFilters = useRemovableFilters(hierarchicalFacetsFieldIds, hierarchicalFacetsDelimiter, hiddenFields);
    const nlpFilterDisplayNames = useNlpFilterDisplayNames(removableFilters.map(f => f.filter), hiddenFields);
    const cssClasses = useComposedCssClasses(builtInCssClasses, customCssClasses);
    cssClasses.appliedFiltersContainer = classNames(cssClasses.appliedFiltersContainer, {
        [(_a = cssClasses.appliedFiltersLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    return (_jsx(AppliedFiltersDisplay, { removableFilters: removableFilters, nlpFilterDisplayNames: nlpFilterDisplayNames, cssClasses: cssClasses }, void 0));
}
//# sourceMappingURL=AppliedFilters.js.map