var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { useSearchState } from '@yext/search-headless-react';
import { VerticalResultsDisplay } from './VerticalResultsDisplay';
/**
 * A component that renders search results for a vertical page.
 *
 * @public
 *
 * @param props - {@link VerticalResultsProps}
 * @returns A React element for the results, or null if no results should be displayed
 */
export function VerticalResults(props) {
    const { displayAllOnNoResults = true } = props, otherProps = __rest(props, ["displayAllOnNoResults"]);
    const verticalResults = useSearchState(state => state.vertical.results) || [];
    const allResultsForVertical = useSearchState(state => { var _a, _b; return (_b = (_a = state.vertical) === null || _a === void 0 ? void 0 : _a.noResults) === null || _b === void 0 ? void 0 : _b.allResultsForVertical.results; }) || [];
    const isLoading = useSearchState(state => state.searchStatus.isLoading);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let results = verticalResults;
    if (verticalResults.length === 0 && displayAllOnNoResults) {
        results = allResultsForVertical;
    }
    return (_jsx(VerticalResultsDisplay, Object.assign({ results: results, isLoading: isLoading }, otherProps), void 0));
}
//# sourceMappingURL=VerticalResults.js.map