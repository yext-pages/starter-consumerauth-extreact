import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useSearchState, DirectAnswerType, } from '@yext/search-headless-react';
import { ThumbsFeedback, builtInCssClasses as thumbsFeedbackCssClasses } from './ThumbsFeedback';
import { twMerge, useComposedCssClasses } from '../hooks/useComposedCssClasses';
import { useCardAnalyticsCallback } from '../hooks/useCardAnalyticsCallback';
import { useCardFeedbackCallback } from '../hooks/useCardFeedbackCallback';
import { FieldValueDirectAnswer } from './FieldValueDirectAnswer';
import { FeaturedSnippetDirectAnswer } from './FeaturedSnippetDirectAnswer';
const builtInCssClasses = {
    directAnswerContainer: '',
    directAnswerLoading: 'opacity-50',
    answer: 'font-bold text-xl text-neutral-dark',
    description: 'text-neutral',
    content: 'mt-4',
    highlighted: 'bg-primary-light',
    answerContainer: 'p-4 border border-gray-200 rounded-lg shadow-sm',
    thumbsFeedbackContainer: thumbsFeedbackCssClasses.thumbsFeedbackContainer,
    thumbsUpIcon: thumbsFeedbackCssClasses.thumbsUpIcon,
    thumbsDownIcon: thumbsFeedbackCssClasses.thumbsDownIcon
};
/**
 * Renders Direct Answers provided by the Search API.
 *
 * @public
 *
 * @param props - {@link DirectAnswerProps}
 * @returns A react element for DirectAnswer
 */
export function DirectAnswer({ customCssClasses, UnknownFieldTypeDisplay }) {
    const directAnswerResult = useSearchState(state => state.directAnswer.result);
    const isLoading = useSearchState(state => state.searchStatus.isLoading || false);
    const composedCssClasses = useComposedCssClasses(builtInCssClasses, customCssClasses);
    const handleClickViewDetails = useCardAnalyticsCallback(directAnswerResult, 'CTA_CLICK');
    const handleClickFeedbackButton = useCardFeedbackCallback(directAnswerResult);
    if (!directAnswerResult) {
        return null;
    }
    const cssClasses = getCssClassesForAnswerType(composedCssClasses, directAnswerResult.type);
    const containerCssClasses = twMerge(cssClasses.directAnswerContainer, isLoading && cssClasses.directAnswerLoading);
    return (_jsxs("div", Object.assign({ className: containerCssClasses }, { children: [directAnswerResult.type === DirectAnswerType.FieldValue
                ? _jsx(FieldValueDirectAnswer, { result: directAnswerResult, cssClasses: cssClasses, viewDetailsClickHandler: handleClickViewDetails, UnknownFieldTypeDisplay: UnknownFieldTypeDisplay }, void 0)
                : _jsx(FeaturedSnippetDirectAnswer, { result: directAnswerResult, readMoreClickHandler: handleClickViewDetails, cssClasses: cssClasses }, void 0), _jsx(ThumbsFeedback, { onClick: handleClickFeedbackButton, customCssClasses: composedCssClasses }, void 0)] }), void 0));
}
function getCssClassesForAnswerType(cssClasses, type) {
    const isSnippet = type === DirectAnswerType.FeaturedSnippet;
    return Object.assign(Object.assign({}, cssClasses), { header: isSnippet ? cssClasses.answer : cssClasses.description, body: isSnippet ? cssClasses.description : cssClasses.answer });
}
//# sourceMappingURL=DirectAnswer.js.map