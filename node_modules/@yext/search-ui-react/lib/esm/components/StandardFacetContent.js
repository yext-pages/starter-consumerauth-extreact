var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { FilterGroup } from './FilterGroup';
/**
 * A component that displays the content of a standard facet.
 *
 * @param props - props to render the component
 * @returns A React component for the content of a standard facet
 *
 * @internal
 */
export function StandardFacetContent(_a) {
    var { fieldId, label, transformOptions, customCssClasses, facet, showMoreLimit = 10, showOptionCounts = true } = _a, filterGroupProps = __rest(_a, ["fieldId", "label", "transformOptions", "customCssClasses", "facet", "showMoreLimit", "showOptionCounts"]);
    const options = facet.options || [];
    const transformedOptions = transformOptions ? (transformOptions(options) || []) : options;
    return (_jsx(FilterGroup, Object.assign({ fieldId: fieldId, filterOptions: transformedOptions.map(o => {
            return showOptionCounts ? Object.assign(Object.assign({}, o), { resultsCount: o.count }) : o;
        }), title: label || facet.displayName, customCssClasses: customCssClasses, showMoreLimit: showMoreLimit, searchable: (facet === null || facet === void 0 ? void 0 : facet.options.length) > showMoreLimit }, filterGroupProps), void 0));
}
//# sourceMappingURL=StandardFacetContent.js.map