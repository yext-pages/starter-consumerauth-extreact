var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FacetsProvider, RangeInput } from './Filters';
import { FilterGroup } from './FilterGroup';
import { Fragment } from 'react';
import { isNumericalFacet } from '../utils/filterutils';
import { FilterDivider } from './FilterDivider';
const DEFAULT_RANGE_INPUT_PREFIX = _jsx(_Fragment, { children: "$" }, void 0);
/**
 * A component that displays numerical facets applicable to the current vertical search.
 *
 * @param props - {@link NumericalFacetsProps}
 * @returns A React component for facets
 *
 * @deprecated Use {@link NumericalFacet} with {@link Facets} instead.
 * @public
 */
export function NumericalFacets(_a) {
    var { searchOnChange, includedFieldIds = [], getFilterDisplayName, inputPrefix = DEFAULT_RANGE_INPUT_PREFIX, customCssClasses = {} } = _a, filterGroupProps = __rest(_a, ["searchOnChange", "includedFieldIds", "getFilterDisplayName", "inputPrefix", "customCssClasses"]);
    return (_jsx(FacetsProvider, Object.assign({ searchOnChange: searchOnChange, className: customCssClasses.numericalFacetsContainer }, { children: facets => facets
            .filter(f => isNumericalFacet(f)
            && (includedFieldIds.length === 0 || includedFieldIds.includes(f.fieldId)))
            .map((f, i) => {
            return (_jsxs(Fragment, { children: [_jsx(FilterGroup, Object.assign({ fieldId: f.fieldId, filterOptions: f.options, title: f.displayName, customCssClasses: customCssClasses }, filterGroupProps, { children: _jsx(RangeInput, { getFilterDisplayName: getFilterDisplayName, inputPrefix: inputPrefix, customCssClasses: customCssClasses }, void 0) }), void 0), (i < facets.length - 1) && _jsx(FilterDivider, { className: customCssClasses.divider }, void 0)] }, f.fieldId));
        }) }), void 0));
}
//# sourceMappingURL=NumericalFacets.js.map