import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { processTranslation } from './utils/processTranslation';
import { StarIcon } from '../icons/StarIcon';
import { useSearchState } from '@yext/search-headless-react';
import { useComposedCssClasses } from '../hooks/useComposedCssClasses';
import classNames from 'classnames';
const builtInCssClasses = {
    alternativeVerticalsContainer: 'flex flex-col justify-between border border-gray-200 rounded-lg mb-4 p-4 shadow-sm',
    alternativeVerticalsLoading: 'opacity-50',
    noResultsText: 'text-lg text-neutral-dark pb-2',
    categoriesText: 'text-neutral',
    suggestion: 'pb-4 flex items-center',
    verticalIcon: 'w-4 mr-2'
};
function isVerticalSuggestion(suggestion) {
    var _a, _b;
    return ((_a = suggestion) === null || _a === void 0 ? void 0 : _a.resultsCount) !== undefined &&
        ((_b = suggestion) === null || _b === void 0 ? void 0 : _b.verticalKey) !== undefined;
}
/**
 * A component that displays the alternative verticals that have results if a search returns none
 * on the current vertical.
 *
 * @public
 *
 * @param props - {@link AlternativeVerticalsProps}
 * @returns A React element for the alternative verticals, or null if there are none with results
 */
export function AlternativeVerticals({ currentVerticalLabel, verticalConfigMap, displayAllOnNoResults = true, customCssClasses }) {
    var _a;
    const cssClasses = useComposedCssClasses(builtInCssClasses, customCssClasses);
    const alternativeVerticals = useSearchState(state => { var _a; return (_a = state.vertical.noResults) === null || _a === void 0 ? void 0 : _a.alternativeVerticals; }) || [];
    const allResultsForVertical = useSearchState(state => { var _a; return (_a = state.vertical.noResults) === null || _a === void 0 ? void 0 : _a.allResultsForVertical.results; }) || [];
    const query = useSearchState(state => state.query.mostRecentSearch);
    const verticalSuggestions = buildVerticalSuggestions(verticalConfigMap, alternativeVerticals);
    const isShowingAllResults = displayAllOnNoResults && allResultsForVertical.length > 0;
    const isLoading = useSearchState(state => state.searchStatus.isLoading);
    const containerClassNames = classNames(cssClasses.alternativeVerticalsContainer, {
        [(_a = cssClasses.alternativeVerticalsLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    function buildVerticalSuggestions(verticalConfigMap, alternativeVerticals) {
        return alternativeVerticals
            .filter((alternativeResults) => {
            return !!verticalConfigMap[alternativeResults.verticalKey];
        })
            .map((alternativeResults) => {
            return {
                label: verticalConfigMap[alternativeResults.verticalKey].label,
                verticalKey: alternativeResults.verticalKey,
                resultsCount: alternativeResults.resultsCount
            };
        })
            .filter(isVerticalSuggestion)
            .filter(verticalSuggestion => verticalSuggestion.resultsCount > 0);
    }
    if (verticalSuggestions.length <= 0) {
        return null;
    }
    return (_jsxs("div", Object.assign({ className: containerClassNames }, { children: [renderNoResultsInfo(), verticalSuggestions &&
                _jsxs("div", Object.assign({ className: 'pt-4 text-neutral-dark' }, { children: [_jsxs("div", Object.assign({ className: cssClasses.categoriesText }, { children: [_jsx("span", { children: processTranslation({
                                        phrase: 'The following category yielded results for - ',
                                        pluralForm: 'The following categories yielded results for - ',
                                        count: verticalSuggestions.length
                                    }) }, void 0), _jsx("strong", { children: query }, void 0)] }), void 0), _jsx("ul", Object.assign({ className: 'pt-4' }, { children: verticalSuggestions.map(renderSuggestion) }), void 0)] }), void 0)] }), void 0));
    function renderNoResultsInfo() {
        return (_jsxs("div", Object.assign({ className: cssClasses.noResultsText }, { children: [_jsxs("span", { children: ["No results found in ", currentVerticalLabel, "."] }, void 0), isShowingAllResults &&
                    _jsxs("span", { children: [" Showing all ", currentVerticalLabel, " instead."] }, void 0)] }), void 0));
    }
    function renderSuggestion(suggestion) {
        const resultsCountText = processTranslation({
            phrase: `${suggestion.resultsCount} result`,
            pluralForm: `${suggestion.resultsCount} results`,
            count: suggestion.resultsCount
        });
        return (_jsxs("li", Object.assign({ className: cssClasses.suggestion }, { children: [_jsx("div", Object.assign({ className: cssClasses.verticalIcon }, { children: _jsx(StarIcon, {}, void 0) }), void 0), _jsxs("span", Object.assign({ className: 'font-bold' }, { children: [suggestion.label, " - ", resultsCountText] }), void 0)] }), suggestion.verticalKey));
    }
}
//# sourceMappingURL=AlternativeVerticals.js.map