import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useSearchActions, useSearchState, LocationBiasMethod } from '@yext/search-headless-react';
import { executeSearch } from '../utils/search-operations';
import { getUserLocation } from '../utils/location-operations';
import { twMerge, useComposedCssClasses } from '../hooks/useComposedCssClasses';
import { useState } from 'react';
import LoadingIndicator from '../icons/LoadingIndicator';
const builtInCssClasses = {
    locationBiasContainer: 'text-sm text-neutral text-center justify-center items-center flex flex-col lg:flex-row',
    location: 'font-semibold lg:ml-7',
    source: 'ml-3 lg:ml-0 whitespace-pre',
    button: 'text-primary hover:underline focus:underline ml-7 lg:ml-0',
    loadingIndicatorContainer: 'w-4 h-4 ml-3 shrink-0'
};
/**
 * A React Component which displays and collects location information in order to bias searches.
 *
 * @public
 *
 * @deprecated LocationBias component has been superseded by Geolocation component.
 *
 * @param props - {@link LocationBiasProps}
 * @returns A react component for Location Bias
 */
export function LocationBias({ geolocationOptions, customCssClasses }) {
    const searchActions = useSearchActions();
    const locationBias = useSearchState(s => s.location.locationBias);
    const [isFetchingLocation, setIsFetchingLocation] = useState(false);
    const cssClasses = useComposedCssClasses(builtInCssClasses, customCssClasses);
    const loadingIndicatorCss = twMerge(cssClasses.loadingIndicatorContainer, (!isFetchingLocation && 'invisible'));
    if (!(locationBias === null || locationBias === void 0 ? void 0 : locationBias.displayName))
        return null;
    const attributionMessage = (locationBias === null || locationBias === void 0 ? void 0 : locationBias.method) === LocationBiasMethod.Ip ? ' (based on your internet address)'
        : (locationBias === null || locationBias === void 0 ? void 0 : locationBias.method) === LocationBiasMethod.Device ? ' (based on your device)'
            : '';
    async function handleGeolocationClick() {
        setIsFetchingLocation(true);
        try {
            const position = await getUserLocation(geolocationOptions);
            searchActions.setUserLocation({
                latitude: position.coords.latitude,
                longitude: position.coords.longitude,
            });
        }
        catch (e) {
            console.error(e);
        }
        finally {
            setIsFetchingLocation(false);
        }
        executeSearch(searchActions);
    }
    return (_jsxs("div", Object.assign({ className: cssClasses.locationBiasContainer }, { children: [_jsx("span", Object.assign({ className: cssClasses.location }, { children: locationBias.displayName }), void 0), _jsxs("span", Object.assign({ className: cssClasses.source }, { children: [attributionMessage, _jsx("span", Object.assign({ className: 'invisible lg:visible' }, { children: " - " }), void 0)] }), void 0), _jsxs("div", Object.assign({ className: 'flex flex-row items-center' }, { children: [_jsx("button", Object.assign({ className: cssClasses.button, onClick: handleGeolocationClick }, { children: "Update your location" }), void 0), _jsx("div", Object.assign({ className: loadingIndicatorCss }, { children: _jsx(LoadingIndicator, {}, void 0) }), void 0)] }), void 0)] }), void 0));
}
//# sourceMappingURL=LocationBias.js.map