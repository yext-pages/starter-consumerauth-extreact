import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useRef, useState } from 'react';
import { useDropdownContext } from './DropdownContext';
import { useFocusContext } from './FocusContext';
import { generateDropdownId } from './generateDropdownId';
import { useInputContext } from './InputContext';
/**
 * An input component for use within a Dropdown.
 */
export function DropdownInput(props) {
    const { className, placeholder, ariaLabel, onSubmit, onFocus, onChange, submitCriteria } = props;
    const inputRef = useRef(null);
    const { toggleDropdown, onSelect, screenReaderUUID } = useDropdownContext();
    const { value = '', setLastTypedOrSubmittedValue } = useInputContext();
    const { focusedIndex = -1, focusedItemData, focusedValue, updateFocusedItem } = useFocusContext();
    const [isTyping, setIsTyping] = useState(true);
    const handleChange = useCallback((e) => {
        setIsTyping(true);
        toggleDropdown(true);
        onChange === null || onChange === void 0 ? void 0 : onChange(e.target.value);
        updateFocusedItem(-1, e.target.value);
        setLastTypedOrSubmittedValue(e.target.value);
    }, [onChange, setLastTypedOrSubmittedValue, toggleDropdown, updateFocusedItem]);
    const handleKeyDown = useCallback((e) => {
        var _a;
        if (e.key === 'ArrowDown' || e.key === 'ArrowUp' || e.key === 'Tab') {
            setIsTyping(false);
        }
        if (e.key === 'Enter' && (!submitCriteria || submitCriteria(focusedIndex))) {
            updateFocusedItem(focusedIndex);
            toggleDropdown(false);
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.blur();
            onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(value, focusedIndex, focusedItemData);
            if (focusedIndex >= 0) {
                onSelect === null || onSelect === void 0 ? void 0 : onSelect(value, focusedIndex, focusedItemData);
            }
            updateFocusedItem(-1, focusedValue !== null && focusedValue !== void 0 ? focusedValue : undefined);
        }
    }, [
        focusedIndex,
        focusedValue,
        focusedItemData,
        onSelect,
        onSubmit,
        submitCriteria,
        toggleDropdown,
        updateFocusedItem,
        value
    ]);
    const handleFocus = useCallback(() => {
        toggleDropdown(true);
        updateFocusedItem(-1);
        onFocus === null || onFocus === void 0 ? void 0 : onFocus(value);
    }, [onFocus, toggleDropdown, updateFocusedItem, value]);
    return (_jsx("input", { ref: inputRef, className: className, placeholder: placeholder, value: value, onChange: handleChange, onKeyDown: handleKeyDown, onFocus: handleFocus, id: generateDropdownId(screenReaderUUID, -1), autoComplete: 'off', "aria-describedby": screenReaderUUID, "aria-activedescendant": isTyping ? '' : generateDropdownId(screenReaderUUID, focusedIndex), "aria-label": ariaLabel }, void 0));
}
//# sourceMappingURL=DropdownInput.js.map