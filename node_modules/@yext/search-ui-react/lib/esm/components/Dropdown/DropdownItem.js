import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback } from 'react';
import { useDropdownContext } from './DropdownContext';
import { useFocusContext } from './FocusContext';
import { generateDropdownId } from './generateDropdownId';
import { useInputContext } from './InputContext';
/**
 * A wrapper component for specifying a DropdownItemWithIndex.
 * The index will be automatically provided by the Dropdown component instance.
 *
 * @public
 */
export function DropdownItem(_props) { return null; }
export function DropdownItemWithIndex(props) {
    const { children, value, index, className, focusedClassName, itemData, onClick, ariaLabel } = props;
    const { toggleDropdown, onSelect, screenReaderUUID } = useDropdownContext();
    const { focusedIndex, updateFocusedItem } = useFocusContext();
    const { setValue, setLastTypedOrSubmittedValue } = useInputContext();
    const isFocused = focusedIndex === index;
    const handleClick = useCallback(() => {
        toggleDropdown(false);
        updateFocusedItem(-1);
        setLastTypedOrSubmittedValue(value);
        setValue(value);
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(value, index, itemData);
        onClick === null || onClick === void 0 ? void 0 : onClick(value, index, itemData);
    }, [
        index,
        itemData,
        onClick,
        onSelect,
        setLastTypedOrSubmittedValue,
        setValue,
        toggleDropdown,
        updateFocusedItem,
        value
    ]);
    return (_jsx("div", Object.assign({ id: generateDropdownId(screenReaderUUID, index), tabIndex: 0, className: isFocused ? focusedClassName : className, onClick: handleClick, "aria-label": typeof ariaLabel === 'function' ? ariaLabel(value) : ariaLabel }, { children: children }), void 0));
}
//# sourceMappingURL=DropdownItem.js.map