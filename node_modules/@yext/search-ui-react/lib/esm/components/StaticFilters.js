var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { FilterGroup } from './FilterGroup';
import { StaticFiltersProvider } from './Filters/StaticFiltersProvider';
/**
 * A component that displays a group of user-configured field value filters
 * that will be applied to the current vertical search.
 *
 * @param props - {@link StaticFiltersProps}
 * @returns A React component for field value static filters
 *
 * @public
 */
export function StaticFilters(props) {
    const { searchOnChange, customCssClasses = {} } = props, filterGroupProps = __rest(props, ["searchOnChange", "customCssClasses"]);
    const { staticFiltersContainer: containerClassName } = customCssClasses, filterGroupCssClasses = __rest(customCssClasses, ["staticFiltersContainer"]);
    return (_jsx(StaticFiltersProvider, Object.assign({ searchOnChange: searchOnChange, className: containerClassName }, { children: _jsx(FilterGroup, Object.assign({ customCssClasses: filterGroupCssClasses }, filterGroupProps), filterGroupProps.fieldId) }), void 0));
}
//# sourceMappingURL=StaticFilters.js.map