import { NearFilterValue, FieldValueFilter, NumberRangeValue, SearchActions, DisplayableFacet, SelectableStaticFilter, StaticFilter } from '@yext/search-headless-react';
import { SelectableFieldValueFilter } from '../models/SelectableFieldValueFilter';
/**
 * Check if the object follows NearFilterValue interface.
 */
export declare function isNearFilterValue(obj: unknown): obj is NearFilterValue;
/**
 * Checks if the object follows the NumberRangeValue interface.
 */
export declare function isNumberRangeValue(obj: unknown): obj is NumberRangeValue;
/**
 * Checks if the facet is a string facet with string options.
 */
export declare function isStringFacet(facet: DisplayableFacet): boolean;
/**
 * Checks if the facet is a numerical facet with number range filter options.
 */
export declare function isNumericalFacet(facet: DisplayableFacet): boolean;
/**
 * Returns true if the two given field value filters are the same.
 */
export declare function isDuplicateFieldValueFilter(thisFilter: FieldValueFilter, otherFilter: FieldValueFilter): boolean;
/**
 * Returns true if the two given static filters are the same.
 */
export declare function isDuplicateStaticFilter(thisFilter: StaticFilter, otherFilter: StaticFilter): boolean;
/**
 * Finds the {@link SelectableFieldValueFilter} from the list provided that matches
 * the given {@link FieldValueFilter}. If no matching {@link SelectableFieldValueFilter}
 * can be found, undefined is returned.
 *
 * @param filter - The filter to match against
 * @param selectableFilters - The list of {@link SelectableFieldValueFilter}s to search against
 */
export declare function findSelectableFieldValueFilter(filter: FieldValueFilter, selectableFilters: SelectableFieldValueFilter[]): SelectableFieldValueFilter | undefined;
/**
 * Creates a number range value based on a min and max from user input.
 */
export declare function parseNumberRangeInput(minRangeInput: string, maxRangeInput: string): NumberRangeValue;
/**
 * Deselects the selected static number range filters in state. If fieldIds are
 * provided, only filters corresponding to one of those fieldIds are deselected.
 * Otherwise, all selected filters are deselected.
 */
export declare function clearStaticRangeFilters(searchActions: SearchActions, fieldIds?: Set<string>): void;
/**
 * Returns a set of fieldIds of the numerical facets in state that have at
 * least one option selected.
 */
export declare function getSelectedNumericalFacetFields(searchActions: SearchActions): Set<string>;
/**
 * Goes through the provided static filters and returns all that are field value
 * filters.
 *
 * @param staticFilters - The list of {@link SelectableStaticFilter}s to search through
 * @returns All filters that are {@link SelectableFieldValueFilter}s
 */
export declare function getSelectableFieldValueFilters(staticFilters: SelectableStaticFilter[]): SelectableFieldValueFilter[];
//# sourceMappingURL=filterutils.d.ts.map