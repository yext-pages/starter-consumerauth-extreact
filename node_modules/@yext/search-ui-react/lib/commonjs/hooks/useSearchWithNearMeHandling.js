"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSearchWithNearMeHandling = void 0;
const search_headless_react_1 = require("@yext/search-headless-react");
const search_operations_1 = require("../utils/search-operations");
const location_operations_1 = require("../utils/location-operations");
const react_1 = require("react");
/**
 * Returns a search action that will handle near me searches, by first checking
 * for near me intents using an autocomplete request.
 *
 * @remarks
 * You can optionally use the provided ref to store autocomplete responses, to avoid
 * making unnecessary autocomplete requests.
 */
function useSearchWithNearMeHandling(geolocationOptions, onSearch) {
    /**
     * Allow a query search to wait on the response to the autocomplete request right
     * before the search execution in order to retrieve the search intents.
     */
    const autocompletePromiseRef = (0, react_1.useRef)();
    const searchActions = (0, search_headless_react_1.useSearchActions)();
    async function executeQuery() {
        var _a, _b;
        let intents = [];
        if (!searchActions.state.location.userLocation) {
            if (!autocompletePromiseRef.current) {
                autocompletePromiseRef.current = (0, search_operations_1.executeAutocomplete)(searchActions);
            }
            const autocompleteResponseBeforeSearch = await autocompletePromiseRef.current;
            intents = (autocompleteResponseBeforeSearch === null || autocompleteResponseBeforeSearch === void 0 ? void 0 : autocompleteResponseBeforeSearch.inputIntents) || [];
            await (0, location_operations_1.updateLocationIfNeeded)(searchActions, intents, geolocationOptions);
        }
        const verticalKey = (_a = searchActions.state.vertical.verticalKey) !== null && _a !== void 0 ? _a : '';
        const query = (_b = searchActions.state.query.input) !== null && _b !== void 0 ? _b : '';
        onSearch
            ? onSearch({ verticalKey, query })
            : (0, search_operations_1.executeSearch)(searchActions);
    }
    return [executeQuery, autocompletePromiseRef];
}
exports.useSearchWithNearMeHandling = useSearchWithNearMeHandling;
//# sourceMappingURL=useSearchWithNearMeHandling.js.map