"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRemovableStaticFilters = void 0;
const search_headless_react_1 = require("@yext/search-headless-react");
const react_1 = require("react");
const filterutils_1 = require("../utils/filterutils");
const useStateUpdatedOnSearch_1 = require("./useStateUpdatedOnSearch");
/**
 * Returns a RemovableFilter[] sourced from the static filters state.
 *
 * @internal
 */
function useRemovableStaticFilters(hiddenFields) {
    const staticFilters = (0, useStateUpdatedOnSearch_1.useStateUpdatedOnSearch)(state => state.filters.static);
    const hasResults = !!(0, search_headless_react_1.useSearchState)(state => state.vertical.results);
    const searchActions = (0, search_headless_react_1.useSearchActions)();
    return (0, react_1.useMemo)(() => {
        if (!hasResults || !staticFilters) {
            return [];
        }
        function handleRemoveStaticFilterOption(filter) {
            searchActions.setFilterOption({
                filter: Object.assign(Object.assign({}, filter), { kind: 'fieldValue' }),
                selected: false
            });
        }
        return (0, filterutils_1.getSelectableFieldValueFilters)(staticFilters)
            .filter(f => f.selected && !hiddenFields.includes(f.fieldId))
            .map(f => {
            var _a;
            return ({
                displayName: (_a = f.displayName) !== null && _a !== void 0 ? _a : '',
                handleRemove: () => handleRemoveStaticFilterOption(f),
                filter: f
            });
        });
    }, [hasResults, hiddenFields, searchActions, staticFilters]);
}
exports.useRemovableStaticFilters = useRemovableStaticFilters;
//# sourceMappingURL=useRemovableStaticFilters.js.map