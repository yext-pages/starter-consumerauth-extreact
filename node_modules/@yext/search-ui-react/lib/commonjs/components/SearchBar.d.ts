import { SearchHeadless, QuerySource, UniversalLimit, VerticalResults as VerticalResultsData } from '@yext/search-headless-react';
import { ReactNode } from 'react';
import { FocusedItemData } from './Dropdown/FocusContext';
import { AutocompleteResultCssClasses } from './utils/renderAutocompleteResult';
import { VerticalLink } from '../models/verticalLink';
/**
 * The CSS class interface for the {@link SearchBar}.
 *
 * @public
 */
export interface SearchBarCssClasses extends AutocompleteResultCssClasses {
    searchBarContainer?: string;
    inputElement?: string;
    inputDivider?: string;
    clearButton?: string;
    searchButton?: string;
    searchButtonContainer?: string;
    focusedOption?: string;
    recentSearchesIcon?: string;
    recentSearchesOption?: string;
    recentSearchesNonHighlighted?: string;
    verticalLink?: string;
    verticalDivider?: string;
    entityPreviewsDivider?: string;
}
/**
 * The type of a functional React component which renders entity previews using
 * a map of vertical key to the corresponding VerticalResults data.
 *
 * @remarks
 * The autocomplete loading state is passed in as an optional param.
 *
 * Default props for rendering corresponding DropdownItems are passed in:
 * an onClick function to allow an entity preview to be submitted, and
 * an ariaLabel function that returns text for the screenreader
 *
 * For the entity previews to be navigable in the search bar's dropdown section,
 * wrap each entity preview in a {@link DropdownItem} component.
 *
 * @public
 */
export declare type RenderEntityPreviews = (autocompleteLoading: boolean, verticalKeyToResults: Record<string, VerticalResultsData>, dropdownItemProps: {
    onClick: (value: string, _index: number, itemData?: FocusedItemData) => void;
    ariaLabel: (value: string) => string;
}) => JSX.Element | null;
/**
 * The configuration options for Visual Autocomplete.
 *
 * @public
 */
export interface VisualAutocompleteConfig {
    /** The Search Headless instance used to perform visual autocomplete searches. */
    entityPreviewSearcher: SearchHeadless;
    /** Renders entity previews based on the autocomplete loading state and results. */
    renderEntityPreviews: RenderEntityPreviews;
    /** Specify which verticals to include for VisualAutocomplete. */
    includedVerticals: string[];
    /** Specify the number of entities to return per vertical. **/
    universalLimit?: UniversalLimit;
    /** The debouncing time, in milliseconds, for making API requests for entity previews. */
    entityPreviewsDebouncingTime?: number;
}
/**
 * The interface of a function which is called on a search.
 *
 * @public
 */
export declare type onSearchFunc = (searchEventData: {
    verticalKey?: string;
    query?: string;
}) => void;
/**
 * The props for the {@link SearchBar} component.
 *
 * @public
 */
export interface SearchBarProps {
    /** The search bar's placeholder text. */
    placeholder?: string;
    /** {@inheritDoc LocationBiasProps.geolocationOptions} */
    geolocationOptions?: PositionOptions;
    /** CSS classes for customizing the component styling. */
    customCssClasses?: SearchBarCssClasses;
    /** {@inheritDoc VisualAutocompleteConfig} */
    visualAutocompleteConfig?: VisualAutocompleteConfig;
    /** Shows vertical links if true, set to false on default. */
    showVerticalLinks?: boolean;
    /** A function which is called when a vertical link is selected. */
    onSelectVerticalLink?: (data: {
        verticalLink: VerticalLink;
        querySource: QuerySource;
    }) => void;
    /** A function which returns a display label for the given verticalKey. */
    verticalKeyToLabel?: (verticalKey: string) => string;
    /** Hides recent searches if true. */
    hideRecentSearches?: boolean;
    /** Limits the number of recent searches shown. */
    recentSearchesLimit?: number;
    /** A callback which is called when a search is ran. */
    onSearch?: onSearchFunc;
}
/**
 * Renders a SearchBar that is hooked up with an InputDropdown component.
 *
 * @public
 */
export declare function SearchBar({ placeholder, geolocationOptions, hideRecentSearches, visualAutocompleteConfig, showVerticalLinks, onSelectVerticalLink, verticalKeyToLabel, recentSearchesLimit, customCssClasses, onSearch }: SearchBarProps): JSX.Element;
/**
 * Calculates the number of navigable entity previews from a ReactNode containing DropdownItems.
 */
export declare function calculateEntityPreviewsCount(children: ReactNode): number;
//# sourceMappingURL=SearchBar.d.ts.map