"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpellCheck = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const classnames_1 = __importDefault(require("classnames"));
const react_1 = require("react");
const useComposedCssClasses_1 = require("../hooks/useComposedCssClasses");
const search_operations_1 = require("../utils/search-operations");
const builtInCssClasses = {
    spellCheckLoading: 'opacity-50',
    spellCheckContainer: 'text-lg pb-3',
    helpText: 'text-neutral',
    link: 'text-primary font-bold hover:underline focus:underline'
};
/**
 * Renders a suggested query if the Search API provides one.
 *
 * @public
 *
 * @param props - {@link SpellCheckProps}
 * @returns A react component for spell check, or null if none exists
 */
function SpellCheck({ customCssClasses, onClick }) {
    var _a, _b, _c;
    const verticalKey = (_a = (0, search_headless_react_1.useSearchState)(state => state.vertical.verticalKey)) !== null && _a !== void 0 ? _a : '';
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(builtInCssClasses, customCssClasses);
    const correctedQuery = (_b = (0, search_headless_react_1.useSearchState)(state => state.spellCheck.correctedQuery)) !== null && _b !== void 0 ? _b : '';
    const isLoading = (0, search_headless_react_1.useSearchState)(state => state.searchStatus.isLoading);
    const containerClassNames = (0, classnames_1.default)(cssClasses.spellCheckContainer, {
        [(_c = cssClasses.spellCheckLoading) !== null && _c !== void 0 ? _c : '']: isLoading
    });
    const searchActions = (0, search_headless_react_1.useSearchActions)();
    const handleClickSuggestion = (0, react_1.useCallback)(() => {
        searchActions.setQuery(correctedQuery);
        onClick
            ? onClick({ correctedQuery, verticalKey })
            : (0, search_operations_1.executeSearch)(searchActions);
    }, [searchActions, correctedQuery, onClick, verticalKey]);
    if (!correctedQuery) {
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: containerClassNames }, { children: [(0, jsx_runtime_1.jsx)("span", Object.assign({ className: cssClasses.helpText }, { children: "Did you mean " }), void 0), (0, jsx_runtime_1.jsx)("button", Object.assign({ className: cssClasses.link, onClick: handleClickSuggestion }, { children: correctedQuery }), void 0)] }), void 0));
}
exports.SpellCheck = SpellCheck;
//# sourceMappingURL=SpellCheck.js.map