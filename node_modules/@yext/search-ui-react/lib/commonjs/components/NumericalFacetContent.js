"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumericalFacetContent = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const FilterGroup_1 = require("./FilterGroup");
const Filters_1 = require("./Filters");
const DEFAULT_RANGE_INPUT_PREFIX = (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: "$" }, void 0);
/**
 * A component that displays the content of a numerical facet.
 *
 * @param props - props to render the component
 * @returns A React component for the content of a standard facet
 *
 * @internal
 */
function NumericalFacetContent(_a) {
    var { fieldId, label, transformOptions, customCssClasses, getFilterDisplayName, facet, showMoreLimit = 10, showOptionCounts = false, inputPrefix = DEFAULT_RANGE_INPUT_PREFIX } = _a, filterGroupProps = __rest(_a, ["fieldId", "label", "transformOptions", "customCssClasses", "getFilterDisplayName", "facet", "showMoreLimit", "showOptionCounts", "inputPrefix"]);
    const options = facet.options || [];
    const transformedOptions = transformOptions ? (transformOptions(options) || []) : options;
    return ((0, jsx_runtime_1.jsx)(FilterGroup_1.FilterGroup, Object.assign({ fieldId: fieldId, filterOptions: transformedOptions.map(o => {
            return showOptionCounts ? Object.assign(Object.assign({}, o), { resultsCount: o.count }) : o;
        }), title: label || facet.displayName, customCssClasses: customCssClasses, showMoreLimit: showMoreLimit, searchable: (facet === null || facet === void 0 ? void 0 : facet.options.length) > showMoreLimit }, filterGroupProps, { children: (0, jsx_runtime_1.jsx)(Filters_1.RangeInput, { getFilterDisplayName: getFilterDisplayName, inputPrefix: inputPrefix, customCssClasses: customCssClasses }, void 0) }), void 0));
}
exports.NumericalFacetContent = NumericalFacetContent;
//# sourceMappingURL=NumericalFacetContent.js.map