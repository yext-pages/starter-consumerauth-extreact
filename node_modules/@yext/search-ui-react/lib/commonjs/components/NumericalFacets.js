"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumericalFacets = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Filters_1 = require("./Filters");
const FilterGroup_1 = require("./FilterGroup");
const react_1 = require("react");
const filterutils_1 = require("../utils/filterutils");
const FilterDivider_1 = require("./FilterDivider");
const DEFAULT_RANGE_INPUT_PREFIX = (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: "$" }, void 0);
/**
 * A component that displays numerical facets applicable to the current vertical search.
 *
 * @param props - {@link NumericalFacetsProps}
 * @returns A React component for facets
 *
 * @deprecated Use {@link NumericalFacet} with {@link Facets} instead.
 * @public
 */
function NumericalFacets(_a) {
    var { searchOnChange, includedFieldIds = [], getFilterDisplayName, inputPrefix = DEFAULT_RANGE_INPUT_PREFIX, customCssClasses = {} } = _a, filterGroupProps = __rest(_a, ["searchOnChange", "includedFieldIds", "getFilterDisplayName", "inputPrefix", "customCssClasses"]);
    return ((0, jsx_runtime_1.jsx)(Filters_1.FacetsProvider, Object.assign({ searchOnChange: searchOnChange, className: customCssClasses.numericalFacetsContainer }, { children: facets => facets
            .filter(f => (0, filterutils_1.isNumericalFacet)(f)
            && (includedFieldIds.length === 0 || includedFieldIds.includes(f.fieldId)))
            .map((f, i) => {
            return ((0, jsx_runtime_1.jsxs)(react_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(FilterGroup_1.FilterGroup, Object.assign({ fieldId: f.fieldId, filterOptions: f.options, title: f.displayName, customCssClasses: customCssClasses }, filterGroupProps, { children: (0, jsx_runtime_1.jsx)(Filters_1.RangeInput, { getFilterDisplayName: getFilterDisplayName, inputPrefix: inputPrefix, customCssClasses: customCssClasses }, void 0) }), void 0), (i < facets.length - 1) && (0, jsx_runtime_1.jsx)(FilterDivider_1.FilterDivider, { className: customCssClasses.divider }, void 0)] }, f.fieldId));
        }) }), void 0));
}
exports.NumericalFacets = NumericalFacets;
//# sourceMappingURL=NumericalFacets.js.map