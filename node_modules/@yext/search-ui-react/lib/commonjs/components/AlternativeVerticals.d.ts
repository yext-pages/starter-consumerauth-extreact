/// <reference types="react" />
import { VerticalConfig } from '../models/verticalConfig';
/**
 * The CSS class interface used for {@link AlternativeVerticals}.
 *
 * @public
 */
export interface AlternativeVerticalsCssClasses {
    alternativeVerticalsContainer?: string;
    alternativeVerticalsLoading?: string;
    noResultsText?: string;
    categoriesText?: string;
    suggestion?: string;
    verticalIcon?: string;
}
/**
 * A map of vertical keys to labels.
 *
 * @public
 */
export interface VerticalLabelMap {
    /** Config mapped to a vertical. */
    [verticalKey: string]: Pick<VerticalConfig, 'label'>;
}
/**
 * Props for {@link AlternativeVerticals}.
 *
 * @public
 */
export interface AlternativeVerticalsProps {
    /** The label for the current vertical. */
    currentVerticalLabel: string;
    /** A map of verticalKeys to the display label for that vertical. */
    verticalConfigMap: VerticalLabelMap;
    /**
     * Whether or not all results should be displayed when there are none returned from the search.
     * Defaults to true.
     */
    displayAllOnNoResults?: boolean;
    /** CSS classes for customizing the component styling. */
    customCssClasses?: AlternativeVerticalsCssClasses;
}
/**
 * A component that displays the alternative verticals that have results if a search returns none
 * on the current vertical.
 *
 * @public
 *
 * @param props - {@link AlternativeVerticalsProps}
 * @returns A React element for the alternative verticals, or null if there are none with results
 */
export declare function AlternativeVerticals({ currentVerticalLabel, verticalConfigMap, displayAllOnNoResults, customCssClasses }: AlternativeVerticalsProps): JSX.Element | null;
//# sourceMappingURL=AlternativeVerticals.d.ts.map