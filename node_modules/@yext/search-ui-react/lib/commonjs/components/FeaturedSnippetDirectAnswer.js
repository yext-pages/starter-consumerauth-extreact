"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeaturedSnippetDirectAnswer = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const renderHighlightedValue_1 = require("./utils/renderHighlightedValue");
/**
 * Renders a featured snippet direct answer provided by the Search API.
 *
 * @internal
 */
function FeaturedSnippetDirectAnswer({ result, readMoreClickHandler, cssClasses = {} }) {
    const answer = result.fieldType === 'multi_line_text' && result.value;
    // TODO: SLAP-2340, update rich text snippets to convert the markdown
    if (result.fieldType === 'rich_text') {
        console.warn('Rendering markdown for rich text direct answer is currently not supported. Displaying the unrendered markdown string as is.');
    }
    const snippet = (0, renderHighlightedValue_1.renderHighlightedValue)(result.snippet, { highlighted: cssClasses.highlighted });
    const link = result.relatedResult.link || result.relatedResult.rawData.landingPageUrl;
    const name = result.relatedResult.name;
    const snippetLinkMessage = 'Read more about ';
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.answerContainer }, { children: [answer &&
                (0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.header }, { children: answer }), void 0), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.content }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.body }, { children: snippet }), void 0), link && name && (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: 'pt-4 text-neutral' }, { children: [snippetLinkMessage, (0, jsx_runtime_1.jsx)("a", Object.assign({ className: 'text-primary', href: link, onClick: readMoreClickHandler }, { children: name }), void 0)] }), void 0)] }), void 0)] }), void 0));
}
exports.FeaturedSnippetDirectAnswer = FeaturedSnippetDirectAnswer;
//# sourceMappingURL=FeaturedSnippetDirectAnswer.js.map