"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppliedFiltersDisplay = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const CloseIcon_1 = require("../icons/CloseIcon");
const useClearFiltersCallback_1 = require("../hooks/useClearFiltersCallback");
const search_headless_react_1 = require("@yext/search-headless-react");
const filterutils_1 = require("../utils/filterutils");
const search_operations_1 = require("../utils/search-operations");
/**
 * A component that renders applied filters based on the provided GroupedFilters.
 *
 * @param props - {@link AppliedFiltersDisplayProps}
 * @returns A React element for the applied filters
 */
function AppliedFiltersDisplay(props) {
    const { nlpFilterDisplayNames = [], removableFilters = [], cssClasses = {} } = props;
    const handleClickClearAllButton = (0, useClearFiltersCallback_1.useClearFiltersCallback)();
    const searchActions = (0, search_headless_react_1.useSearchActions)();
    if (removableFilters.length + nlpFilterDisplayNames.length === 0) {
        return null;
    }
    const dedupedNlpFilterDisplayNames = nlpFilterDisplayNames.filter(displayName => {
        return !removableFilters.some(f => f.displayName === displayName);
    });
    const dedupedRemovableFilters = getDedupedRemovableFilters(removableFilters);
    function handleRemoveDedupedFilter(dedupedFilter) {
        var _a;
        dedupedFilter.handleRemove();
        for (const f of (_a = dedupedFilter.duplicates) !== null && _a !== void 0 ? _a : []) {
            f.handleRemove();
        }
        searchActions.setOffset(0);
        (0, search_operations_1.executeSearch)(searchActions);
    }
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.appliedFiltersContainer, "aria-label": 'Applied filters to current search' }, { children: [dedupedNlpFilterDisplayNames.map((displayName, i) => renderNlpFilter(displayName, i, cssClasses)), dedupedRemovableFilters.map((f, i) => {
                return renderRemovableFilter(f.displayName, () => handleRemoveDedupedFilter(f), i, cssClasses);
            }), removableFilters.length > 0 &&
                (0, jsx_runtime_1.jsx)("button", Object.assign({ onClick: handleClickClearAllButton, className: cssClasses.clearAllButton }, { children: "Clear All" }), void 0)] }), void 0));
}
exports.AppliedFiltersDisplay = AppliedFiltersDisplay;
function getDedupedRemovableFilters(filters) {
    const dedupedFilters = [];
    for (const f of filters) {
        const preexistingDupe = dedupedFilters.find(d => (0, filterutils_1.isDuplicateFieldValueFilter)(d.filter, f.filter));
        if (!preexistingDupe) {
            dedupedFilters.push(f);
        }
        else {
            if (!preexistingDupe.duplicates) {
                preexistingDupe.duplicates = [f];
            }
            else {
                preexistingDupe.duplicates.push(f);
            }
        }
    }
    return dedupedFilters;
}
function renderRemovableFilter(displayName, handleRemove, index, cssClasses) {
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.removableFilter }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.filterLabel }, { children: displayName }), void 0), (0, jsx_runtime_1.jsx)("button", Object.assign({ className: 'w-2 h-2 text-neutral m-1.5', onClick: handleRemove, "aria-label": `Remove "${displayName}" filter` }, { children: (0, jsx_runtime_1.jsx)(CloseIcon_1.CloseIcon, {}, void 0) }), void 0)] }), `${displayName}-${index}`));
}
function renderNlpFilter(displayName, index, cssClasses) {
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.nlpFilter }, { children: (0, jsx_runtime_1.jsx)("span", Object.assign({ className: cssClasses.filterLabel }, { children: displayName }), void 0) }), `${displayName}-${index}`));
}
//# sourceMappingURL=AppliedFiltersDisplay.js.map