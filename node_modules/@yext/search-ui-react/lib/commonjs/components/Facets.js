"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFacetTypeFromFacet = exports.getFacetTypeFromReactElementType = exports.Facet = exports.HierarchicalFacet = exports.NumericalFacet = exports.StandardFacet = exports.Facets = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Filters_1 = require("./Filters");
const StandardFacetContent_1 = require("./StandardFacetContent");
const filterutils_1 = require("../utils/filterutils");
const FilterDivider_1 = require("./FilterDivider");
const react_1 = require("react");
const NumericalFacetContent_1 = require("./NumericalFacetContent");
const HierarchicalFacetContent_1 = require("./HierarchicalFacetContent");
/** @internal */
var FacetType;
(function (FacetType) {
    FacetType["STANDARD"] = "STANDARD";
    FacetType["NUMERICAL"] = "NUMERICAL";
    FacetType["HIERARCHICAL"] = "HIERARCHICAL";
})(FacetType || (FacetType = {}));
/**
 * A component that displays all facets applicable to the current vertical search.
 *
 * @remarks
 * This component is a quick way of getting facets on the page, and it will render standard facets,
 * numerical facets, and hierarchical facets. The {@link StandardFacet}, {@link NumericalFacet},
 * and {@link HierarchicalFacet} components can be used to override the default facet configuration.
 *
 * @param props - {@link FacetsProps}
 * @returns A React component for facets
 *
 * @public
 */
function Facets(props) {
    const { searchOnChange, onlyRenderChildren = false, children, hierarchicalFieldIds, excludedFieldIds = [], customCssClasses = {}, } = props;
    const fieldIdToCustomFacetProps = new Map();
    const fieldIds = [];
    if (children) {
        (Array.isArray(children) ? children : [children])
            .filter(child => { var _a; return (_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.fieldId; })
            .forEach(child => {
            fieldIdToCustomFacetProps.set(child.props.fieldId, child);
            fieldIds.push(child.props.fieldId);
        });
    }
    return ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(Filters_1.FacetsProvider, Object.assign({ searchOnChange: searchOnChange, className: customCssClasses.facetsContainer }, { children: facets => {
                if (!facets || !facets.length) {
                    return;
                }
                if (!onlyRenderChildren) {
                    facets.forEach(facet => {
                        if (!fieldIds.includes(facet.fieldId)) {
                            fieldIds.push(facet.fieldId);
                        }
                    });
                }
                const fieldIdToFacet = new Map();
                facets.forEach(facet => fieldIdToFacet.set(facet.fieldId, facet));
                return fieldIds
                    .filter(fieldId => !excludedFieldIds.includes(fieldId)
                    && fieldIdToFacet.get(fieldId).options.length > 0
                    && (!onlyRenderChildren || fieldIdToCustomFacetProps.has(fieldId)))
                    .map((fieldId, i) => {
                    const facet = fieldIdToFacet.get(fieldId);
                    return ((0, jsx_runtime_1.jsxs)(react_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Facet, { facet: facet, facetsCustomCssClasses: customCssClasses, fieldIdToCustomFacetProps: fieldIdToCustomFacetProps, hierarchicalFieldIds: hierarchicalFieldIds }, void 0), (i < facets.length - 1)
                                && (0, jsx_runtime_1.jsx)(FilterDivider_1.FilterDivider, { className: customCssClasses === null || customCssClasses === void 0 ? void 0 : customCssClasses.divider }, void 0)] }, facet.fieldId));
                });
            } }), void 0) }, void 0));
}
exports.Facets = Facets;
/**
 * A component that displays a single standard facet. Use this to override the default rendering.
 *
 * @param props - {@link StandardFacetProps}
 * @returns ReactElement
 * @public
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function StandardFacet(props) { return null; }
exports.StandardFacet = StandardFacet;
/**
 * A component that displays a single numerical facet. Use this to override the default rendering.
 *
 * @param props - {@link NumericalFacetProps}
 * @returns ReactElement
 * @public
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function NumericalFacet(props) { return null; }
exports.NumericalFacet = NumericalFacet;
/**
 * A component that displays a single hierarchical facet, in a tree level structure, applicable to
 * the current vertical search. Use this to override the default rendering.
 *
 * @param props - {@link HierarchicalFacetProps}
 * @returns ReactElement
 * @public
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function HierarchicalFacet(props) { return null; }
exports.HierarchicalFacet = HierarchicalFacet;
/**
 * A component that represents a single facet.
 *
 * @param facet - {@link DisplayableFacet}
 * @param facetsCustomCssClasses - {@link FacetsCssClasses}
 * @param fieldIdToCustomFacetProps - a map of fieldId to facet props
 * @param hierarchicalFieldIds - a list of hierarchical field ids
 * @returns {@link ReactElement}
 *
 * @internal
 */
function Facet({ facet, facetsCustomCssClasses, fieldIdToCustomFacetProps, hierarchicalFieldIds, }) {
    let facetType;
    let facetProps = {
        fieldId: facet.fieldId,
        label: facet.displayName,
    };
    if (fieldIdToCustomFacetProps.has(facet.fieldId)) {
        const customFacetElement = fieldIdToCustomFacetProps.get(facet.fieldId);
        facetProps = Object.assign(Object.assign({}, facetProps), customFacetElement.props);
        facetType = getFacetTypeFromReactElementType((typeof customFacetElement.type === 'function')
            ? customFacetElement.type.name : '');
    }
    else {
        facetType = getFacetTypeFromFacet(facet, hierarchicalFieldIds);
    }
    facetProps = Object.assign(Object.assign({}, facetProps), { customCssClasses: Object.assign(Object.assign({}, facetsCustomCssClasses), facetProps.customCssClasses) });
    switch (facetType) {
        case FacetType.NUMERICAL:
            return ((0, jsx_runtime_1.jsx)(NumericalFacetContent_1.NumericalFacetContent, Object.assign({ facet: facet }, facetProps), void 0));
        case FacetType.HIERARCHICAL:
            return ((0, jsx_runtime_1.jsx)(HierarchicalFacetContent_1.HierarchicalFacetContent, Object.assign({ facet: facet }, facetProps), void 0));
        case FacetType.STANDARD:
        // fall through
        default:
            return ((0, jsx_runtime_1.jsx)(StandardFacetContent_1.StandardFacetContent, Object.assign({ facet: facet }, facetProps), void 0));
    }
}
exports.Facet = Facet;
/**
 * Returns the type of the facet based on the props.
 * @param elementType - string
 * @returns {@link FacetType}
 *
 * @internal
 */
function getFacetTypeFromReactElementType(elementType) {
    switch (elementType) {
        case NumericalFacet.name.toString():
            return FacetType.NUMERICAL;
        case HierarchicalFacet.name.toString():
            return FacetType.HIERARCHICAL;
        case StandardFacet.name.toString():
        // fall through
        default:
            return FacetType.STANDARD;
    }
}
exports.getFacetTypeFromReactElementType = getFacetTypeFromReactElementType;
/**
 * Returns the type of the facet based on facet.
 * @param facet - {@link DisplayableFacet}
 * @param hierarchicalFieldIds - string
 * @returns {@link FacetType}
 *
 * @internal
 */
function getFacetTypeFromFacet(facet, hierarchicalFieldIds = []) {
    if (hierarchicalFieldIds.includes(facet.fieldId)) {
        return FacetType.HIERARCHICAL;
    }
    else if ((0, filterutils_1.isStringFacet)(facet)) {
        return FacetType.STANDARD;
    }
    else if ((0, filterutils_1.isNumericalFacet)(facet)) {
        return FacetType.NUMERICAL;
    }
    return FacetType.STANDARD;
}
exports.getFacetTypeFromFacet = getFacetTypeFromFacet;
//# sourceMappingURL=Facets.js.map