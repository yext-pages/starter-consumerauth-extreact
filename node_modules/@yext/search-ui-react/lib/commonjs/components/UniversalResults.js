"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniversalResults = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const StandardSection_1 = require("./sections/StandardSection");
const SectionHeader_1 = require("./sections/SectionHeader");
const useComposedCssClasses_1 = require("../hooks/useComposedCssClasses");
const classnames_1 = __importDefault(require("classnames"));
const builtInCssClasses = Object.assign({ universalResultsContainer: 'space-y-8', universalResultsLoading: 'opacity-50' }, SectionHeader_1.builtInCssClasses);
/**
 * Displays the results of a universal search with the results for each vertical separated
 * into sections.
 *
 * @public
 *
 * @param props - {@link UniversalResultsProps}
 * @returns A React element for the universal results, or null if there are none
 */
function UniversalResults({ verticalConfigMap, showAppliedFilters, customCssClasses }) {
    var _a;
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(builtInCssClasses, customCssClasses);
    const resultsFromAllVerticals = (0, search_headless_react_1.useSearchState)(state => { var _a; return (_a = state === null || state === void 0 ? void 0 : state.universal) === null || _a === void 0 ? void 0 : _a.verticals; }) || [];
    const isLoading = (0, search_headless_react_1.useSearchState)(state => state.searchStatus.isLoading);
    if (resultsFromAllVerticals.length === 0) {
        return null;
    }
    const resultsClassNames = (0, classnames_1.default)(cssClasses.universalResultsContainer, {
        [(_a = cssClasses.universalResultsLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: resultsClassNames }, { children: renderVerticalSections({ resultsFromAllVerticals, showAppliedFilters, verticalConfigMap, cssClasses }) }), void 0));
}
exports.UniversalResults = UniversalResults;
/**
 * Renders a list of {@link SectionComponent}s based on the given list of vertical results and
 * corresponding configs, including specifying which section template to use.
 */
function renderVerticalSections(props) {
    const { resultsFromAllVerticals, verticalConfigMap, cssClasses } = props;
    return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: resultsFromAllVerticals
            .filter(verticalResults => verticalResults.results)
            .map(verticalResults => {
            var _a;
            const verticalKey = verticalResults.verticalKey;
            const verticalConfig = verticalConfigMap[verticalKey] || {};
            const label = (_a = verticalConfig.label) !== null && _a !== void 0 ? _a : verticalKey;
            const results = verticalResults.results;
            const SectionComponent = verticalConfig.SectionComponent || StandardSection_1.StandardSection;
            const appliedQueryFilters = props.showAppliedFilters
                ? verticalResults.appliedQueryFilters
                : undefined;
            return ((0, jsx_runtime_1.jsx)(SectionComponent, { results: results, verticalKey: verticalKey, header: (0, jsx_runtime_1.jsx)(SectionHeader_1.SectionHeader, Object.assign({}, {
                    label,
                    appliedQueryFilters,
                    verticalKey,
                    viewAllButton: verticalConfig.viewAllButton,
                    getViewAllUrl: verticalConfig.getViewAllUrl,
                    cssClasses
                }), void 0), CardComponent: verticalConfig.CardComponent }, verticalKey));
        }) }, void 0);
}
//# sourceMappingURL=UniversalResults.js.map