"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThumbsFeedback = exports.builtInCssClasses = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const react_1 = require("react");
const ThumbIcon_1 = require("../icons/ThumbIcon");
const use_isomorphic_layout_effect_1 = __importDefault(require("use-isomorphic-layout-effect"));
const useComposedCssClasses_1 = require("../hooks/useComposedCssClasses");
exports.builtInCssClasses = {
    thumbsFeedbackContainer: 'flex justify-end mt-2 text-sm text-gray-500 font-medium',
    thumbsUpIcon: 'ml-3 w-5',
    thumbsDownIcon: 'w-5 ml-1 transform rotate-180'
};
/**
 * Renders a quality feedback widget composed of thumbs up and thumbs down buttons.
 *
 * @public
 *
 * @param props - The configuration for the the feedback component.
 * @returns A React element for quality feedback widget.
 */
function ThumbsFeedback(props) {
    const { onClick, feedbackText = 'Feedback', feedbackTextOnSubmission = 'Thank you for your feedback!', } = props;
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(exports.builtInCssClasses, props.customCssClasses);
    const query = (0, search_headless_react_1.useSearchState)(state => state.query.mostRecentSearch);
    const [isFeedbackProvided, setIsFeedbackProvided] = (0, react_1.useState)(false);
    const handleClickThumbsUp = (0, react_1.useCallback)(() => {
        onClick('THUMBS_UP');
        setIsFeedbackProvided(true);
    }, [onClick]);
    const handleClickThumbsDown = (0, react_1.useCallback)(() => {
        onClick('THUMBS_DOWN');
        setIsFeedbackProvided(true);
    }, [onClick]);
    // Changes to most recent search query will trigger re-render to reset quality feedback submission.
    (0, use_isomorphic_layout_effect_1.default)(() => {
        setIsFeedbackProvided(false);
    }, [query]);
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.thumbsFeedbackContainer }, { children: isFeedbackProvided
            ? feedbackTextOnSubmission
            : (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [feedbackText, (0, jsx_runtime_1.jsx)("button", Object.assign({ className: cssClasses.thumbsUpIcon, onClick: handleClickThumbsUp, "aria-label": 'This answered my question' }, { children: (0, jsx_runtime_1.jsx)(ThumbIcon_1.ThumbIcon, {}, void 0) }), void 0), (0, jsx_runtime_1.jsx)("button", Object.assign({ className: cssClasses.thumbsDownIcon, onClick: handleClickThumbsDown, "aria-label": 'This did not answer my question' }, { children: (0, jsx_runtime_1.jsx)(ThumbIcon_1.ThumbIcon, {}, void 0) }), void 0)] }, void 0) }), void 0));
}
exports.ThumbsFeedback = ThumbsFeedback;
//# sourceMappingURL=ThumbsFeedback.js.map