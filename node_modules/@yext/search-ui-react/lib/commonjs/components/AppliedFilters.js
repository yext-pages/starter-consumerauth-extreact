"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppliedFilters = exports.builtInCssClasses = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const useComposedCssClasses_1 = require("../hooks/useComposedCssClasses");
const classnames_1 = __importDefault(require("classnames"));
const AppliedFiltersDisplay_1 = require("./AppliedFiltersDisplay");
const HierarchicalFacetDisplay_1 = require("./Filters/HierarchicalFacetDisplay");
const useNlpFilterDisplayNames_1 = require("../hooks/useNlpFilterDisplayNames");
const useRemovableFilters_1 = require("../hooks/useRemovableFilters");
exports.builtInCssClasses = {
    // Use negative margin to remove space above the filters on mobile
    appliedFiltersContainer: 'flex flex-wrap -mt-3 md:mt-0 mb-2',
    appliedFiltersLoading: 'opacity-50',
    nlpFilter: 'border border-gray-200 rounded-3xl px-3 py-1.5 text-sm font-medium text-neutral-dark mr-2 mb-2',
    removableFilter: 'flex items-center border border-gray-200 rounded-3xl px-3 py-1.5 text-sm font-medium text-neutral-dark mr-2 mb-2',
    clearAllButton: 'text-sm font-medium text-primary hover:underline focus:underline mb-2'
};
const DEFAULT_HIDDEN_FIELDS = ['builtin.entityType'];
/**
 * A component that displays a list of filters applied to the current vertical
 * search, which may include any selected options from facets, NLP filters, and
 * field value static filters.
 *
 * @public
 *
 * @param props - {@link AppliedFiltersProps}
 * @returns A React element for the applied filters
 */
function AppliedFilters(props) {
    var _a;
    const isLoading = (0, search_headless_react_1.useSearchState)(state => state.searchStatus.isLoading);
    const { hiddenFields = DEFAULT_HIDDEN_FIELDS, customCssClasses = {}, hierarchicalFacetsDelimiter = HierarchicalFacetDisplay_1.DEFAULT_HIERARCHICAL_DELIMITER, hierarchicalFacetsFieldIds } = props;
    const removableFilters = (0, useRemovableFilters_1.useRemovableFilters)(hierarchicalFacetsFieldIds, hierarchicalFacetsDelimiter, hiddenFields);
    const nlpFilterDisplayNames = (0, useNlpFilterDisplayNames_1.useNlpFilterDisplayNames)(removableFilters.map(f => f.filter), hiddenFields);
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(exports.builtInCssClasses, customCssClasses);
    cssClasses.appliedFiltersContainer = (0, classnames_1.default)(cssClasses.appliedFiltersContainer, {
        [(_a = cssClasses.appliedFiltersLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    return ((0, jsx_runtime_1.jsx)(AppliedFiltersDisplay_1.AppliedFiltersDisplay, { removableFilters: removableFilters, nlpFilterDisplayNames: nlpFilterDisplayNames, cssClasses: cssClasses }, void 0));
}
exports.AppliedFilters = AppliedFilters;
//# sourceMappingURL=AppliedFilters.js.map