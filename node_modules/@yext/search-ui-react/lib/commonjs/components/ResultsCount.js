"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultsCount = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const classnames_1 = __importDefault(require("classnames"));
const processTranslation_1 = require("./utils/processTranslation");
const useComposedCssClasses_1 = require("../hooks/useComposedCssClasses");
const builtInCssClasses = {
    resultsCountContainer: 'font-semibold text-neutral mb-4 py-2 mr-2.5 whitespace-nowrap',
    resultsCountLoading: 'opacity-50'
};
/**
 * Renders results count of a universal/vertical search.
 *
 * @public
 *
 * @param props - {@link ResultsCountProps}
 */
function ResultsCount({ customCssClasses }) {
    var _a;
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(builtInCssClasses, customCssClasses);
    const isLoading = (0, search_headless_react_1.useSearchState)(state => state.searchStatus.isLoading);
    const resultsCountText = useResultsCount();
    const resultsCountClassnames = (0, classnames_1.default)(cssClasses.resultsCountContainer, {
        [(_a = cssClasses.resultsCountLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    return (0, jsx_runtime_1.jsx)("div", Object.assign({ className: resultsCountClassnames }, { children: resultsCountText }), void 0);
}
exports.ResultsCount = ResultsCount;
/**
 * Generates a string for the results count of the recent universal/vertical search.
 */
function useResultsCount() {
    var _a;
    const isVertical = (0, search_headless_react_1.useSearchState)(state => state.meta.searchType) === search_headless_react_1.SearchTypeEnum.Vertical;
    const results = (0, search_headless_react_1.useSearchState)(state => isVertical ? state.vertical : state.universal.verticals);
    const offset = (0, search_headless_react_1.useSearchState)(state => state.vertical.offset) || 0;
    const limit = (0, search_headless_react_1.useSearchState)(state => state.vertical.limit) || 20;
    let resultsCount = 0;
    if (results) {
        if (isUniversalSearchResults(results)) {
            results.forEach(resultsOfAVertical => resultsCount += resultsOfAVertical.resultsCount);
        }
        else {
            resultsCount = (_a = results.resultsCount) !== null && _a !== void 0 ? _a : 0;
        }
    }
    if (resultsCount === 0) {
        return null;
    }
    const resultsCountText = (0, processTranslation_1.processTranslation)({
        phrase: `${resultsCount} Result`,
        pluralForm: `${resultsCount} Results`,
        count: resultsCount
    });
    if (resultsCount > limit && isVertical) {
        const paginateStart = offset + 1;
        const paginateEnd = Math.min((offset + limit), resultsCount);
        const paginateRange = `${paginateStart} - ${paginateEnd}`;
        const resultCountWithPaginationText = `${paginateRange} of ${resultsCount} Results`;
        return resultCountWithPaginationText;
    }
    else {
        return resultsCountText;
    }
}
function isUniversalSearchResults(data) {
    return Array.isArray(data);
}
//# sourceMappingURL=ResultsCount.js.map