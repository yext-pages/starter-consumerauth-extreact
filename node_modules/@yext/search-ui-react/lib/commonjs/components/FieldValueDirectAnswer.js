"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldValueDirectAnswer = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const react_1 = require("react");
/**
 * Renders a field value direct answer provided by the Search API.
 *
 * @internal
 */
function FieldValueDirectAnswer({ result, viewDetailsClickHandler, UnknownFieldTypeDisplay, cssClasses = {} }) {
    var _a;
    const title = `${result.entityName} / ${result.fieldName}`;
    const link = (_a = result.relatedResult.link) !== null && _a !== void 0 ? _a : result.relatedResult.rawData.landingPageUrl;
    const resultContent = (0, react_1.useMemo)(() => {
        return getResultContent(result, UnknownFieldTypeDisplay);
    }, [result, UnknownFieldTypeDisplay]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.answerContainer }, { children: [title &&
                (0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.header }, { children: title }), void 0), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.content }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.body }, { children: resultContent }), void 0), link && (0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'mt-4' }, { children: (0, jsx_runtime_1.jsx)("a", Object.assign({ href: link, className: 'text-primary', onClick: viewDetailsClickHandler }, { children: "View Details" }), void 0) }), void 0)] }), void 0)] }), void 0));
}
exports.FieldValueDirectAnswer = FieldValueDirectAnswer;
function DefaultUnknownFieldTypeDisplay({ result }) {
    let val;
    if (typeof result.value !== 'string' && typeof result.value !== 'number') {
        console.warn(`Unknown field type for direct answer with "${result.fieldApiName}" fieldApiName. Rendering result's value as a string.`
            + '\nConsider using prop "UnknownFieldTypeDisplay" in DirectAnswer component to properly render result of unknown field type.');
        val = JSON.stringify(result.value);
    }
    else {
        val = result.value;
    }
    return getTextJsxElement(val);
}
function getResultContent(result, UnknownFieldTypeDisplay = DefaultUnknownFieldTypeDisplay) {
    switch (result.fieldType) {
        case search_headless_react_1.BuiltInFieldType.InstagramHandle:
            return getAnchorTagJsxElement(`https://www.instagram.com/${result.value}`, result.value);
        case search_headless_react_1.BuiltInFieldType.TwitterHandle:
            return getAnchorTagJsxElement(`https://twitter.com/${result.value}`, `@${result.value}`);
        case search_headless_react_1.BuiltInFieldType.FacebookURL:
        case search_headless_react_1.BuiltInFieldType.AndroidAppURL:
        case search_headless_react_1.BuiltInFieldType.IOSAppURL:
            return getAnchorTagJsxElement(result.value);
        case search_headless_react_1.BuiltInFieldType.ComplexURL:
            const url = result.value.url;
            const displayUrl = result.value.preferDisplayUrl ? result.value.displayUrl : url;
            return getAnchorTagJsxElement(url, displayUrl);
        case search_headless_react_1.BuiltInFieldType.URL:
            return Array.isArray(result.value)
                ? getListJsxElement(result.value, url => getAnchorTagJsxElement(url))
                : getAnchorTagJsxElement(result.value);
        case search_headless_react_1.BuiltInFieldType.Phone:
            return getAnchorTagJsxElement(`tel:${result.value}`, result.value);
        case search_headless_react_1.BuiltInFieldType.Email:
            return getListJsxElement(result.value, e => getAnchorTagJsxElement(`mailto:${e}`, e));
        case search_headless_react_1.BuiltInFieldType.Address:
            return getAddressJsxElement(result.value);
        case search_headless_react_1.BuiltInFieldType.RichText:
            //TODO: SLAP-2340
            console.warn('Rendering markdown for rich text direct answer is currently not supported. Displaying the unrendered markdown string(s) as is.');
            return Array.isArray(result.value)
                ? getListJsxElement(result.value, val => getTextJsxElement(val))
                : getTextJsxElement(result.value);
        case search_headless_react_1.BuiltInFieldType.Hours:
            return (0, jsx_runtime_1.jsx)("div", { children: JSON.stringify(result.value) }, void 0);
        case 'unknown':
            return (0, jsx_runtime_1.jsx)(UnknownFieldTypeDisplay, { result: result }, void 0);
        default:
            return Array.isArray(result.value)
                ? getListJsxElement(result.value, val => getTextJsxElement(val))
                : getTextJsxElement(result.value);
    }
}
function getListJsxElement(list, getItemJsxElement) {
    return ((0, jsx_runtime_1.jsx)("ul", Object.assign({ className: 'list-disc list-inside' }, { children: list.map((el, i) => (0, jsx_runtime_1.jsx)("li", { children: getItemJsxElement(el) }, i)) }), void 0));
}
function getTextJsxElement(text) {
    return (0, jsx_runtime_1.jsx)("p", Object.assign({ className: 'whitespace-pre-wrap' }, { children: text }), void 0);
}
function getAnchorTagJsxElement(href, displayText) {
    return (0, jsx_runtime_1.jsx)("a", Object.assign({ href: href, className: 'text-primary' }, { children: displayText !== null && displayText !== void 0 ? displayText : href }), void 0);
}
function getAddressJsxElement(address) {
    // user specified display Address in KM
    if (address.extraDescription) {
        return (0, jsx_runtime_1.jsx)("div", { children: address.extraDescription }, void 0);
    }
    const formattedCity = address.city ? address.city + ',' : '';
    const formattedCityRegionPostalCode = [formattedCity, address.region, address.postalCode].join(' ').trim();
    return (0, jsx_runtime_1.jsxs)("div", { children: [address.line1 && (0, jsx_runtime_1.jsx)("p", { children: address.line1 }, void 0), address.line2 && (0, jsx_runtime_1.jsx)("p", { children: address.line2 }, void 0), address.line3 && (0, jsx_runtime_1.jsx)("p", { children: address.line3 }, void 0), formattedCityRegionPostalCode && (0, jsx_runtime_1.jsx)("p", { children: formattedCityRegionPostalCode }, void 0), (0, jsx_runtime_1.jsx)("p", { children: address.countryCode }, void 0)] }, void 0);
}
//# sourceMappingURL=FieldValueDirectAnswer.js.map