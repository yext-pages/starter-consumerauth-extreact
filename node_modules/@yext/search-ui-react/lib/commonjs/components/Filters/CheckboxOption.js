"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckboxOption = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const react_1 = require("react");
const FiltersContext_1 = require("./FiltersContext");
const FilterGroupContext_1 = require("./FilterGroupContext");
const useComposedCssClasses_1 = require("../../hooks/useComposedCssClasses");
const filterutils_1 = require("../../utils/filterutils");
const classnames_1 = __importDefault(require("classnames"));
const auto_id_1 = require("@reach/auto-id");
const builtInCssClasses = {
    label: 'text-neutral text-sm font-normal cursor-pointer',
    label___disabled: 'opacity-50 cursor-not-allowed',
    input: 'w-3.5 h-3.5 form-checkbox cursor-pointer border border-gray-300 rounded-sm text-primary focus:ring-primary',
    input___disabled: 'border-gray-200 bg-gray-50 cursor-not-allowed',
    container: 'flex items-center',
    optionContainer: 'flex items-center space-x-3 peer',
    tooltipContainer: 'invisible peer-hover:visible relative -right-5 -top-5',
    tooltip: 'absolute z-10 left-0 -top-0.5 whitespace-nowrap rounded shadow-lg p-3 text-sm bg-neutral-dark text-white'
};
/**
 * A checkbox component that represents a single FieldValueFilter.
 *
 * @public
 *
 * @param props - {@link Filters.CheckboxOptionProps}
 */
function CheckboxOption(props) {
    var _a, _b;
    const { fieldId, isOptionsDisabled } = (0, FilterGroupContext_1.useFilterGroupContext)();
    const { value, matcher = search_headless_react_1.Matcher.Equals, selectedByDefault = false, displayName = props.value, resultsCount } = props;
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(builtInCssClasses, props.customCssClasses);
    const optionId = (0, auto_id_1.useId)();
    const { selectFilter, filters, applyFilters } = (0, FiltersContext_1.useFiltersContext)();
    const handleClick = (0, react_1.useCallback)((checked) => {
        selectFilter({
            matcher,
            fieldId,
            value,
            displayName: typeof displayName === 'string' ? displayName : undefined,
            selected: checked
        });
        applyFilters();
    }, [applyFilters, fieldId, displayName, selectFilter, value, matcher]);
    const handleChange = (0, react_1.useCallback)(evt => {
        handleClick(evt.target.checked);
    }, [handleClick]);
    const optionFilter = (0, react_1.useMemo)(() => {
        return {
            fieldId,
            matcher,
            value
        };
    }, [fieldId, value, matcher]);
    const existingStoredFilter = (0, filterutils_1.findSelectableFieldValueFilter)(optionFilter, filters);
    (0, react_1.useEffect)(() => {
        if (!existingStoredFilter && selectedByDefault) {
            selectFilter(Object.assign(Object.assign({}, optionFilter), { displayName: typeof displayName === 'string' ? displayName : undefined, selected: true }));
        }
    }, [displayName, selectFilter, selectedByDefault, existingStoredFilter, optionFilter]);
    const isSelected = existingStoredFilter ? existingStoredFilter.selected : false;
    const labelText = resultsCount ? `${displayName} (${resultsCount})` : displayName;
    const inputClasses = (0, classnames_1.default)(cssClasses.input, {
        [(_a = cssClasses.input___disabled) !== null && _a !== void 0 ? _a : '']: isOptionsDisabled
    });
    const labelClasses = (0, classnames_1.default)(cssClasses.label, {
        [(_b = cssClasses.label___disabled) !== null && _b !== void 0 ? _b : '']: isOptionsDisabled
    });
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.container }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.optionContainer }, { children: [(0, jsx_runtime_1.jsx)("input", { type: 'checkbox', id: optionId, checked: isSelected, className: inputClasses, onChange: handleChange, disabled: isOptionsDisabled }, void 0), (0, jsx_runtime_1.jsx)("label", Object.assign({ className: labelClasses, htmlFor: optionId }, { children: labelText }), void 0)] }), void 0), isOptionsDisabled &&
                (0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.tooltipContainer }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.tooltip }, { children: "Clear the range to select options." }), void 0) }), void 0)] }), void 0));
}
exports.CheckboxOption = CheckboxOption;
//# sourceMappingURL=CheckboxOption.js.map