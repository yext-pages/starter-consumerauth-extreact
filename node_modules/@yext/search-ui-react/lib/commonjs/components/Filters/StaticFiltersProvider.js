"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticFiltersProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const react_1 = require("react");
const filterutils_1 = require("../../utils/filterutils");
const search_operations_1 = require("../../utils/search-operations");
const FiltersContext_1 = require("./FiltersContext");
/**
 * The StaticFilters component is a wrapper component around {@link Filters} that updates static filter
 * options when a child filter is updated.
 *
 * The representation of the facets is configured using props.children,
 * and is intended for use with components like {@link Filters.CheckboxOption}.
 *
 * @param props - {@link Filters.StaticFiltersProviderProps}
 *
 * @public
 */
function StaticFiltersProvider({ children, className = 'w-full', searchOnChange = true }) {
    const searchActions = (0, search_headless_react_1.useSearchActions)();
    const displayableFilters = (0, search_headless_react_1.useSearchState)(state => state.filters.static);
    const filtersContextInstance = (0, react_1.useMemo)(() => {
        return {
            selectFilter(filter) {
                const { selected, displayName } = filter, fieldValueFilter = __rest(filter, ["selected", "displayName"]);
                searchActions.setFilterOption({
                    filter: Object.assign({ kind: 'fieldValue' }, fieldValueFilter),
                    selected,
                    displayName
                });
            },
            applyFilters() {
                if (searchOnChange) {
                    searchActions.setOffset(0);
                    searchActions.resetFacets();
                    (0, search_operations_1.executeSearch)(searchActions);
                }
            },
            filters: (0, filterutils_1.getSelectableFieldValueFilters)(displayableFilters !== null && displayableFilters !== void 0 ? displayableFilters : [])
        };
    }, [searchActions, displayableFilters, searchOnChange]);
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: className }, { children: (0, jsx_runtime_1.jsx)(FiltersContext_1.FiltersContext.Provider, Object.assign({ value: filtersContextInstance }, { children: children }), void 0) }), void 0));
}
exports.StaticFiltersProvider = StaticFiltersProvider;
//# sourceMappingURL=StaticFiltersProvider.js.map