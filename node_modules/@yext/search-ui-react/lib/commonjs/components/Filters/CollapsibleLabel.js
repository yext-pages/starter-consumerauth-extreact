"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollapsibleLabel = exports.builtInCssClasses = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = __importDefault(require("classnames"));
const ChevronIcon_1 = require("../../icons/ChevronIcon");
const FilterGroupContext_1 = require("./FilterGroupContext");
const useComposedCssClasses_1 = require("../../hooks/useComposedCssClasses");
exports.builtInCssClasses = {
    label: 'text-neutral-dark text-sm font-medium text-left',
};
/**
 * CollapsibleLabel is a button for collapsing and expanding filters within a parent
 * {@link Filters.FilterGroupProvider}.
 *
 * For more customization, use {@link Filters.FilterGroupContext} directly.
 *
 * @param props - {@link Filters.CollapsibleLabelProps}
 *
 * @public
 */
function CollapsibleLabel({ label, customCssClasses }) {
    const { isExpanded, getToggleProps } = (0, FilterGroupContext_1.useFilterGroupContext)();
    const iconClassName = (0, classnames_1.default)('w-3 text-gray-400', {
        'transform rotate-180': !isExpanded
    });
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(exports.builtInCssClasses, customCssClasses);
    return ((0, jsx_runtime_1.jsxs)("button", Object.assign({ className: 'w-full flex justify-between items-center mb-4' }, getToggleProps(), { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.label }, { children: label }), void 0), (0, jsx_runtime_1.jsx)(ChevronIcon_1.ChevronIcon, { className: iconClassName }, void 0)] }), void 0));
}
exports.CollapsibleLabel = CollapsibleLabel;
//# sourceMappingURL=CollapsibleLabel.js.map