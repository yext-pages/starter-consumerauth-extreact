"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerticalResultsDisplay = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const useComposedCssClasses_1 = require("../hooks/useComposedCssClasses");
const classnames_1 = __importDefault(require("classnames"));
const builtInCssClasses = {
    verticalResultsLoading: 'opacity-50'
};
/**
 * A Component that displays all the search results for a given vertical.
 *
 * @param props - The props for the Component, including the results and the card type
 *                to be used.
 */
function VerticalResultsDisplay(props) {
    var _a;
    const { CardComponent, results, isLoading = false, customCssClasses } = props;
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(builtInCssClasses, customCssClasses);
    if (results.length === 0) {
        return null;
    }
    const resultsClassNames = (0, classnames_1.default)(cssClasses.verticalResultsContainer, {
        [(_a = cssClasses.verticalResultsLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: resultsClassNames }, { children: results === null || results === void 0 ? void 0 : results.map(result => renderResult(CardComponent, result)) }), void 0));
}
exports.VerticalResultsDisplay = VerticalResultsDisplay;
/**
 * Renders a single result using the specified card and configuration.
 *
 * @param CardComponent - The card for the vertical.
 * @param result - The result to render.
 */
function renderResult(CardComponent, result) {
    return (0, jsx_runtime_1.jsx)(CardComponent, { result: result }, result.id || result.index);
}
//# sourceMappingURL=VerticalResultsDisplay.js.map