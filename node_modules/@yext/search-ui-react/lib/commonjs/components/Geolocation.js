"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Geolocation = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const useComposedCssClasses_1 = require("../hooks/useComposedCssClasses");
const LoadingIndicator_1 = __importDefault(require("../icons/LoadingIndicator"));
const YextIcon_1 = require("../icons/YextIcon");
const useGeolocationHandler_1 = require("../hooks/useGeolocationHandler");
const builtInCssClasses = {
    geolocationContainer: 'text-sm text-neutral text-center justify-center items-center flex flex-row',
    button: 'text-primary font-semibold hover:underline focus:underline',
    iconContainer: 'w-4 ml-2'
};
/**
 * A React Component which collects location information to create a
 * location filter and perform a new search.
 *
 * @public
 *
 * @param props - {@link GeolocationProps}
 * @returns A react component for geolocation
 */
function Geolocation({ geolocationOptions, radius = 50, label = 'Use my location', 
//TODO: replace default icon with SVG create from design team
GeolocationIcon = YextIcon_1.YextIcon, handleClick, customCssClasses, }) {
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(builtInCssClasses, customCssClasses);
    const [handleGeolocationClick, isFetchingUserLocation] = (0, useGeolocationHandler_1.useGeolocationHandler)({
        geolocationOptions,
        radius,
        handleUserPosition: handleClick
    });
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.geolocationContainer }, { children: [(0, jsx_runtime_1.jsx)("button", Object.assign({ className: cssClasses.button, onClick: handleGeolocationClick }, { children: label }), void 0), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.iconContainer }, { children: isFetchingUserLocation ? (0, jsx_runtime_1.jsx)(LoadingIndicator_1.default, {}, void 0) : (0, jsx_runtime_1.jsx)(GeolocationIcon, {}, void 0) }), void 0)] }), void 0));
}
exports.Geolocation = Geolocation;
//# sourceMappingURL=Geolocation.js.map