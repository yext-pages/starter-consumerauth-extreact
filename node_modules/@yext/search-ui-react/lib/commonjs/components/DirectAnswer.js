"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectAnswer = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const ThumbsFeedback_1 = require("./ThumbsFeedback");
const useComposedCssClasses_1 = require("../hooks/useComposedCssClasses");
const useCardAnalyticsCallback_1 = require("../hooks/useCardAnalyticsCallback");
const useCardFeedbackCallback_1 = require("../hooks/useCardFeedbackCallback");
const FieldValueDirectAnswer_1 = require("./FieldValueDirectAnswer");
const FeaturedSnippetDirectAnswer_1 = require("./FeaturedSnippetDirectAnswer");
const builtInCssClasses = {
    directAnswerContainer: '',
    directAnswerLoading: 'opacity-50',
    answer: 'font-bold text-xl text-neutral-dark',
    description: 'text-neutral',
    content: 'mt-4',
    highlighted: 'bg-primary-light',
    answerContainer: 'p-4 border border-gray-200 rounded-lg shadow-sm',
    thumbsFeedbackContainer: ThumbsFeedback_1.builtInCssClasses.thumbsFeedbackContainer,
    thumbsUpIcon: ThumbsFeedback_1.builtInCssClasses.thumbsUpIcon,
    thumbsDownIcon: ThumbsFeedback_1.builtInCssClasses.thumbsDownIcon
};
/**
 * Renders Direct Answers provided by the Search API.
 *
 * @public
 *
 * @param props - {@link DirectAnswerProps}
 * @returns A react element for DirectAnswer
 */
function DirectAnswer({ customCssClasses, UnknownFieldTypeDisplay }) {
    const directAnswerResult = (0, search_headless_react_1.useSearchState)(state => state.directAnswer.result);
    const isLoading = (0, search_headless_react_1.useSearchState)(state => state.searchStatus.isLoading || false);
    const composedCssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(builtInCssClasses, customCssClasses);
    const handleClickViewDetails = (0, useCardAnalyticsCallback_1.useCardAnalyticsCallback)(directAnswerResult, 'CTA_CLICK');
    const handleClickFeedbackButton = (0, useCardFeedbackCallback_1.useCardFeedbackCallback)(directAnswerResult);
    if (!directAnswerResult) {
        return null;
    }
    const cssClasses = getCssClassesForAnswerType(composedCssClasses, directAnswerResult.type);
    const containerCssClasses = (0, useComposedCssClasses_1.twMerge)(cssClasses.directAnswerContainer, isLoading && cssClasses.directAnswerLoading);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: containerCssClasses }, { children: [directAnswerResult.type === search_headless_react_1.DirectAnswerType.FieldValue
                ? (0, jsx_runtime_1.jsx)(FieldValueDirectAnswer_1.FieldValueDirectAnswer, { result: directAnswerResult, cssClasses: cssClasses, viewDetailsClickHandler: handleClickViewDetails, UnknownFieldTypeDisplay: UnknownFieldTypeDisplay }, void 0)
                : (0, jsx_runtime_1.jsx)(FeaturedSnippetDirectAnswer_1.FeaturedSnippetDirectAnswer, { result: directAnswerResult, readMoreClickHandler: handleClickViewDetails, cssClasses: cssClasses }, void 0), (0, jsx_runtime_1.jsx)(ThumbsFeedback_1.ThumbsFeedback, { onClick: handleClickFeedbackButton, customCssClasses: composedCssClasses }, void 0)] }), void 0));
}
exports.DirectAnswer = DirectAnswer;
function getCssClassesForAnswerType(cssClasses, type) {
    const isSnippet = type === search_headless_react_1.DirectAnswerType.FeaturedSnippet;
    return Object.assign(Object.assign({}, cssClasses), { header: isSnippet ? cssClasses.answer : cssClasses.description, body: isSnippet ? cssClasses.description : cssClasses.answer });
}
//# sourceMappingURL=DirectAnswer.js.map