"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapboxMap = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const mapbox_gl_1 = __importStar(require("mapbox-gl"));
const search_headless_react_1 = require("@yext/search-headless-react");
const useDebouncedFunction_1 = require("../hooks/useDebouncedFunction");
const react_dom_1 = __importDefault(require("react-dom"));
/**
 * A component that renders a map with markers to show result locations using Mapbox GL.
 *
 * @remarks
 * For the map to work properly, be sure to include Mapbox GL stylesheet in the application.
 *
 * @example
 * For instance, user may add the following import statement in their application's index file
 * or in the file where `MapboxMap` is used:
 * `import 'mapbox-gl/dist/mapbox-gl.css';`
 *
 * Or, user may add a stylesheet link in their html page:
 * `<link href="https://api.mapbox.com/mapbox-gl-js/v2.9.2/mapbox-gl.css" rel="stylesheet" />`
 *
 * @param props - {@link MapboxMapProps}
 * @returns A React element containing a Mapbox Map
 *
 * @public
 */
function MapboxMap({ mapboxAccessToken, mapboxOptions, PinComponent, getCoordinate = getDefaultCoordinate, onDrag }) {
    (0, react_1.useEffect)(() => {
        mapbox_gl_1.default.accessToken = mapboxAccessToken;
    }, [mapboxAccessToken]);
    const mapContainer = (0, react_1.useRef)(null);
    const map = (0, react_1.useRef)(null);
    const markers = (0, react_1.useRef)([]);
    const locationResults = (0, search_headless_react_1.useSearchState)(state => state.vertical.results);
    const onDragDebounced = (0, useDebouncedFunction_1.useDebouncedFunction)(onDrag, 100);
    (0, react_1.useEffect)(() => {
        if (mapContainer.current && !map.current) {
            const options = Object.assign({ container: mapContainer.current, style: 'mapbox://styles/mapbox/streets-v11', center: [-74.005371, 40.741611], zoom: 9 }, mapboxOptions);
            map.current = new mapbox_gl_1.Map(options);
            const mapbox = map.current;
            mapbox.resize();
            if (onDragDebounced) {
                mapbox.on('drag', () => {
                    onDragDebounced(mapbox.getCenter(), mapbox.getBounds());
                });
            }
        }
    }, [mapboxOptions, onDragDebounced]);
    (0, react_1.useEffect)(() => {
        markers.current.forEach(marker => marker.remove());
        markers.current = [];
        const mapbox = map.current;
        if (mapbox && (locationResults === null || locationResults === void 0 ? void 0 : locationResults.length) > 0) {
            const bounds = new mapbox_gl_1.LngLatBounds();
            locationResults.forEach((result, i) => {
                const markerLocation = getCoordinate(result);
                if (markerLocation) {
                    const { latitude, longitude } = markerLocation;
                    const el = document.createElement('div');
                    const markerOptions = {};
                    if (PinComponent) {
                        react_dom_1.default.render((0, jsx_runtime_1.jsx)(PinComponent, { index: i, mapbox: mapbox, result: result }, void 0), el);
                        markerOptions.element = el;
                    }
                    const marker = new mapbox_gl_1.Marker(markerOptions)
                        .setLngLat({ lat: latitude, lng: longitude })
                        .addTo(mapbox);
                    markers.current.push(marker);
                    bounds.extend([longitude, latitude]);
                }
            });
            if (!bounds.isEmpty()) {
                mapbox.fitBounds(bounds, {
                    padding: { top: 50, bottom: 50, left: 50, right: 50 },
                    maxZoom: 15
                });
            }
        }
    }, [PinComponent, getCoordinate, locationResults]);
    return ((0, jsx_runtime_1.jsx)("div", { ref: mapContainer, className: 'h-full w-full' }, void 0));
}
exports.MapboxMap = MapboxMap;
function isCoordinate(data) {
    return typeof data == 'object'
        && typeof (data === null || data === void 0 ? void 0 : data['latitude']) === 'number'
        && typeof (data === null || data === void 0 ? void 0 : data['longitude']) === 'number';
}
function getDefaultCoordinate(result) {
    const yextDisplayCoordinate = result.rawData['yextDisplayCoordinate'];
    if (!yextDisplayCoordinate) {
        console.error('Unable to use the default "yextDisplayCoordinate" field as the result\'s coordinate to display on map.'
            + '\nConsider providing the "getCoordinate" prop to MapboxMap component to fetch the desire coordinate from result.');
        return undefined;
    }
    if (!isCoordinate(yextDisplayCoordinate)) {
        console.error('The default `yextDisplayCoordinate` field from result is not of type "Coordinate".');
        return undefined;
    }
    return yextDisplayCoordinate;
}
//# sourceMappingURL=MapboxMap.js.map