import { FeedbackType, ThumbsFeedbackCssClasses } from '../../ThumbsFeedback';
import { CtaData } from '../../../models/StandardCardData';
import { HighlightedValue } from '@yext/search-headless-react';
import { MouseEventHandler } from 'react';
import PropTypes from 'prop-types';
/**
 * The CSS class interface used for the StandardCardDisplay.
 *
 * @public
 */
interface StandardCardCssClasses extends ThumbsFeedbackCssClasses {
    container?: string;
    header?: string;
    body?: string;
    cta1?: string;
    cta2?: string;
    title?: string;
}
/**
 * Click handlers for the various buttons and links that can appear in the StandardCardDisplay.
 */
interface ClickHandlers {
    handleTitleClick: MouseEventHandler<HTMLAnchorElement>;
    handleCtaClick: MouseEventHandler<HTMLButtonElement>;
    handleFeedbackClick: (feedback: FeedbackType) => void;
}
/**
 * Props for displaying the basic, Standard card.
 */
interface StandardCardDisplayProps {
    title: string | HighlightedValue;
    link?: string;
    description?: string;
    showFeedbackButtons?: boolean;
    cta1?: CtaData;
    cta2?: CtaData;
    clickHandlers: ClickHandlers;
    customCssClasses?: StandardCardCssClasses;
}
/**
 * The display portion of the {@link StandardCard}.
 *
 * @param props - Contains a title, an optional description, and up to two CTAs. Click handlers for
 *                the various buttons and links are also supplied. The props can also include custom
 *                styling.
 * @returns - The rendered Result card.
 */
declare function StandardCardDisplay(props: StandardCardDisplayProps): JSX.Element;
declare namespace StandardCardDisplay {
    var propTypes: {
        title: PropTypes.Validator<string | PropTypes.InferProps<{
            value: PropTypes.Validator<string>;
            matchedSubstrings: PropTypes.Validator<(PropTypes.InferProps<{
                length: PropTypes.Validator<number>;
                offset: PropTypes.Validator<number>;
            }> | null | undefined)[]>;
        }>>;
        link: PropTypes.Requireable<string>;
        description: PropTypes.Requireable<string>;
        cta1: PropTypes.Requireable<PropTypes.InferProps<{
            label: PropTypes.Validator<string>;
            link: PropTypes.Validator<string>;
            linkType: PropTypes.Validator<string>;
        }>>;
        cta2: PropTypes.Requireable<PropTypes.InferProps<{
            label: PropTypes.Validator<string>;
            link: PropTypes.Validator<string>;
            linkType: PropTypes.Validator<string>;
        }>>;
    };
}
export { StandardCardDisplay, StandardCardCssClasses };
//# sourceMappingURL=StandardCardDisplay.d.ts.map