"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardCardDisplay = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const useComposedCssClasses_1 = require("../../../hooks/useComposedCssClasses");
const ThumbsFeedback_1 = require("../../ThumbsFeedback");
const renderHighlightedValue_1 = require("../../utils/renderHighlightedValue");
const prop_types_1 = __importDefault(require("prop-types"));
/**
 * Default Tailwind styles for the StandardCardDisplay.
 */
const builtInCssClasses = {
    container: 'flex flex-col justify-between border border-gray-200 rounded-lg mb-4 p-4 shadow-sm',
    header: 'flex text-neutral-dark',
    body: 'flex justify-end pt-2.5 text-base',
    cta1: 'whitespace-nowrap bg-primary text-white font-medium rounded-lg py-2 px-5 shadow',
    cta2: 'whitespace-nowrap bg-white text-primary font-medium rounded-lg py-2 px-5 mt-2 shadow',
    title: 'text-lg font-medium',
    thumbsFeedbackContainer: 'flex justify-end mt-4 text-sm text-gray-500 font-medium',
    thumbsUpIcon: ThumbsFeedback_1.builtInCssClasses.thumbsUpIcon,
    thumbsDownIcon: ThumbsFeedback_1.builtInCssClasses.thumbsDownIcon
};
/**
 * The display portion of the {@link StandardCard}.
 *
 * @param props - Contains a title, an optional description, and up to two CTAs. Click handlers for
 *                the various buttons and links are also supplied. The props can also include custom
 *                styling.
 * @returns - The rendered Result card.
 */
function StandardCardDisplay(props) {
    var _a;
    const { title, link, description, customCssClasses, clickHandlers, showFeedbackButtons, cta1, cta2 } = props;
    const cssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(builtInCssClasses, customCssClasses);
    function renderTitle(title, link) {
        const titleJsx = (0, renderHighlightedValue_1.renderHighlightedValue)(title, { highlighted: 'font-bold', nonHighlighted: 'font-medium' });
        return (link
            ? (0, jsx_runtime_1.jsx)("a", Object.assign({ href: link, className: 'text-lg font-medium text-primary hover:underline focus:underline', onClick: clickHandlers.handleTitleClick }, { children: titleJsx }), void 0)
            : (0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.title }, { children: titleJsx }), void 0));
    }
    function renderCTAs(cta1, cta2) {
        if (cta1 || cta2) {
            return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: 'flex flex-col justify-end ml-4' }, { children: [cta1 &&
                        (0, jsx_runtime_1.jsx)("button", Object.assign({ className: cssClasses.cta1, onClick: clickHandlers.handleCtaClick }, { children: cta1.label }), void 0), cta2 &&
                        (0, jsx_runtime_1.jsx)("button", Object.assign({ className: cssClasses.cta2, onClick: clickHandlers.handleCtaClick }, { children: cta2.label }), void 0)] }), void 0));
        }
        return null;
    }
    function renderDescription(text) {
        if (text) {
            return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'w-full' }, { children: (0, renderHighlightedValue_1.renderHighlightedValue)(text, { highlighted: 'font-semibold', nonHighlighted: 'font-normal' }) }), void 0));
        }
        return null;
    }
    function renderFeedbackIcons() {
        if (showFeedbackButtons) {
            return ((0, jsx_runtime_1.jsx)(ThumbsFeedback_1.ThumbsFeedback, { feedbackText: '', onClick: clickHandlers.handleFeedbackClick, customCssClasses: cssClasses }, void 0));
        }
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.container }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.header }, { children: renderTitle(title, link) }), void 0), ((_a = description !== null && description !== void 0 ? description : cta1) !== null && _a !== void 0 ? _a : cta2) &&
                (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.body }, { children: [renderDescription(description), renderCTAs(cta1, cta2)] }), void 0), renderFeedbackIcons()] }), void 0));
}
exports.StandardCardDisplay = StandardCardDisplay;
/**
 * The PropTypes for the StandardCardDisplay component. Note that props known at compile-time
 * are not included here. Type-checking of these props is taken care of by TypeScript.
 */
StandardCardDisplay.propTypes = {
    title: prop_types_1.default.oneOfType([
        prop_types_1.default.string,
        prop_types_1.default.shape({
            value: prop_types_1.default.string.isRequired,
            matchedSubstrings: prop_types_1.default.arrayOf(prop_types_1.default.shape({
                length: prop_types_1.default.number.isRequired,
                offset: prop_types_1.default.number.isRequired
            })).isRequired
        })
    ]).isRequired,
    link: prop_types_1.default.string,
    description: prop_types_1.default.string,
    cta1: prop_types_1.default.shape({
        label: prop_types_1.default.string.isRequired,
        link: prop_types_1.default.string.isRequired,
        linkType: prop_types_1.default.string.isRequired
    }),
    cta2: prop_types_1.default.shape({
        label: prop_types_1.default.string.isRequired,
        link: prop_types_1.default.string.isRequired,
        linkType: prop_types_1.default.string.isRequired
    })
};
//# sourceMappingURL=StandardCardDisplay.js.map