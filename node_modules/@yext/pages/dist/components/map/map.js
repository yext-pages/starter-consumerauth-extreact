import React, {
  createContext,
  useContext,
  useEffect,
  useRef,
  useState
} from "react";
import classnames from "classnames";
import {
  GoogleMaps,
  MapOptions
} from "@yext/components-tsx-maps";
import { Coordinate } from "@yext/components-tsx-geo";
const MapContext = createContext(null);
function useMapContext() {
  const ctx = useContext(MapContext);
  if (!ctx || ctx.map === void 0) {
    throw new Error("Attempted to call useMapContext() outside of <Map>.");
  }
  return ctx.map;
}
const Map = ({
  apiKey,
  bounds,
  children,
  className,
  clientKey,
  controls,
  defaultCenter,
  defaultZoom,
  mapRef,
  padding,
  panStartHandler,
  panHandler,
  provider,
  providerOptions,
  singleZoom
}) => {
  const wrapper = useRef(null);
  const [center, setCenter] = useState(defaultCenter);
  const [loaded, setLoaded] = useState(false);
  const [map, setMap] = useState();
  const [zoom, setZoom] = useState(defaultZoom);
  const _panHandler = (previous, current) => {
    panHandler(previous, current);
    setCenter(current.getCenter());
  };
  useEffect(() => {
    if (!loaded || !map) {
      return;
    }
    setZoom(map.getZoom());
  }, [center]);
  useEffect(() => {
    if (!bounds || !loaded || !map) {
      return;
    }
    const coordinates = bounds.map((bound) => new Coordinate(bound));
    map.fitCoordinates(coordinates);
  }, [JSON.stringify(bounds), map]);
  useEffect(() => {
    if (!loaded || map) {
      return;
    }
    const mapOptions = new MapOptions().withControlEnabled(controls).withDefaultCenter(center).withDefaultZoom(zoom).withPadding(padding).withPanHandler(_panHandler).withPanStartHandler(panStartHandler).withProvider(provider).withProviderOptions(providerOptions).withSinglePinZoom(singleZoom).withWrapper(wrapper.current).build();
    setMap(mapOptions);
    if (mapRef) {
      mapRef.current = mapOptions;
    }
  }, [loaded]);
  useEffect(() => {
    if (loaded || map || !wrapper.current) {
      return;
    }
    const useClientKey = provider.getProviderName() === "Google" && clientKey;
    provider.load(apiKey, useClientKey ? { client: clientKey } : {}).then(() => setLoaded(true));
  }, []);
  return /* @__PURE__ */ React.createElement("div", {
    className: classnames(
      {
        "is-loaded": loaded
      },
      className
    ),
    id: "map",
    ref: wrapper,
    "data-testid": "map"
  }, map && /* @__PURE__ */ React.createElement(MapContext.Provider, {
    value: { map, provider }
  }, children));
};
Map.defaultProps = {
  controls: true,
  defaultCenter: { latitude: 39.83, longitude: -98.58 },
  defaultZoom: 4,
  padding: { bottom: 50, left: 50, right: 50, top: 50 },
  panHandler: () => null,
  panStartHandler: () => null,
  provider: GoogleMaps,
  singleZoom: 14
};
export {
  Map,
  MapContext,
  useMapContext
};
