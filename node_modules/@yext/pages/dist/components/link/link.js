import React, { useState } from "react";
import classNames from "classnames";
import { useAnalytics } from "../analytics/index.js";
import { getHref, isEmail, isHREFProps, reverse } from "./methods.js";
const Link = React.forwardRef(
  function Link2(props, ref) {
    const link = isHREFProps(props) ? { link: props.href } : props.cta;
    const { children, onClick, className, eventName, cta, ...rest } = props;
    const trackEvent = eventName ? eventName : cta ? "cta" : "link";
    const analytics = useAnalytics();
    const obfuscate = props.obfuscate || props.obfuscate !== false && isEmail(link.link);
    const [humanInteraction, setHumanInteraction] = useState(false);
    const handleClick = async (e) => {
      setHumanInteraction(true);
      if (analytics !== null) {
        try {
          await analytics.trackClick(trackEvent, props.conversionDetails)(e);
        } catch (exception) {
          console.error("Failed to report click Analytics Event");
        }
      }
      if (onClick) {
        onClick(e);
      }
    };
    const useLinkAsLabel = !children && !link.label;
    const isObfuscate = !humanInteraction && obfuscate;
    const obfuscatedStyle = {
      ...props.style,
      unicodeBidi: "bidi-override",
      direction: useLinkAsLabel && isObfuscate ? "rtl" : "ltr"
    };
    const renderedLink = isObfuscate ? reverse(link.link) : link.link;
    return /* @__PURE__ */ React.createElement("a", {
      className: classNames("Link", className),
      href: humanInteraction || !obfuscate ? getHref(link) : "obfuscate",
      onClick: handleClick,
      rel: props.target && !props.rel ? "noopener" : void 0,
      ref,
      style: obfuscatedStyle,
      ...rest
    }, children || link.label || renderedLink);
  }
);
export {
  Link
};
