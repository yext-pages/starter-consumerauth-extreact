import * as React from "react";
import { useRef } from "react";
import { getRuntime } from "../../util/index.js";
import { Analytics } from "./Analytics.js";
import { AnalyticsContext } from "./context.js";
function AnalyticsProvider(props) {
  const {
    children,
    requireOptIn,
    enableTrackingCookie,
    enableDebugging,
    templateData,
    pageDomain
  } = props;
  const analyticsRef = useRef(null);
  if (analyticsRef.current === null) {
    analyticsRef.current = new Analytics(
      templateData,
      requireOptIn,
      pageDomain
    );
  }
  const analytics = analyticsRef.current;
  if (enableTrackingCookie) {
    analytics.enableTrackingCookie();
  }
  let enableDebuggingDefault = debuggingParamDetected();
  if (getRuntime().name === "node") {
    enableDebuggingDefault = enableDebuggingDefault || process.env?.NODE_ENV === "development";
  }
  analytics.setDebugEnabled(enableDebugging ?? enableDebuggingDefault);
  return /* @__PURE__ */ React.createElement(AnalyticsContext.Provider, {
    value: analytics
  }, children);
}
function debuggingParamDetected() {
  if (getRuntime().name !== "browser") {
    return false;
  }
  if (typeof window === void 0) {
    return false;
  }
  const currentUrl = new URL(window.location.href);
  return !!currentUrl.searchParams.get("xYextDebug");
}
export {
  AnalyticsProvider
};
