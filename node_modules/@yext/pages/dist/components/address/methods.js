import {
  ListingPublisherOption,
  MapProviderOption
} from "./types.js";
const getUnabbreviated = (field, address) => {
  const abbrFields = {
    region: "localizedRegionName",
    countryCode: "localizedCountryName"
  };
  const unabbreviatedField = abbrFields[field];
  return unabbreviatedField && address[unabbreviatedField];
};
const getDirections = (address, listings = [], googlePlaceId, config = {
  route: false
}) => {
  const NO_QUERY_WARNING = "Failed to construct query for maps service.";
  let query = address && encodeArray([
    address.line1,
    address.line2,
    address.city,
    address.region,
    address.postalCode,
    address.countryCode
  ]);
  switch (config.provider) {
    case MapProviderOption.APPLE: {
      if (!query) {
        console.warn(
          `${NO_QUERY_WARNING} Check that you've provided a valid Yext Address.`
        );
        break;
      }
      return getDirectionsApple(query, config.route);
    }
    case MapProviderOption.BING: {
      query = address && encodeArray([
        address.line1,
        address.city,
        address.region,
        address.postalCode
      ]);
      if (!query) {
        console.warn(
          `${NO_QUERY_WARNING} Check that you've provided a valid Yext Address.`
        );
        break;
      }
      return getDirectionsBing(query, config.route);
    }
    default: {
      const gmbListing = listings.find(
        (listing) => listing && listing.publisher && listing.publisher.toUpperCase() === ListingPublisherOption.GOOGLEMYBUSINESS
      );
      if (gmbListing && gmbListing.listingUrl) {
        return gmbListing.listingUrl;
      }
      if (googlePlaceId) {
        return getDirectionsGooglePlaceID(googlePlaceId, query, config.route);
      }
      if (!query) {
        console.warn(
          `${NO_QUERY_WARNING} Check that you've provided a valid Yext Address, Yext ListingType, or Google Place ID.`
        );
        break;
      }
      return getDirectionsGoogle(query, config.route);
    }
  }
};
const getDirectionsApple = (query, route) => {
  return route ? `https://maps.apple.com/?daddr=${query}` : `https://maps.apple.com/?address=${query}`;
};
const getDirectionsBing = (query, route) => {
  return route ? `https://bing.com/maps/default.aspx?rtp=adr.${query}` : `https://bing.com/maps/default.aspx?where1=${query}`;
};
const getDirectionsGooglePlaceID = (placeId, query, route) => {
  const queryParam = query ? `&query=${query}` : ``;
  if (route) {
    return `https://maps.google.com/maps/dir/?api=1${queryParam}&destination_place_id=${placeId}&destination=direct`;
  }
  if (queryParam) {
    `https://maps.google.com/maps/search/?api=1${queryParam}&query_place_id=${placeId}`;
  }
  return `https://maps.google.com/maps/dir/?api=1&destination_place_id=${placeId}&destination=direct`;
};
const getDirectionsGoogle = (query, route) => {
  return route ? `https://maps.google.com/maps/dir/?api=1&destination=${query}` : `https://maps.google.com/maps/search/?api=1&query=${query}`;
};
const encodeArray = (substrings = []) => {
  if (!substrings.length)
    return "";
  const str = substrings.filter(Boolean).join(", ");
  return encodeURI(str);
};
export {
  getDirections,
  getUnabbreviated
};
