import { spawn } from "child_process";
import {
  CLI_BOILERPLATE_BETA_MESSAGE,
  STREAM_DATA_CHUNK_BEGIN,
  STREAM_DATA_CHUNK_BEGIN_MULTIPLE,
  UPGRADE_MESSAGE_LINE_BEGIN,
  UPGRADE_INSTRUCTIONS_LINE_BEGIN
} from "./constants.js";
import path from "path";
import fs from "fs";
import { getFeaturesConfig } from "../../../generate/features/createFeaturesJson.js";
import { getTemplateFilepathsFromProjectStructure } from "../../../common/src/template/internal/getTemplateFilepaths.js";
import {
  convertTemplateModuleToTemplateModuleInternal
} from "../../../common/src/template/internal/types.js";
import { loadTemplateModule } from "./loadTemplateModule.js";
const generateTestData = async (hostname) => {
  const command = "yext";
  let args = ["pages", "generate-test-data"];
  if (hostname) {
    args = args.concat("--hostname", hostname);
  }
  async function generate() {
    const childProcess = spawn(command, args);
    const exitCode = await new Promise((resolve) => {
      childProcess.on("close", resolve);
    });
    return !!exitCode;
  }
  return generate();
};
const generateTestDataForSlug = async (stdout, vite, slug, locale, projectStructure) => {
  const templateFilepaths = getTemplateFilepathsFromProjectStructure(projectStructure);
  const templateModuleCollection = await loadTemplateModuleCollectionUsingVite(
    vite,
    templateFilepaths
  );
  const featuresConfig = await getFeaturesConfig(templateModuleCollection);
  const featuresConfigForEntityPages = {
    features: featuresConfig.features.filter((f) => "entityPageSet" in f),
    streams: featuresConfig.streams
  };
  const args = getCommonArgs(featuresConfigForEntityPages, projectStructure);
  args.push("--slug", slug);
  const parsedData = await spawnTestDataCommand(stdout, "yext", args);
  return getDocumentByLocale(parsedData, locale);
};
const loadTemplateModuleCollectionUsingVite = async (vite, templateFilepaths) => {
  const templateModules = await Promise.all(
    templateFilepaths.map(async (templateFilepath) => {
      const templateModule = await loadTemplateModule(vite, templateFilepath);
      return convertTemplateModuleToTemplateModuleInternal(
        templateFilepath,
        templateModule,
        false
      );
    })
  );
  return templateModules.reduce((prev, module) => {
    return prev.set(module.config.name, module);
  }, /* @__PURE__ */ new Map());
};
const generateTestDataForPage = async (stdout, featuresConfig, entityId, locale, projectStructure) => {
  const featureName = featuresConfig.features[0]?.name;
  const args = getCommonArgs(featuresConfig, projectStructure);
  if (entityId) {
    args.push("--entityIds", entityId);
  }
  const isAlternateLanguageFields = !!featuresConfig.features[0]?.alternateLanguageFields;
  if (!isAlternateLanguageFields) {
    args.push("--locale", locale);
  }
  args.push("--featureName", `"${featureName}"`);
  const parsedData = await spawnTestDataCommand(stdout, "yext", args);
  return getDocumentByLocale(parsedData, locale);
};
async function spawnTestDataCommand(stdout, command, args) {
  return new Promise((resolve) => {
    const childProcess = spawn(command, args, {
      stdio: ["inherit", "pipe", "inherit"],
      shell: true
    });
    let testData = "";
    let foundTestData = false;
    childProcess.stdout.on("data", (chunkBuff) => {
      const chunk = chunkBuff.toString("utf-8");
      if (foundTestData) {
        testData += chunk;
        return;
      }
      let lines = chunk.split("\n").filter((l) => !l.startsWith(CLI_BOILERPLATE_BETA_MESSAGE));
      const dataStartIndex = Math.max(
        lines.indexOf(STREAM_DATA_CHUNK_BEGIN),
        lines.indexOf(STREAM_DATA_CHUNK_BEGIN_MULTIPLE)
      );
      if (dataStartIndex !== -1) {
        foundTestData = true;
        testData = lines.slice(dataStartIndex).join("\n");
        lines = lines.slice(0, dataStartIndex);
      }
      const upgradeLines = lines.filter(
        (boilerplateLine) => boilerplateLine.startsWith(UPGRADE_MESSAGE_LINE_BEGIN) || boilerplateLine.startsWith(UPGRADE_INSTRUCTIONS_LINE_BEGIN)
      ).join("\n");
      if (upgradeLines) {
        stdout.write(upgradeLines);
      } else {
        const out = lines.join("\n").trim();
        out && stdout.write(out + "\n");
      }
    });
    childProcess.on("close", () => {
      let parsedData;
      if (testData) {
        try {
          parsedData = JSON.parse(testData.trim());
        } catch (e) {
          stdout.write(
            `
Unable to parse test data from command: \`${command} ${args.join(
              " "
            )}\``
          );
          resolve(null);
        }
      } else {
        stdout.write(
          `
Unable to generate test data from command: \`${command} ${args.join(
            " "
          )}\``
        );
      }
      resolve(parsedData);
    });
  });
}
const getCommonArgs = (featuresConfig, projectStructure) => {
  const args = ["pages", "generate-test-data", "--printDocuments"];
  args.push("--featuresConfig", prepareJsonForCmd(featuresConfig));
  const sitesConfigPath = projectStructure.scopedSitesConfigPath?.getAbsolutePath() ?? projectStructure.sitesConfigRoot.getAbsolutePath();
  const siteStreamPath = path.resolve(
    process.cwd(),
    path.join(sitesConfigPath, projectStructure.siteStreamConfig)
  );
  if (fs.existsSync(siteStreamPath)) {
    const siteStream = prepareJsonForCmd(
      JSON.parse(fs.readFileSync(siteStreamPath).toString())
    );
    args.push("--siteStreamConfig", siteStream);
  }
  return args;
};
const prepareJsonForCmd = (json) => {
  let jsonString;
  if (process.platform == "win32") {
    jsonString = `${JSON.stringify(json).replace(/([\\]*)"/g, `$1$1\\"`)}`;
  } else {
    jsonString = `'${JSON.stringify(json)}'`;
  }
  return jsonString;
};
const getDocumentByLocale = (parsedData, locale) => {
  if (Array.isArray(parsedData)) {
    const documentsForLocale = parsedData.filter((d) => d.locale === locale);
    if (documentsForLocale.length === 0) {
      throw new Error(`Could not find document for locale: "${locale}"`);
    } else if (documentsForLocale.length > 1) {
      throw new Error(`Multiple documents found for locale: "${locale}"`);
    }
    return documentsForLocale[0];
  }
  return parsedData;
};
export {
  generateTestData,
  generateTestDataForPage,
  generateTestDataForSlug
};
