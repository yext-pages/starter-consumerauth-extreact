import React from "react";
import ReactDOMServer from "react-dom/server.js";
import templateBase from "../public/templateBase.js";
import {
  renderHeadConfigToString,
  getLang
} from "../../../common/src/template/head.js";
import { getContentType } from "./getContentType.js";
async function sendAppHTML(res, templateModuleInternal, props, vite, pathname) {
  if (templateModuleInternal.render) {
    res.status(200).type(getContentType(templateModuleInternal, props)).end(templateModuleInternal.render(props));
    return;
  }
  const appHtml = ReactDOMServer.renderToString(
    React.createElement(templateModuleInternal.default || "", props)
  );
  const headConfig = templateModuleInternal.getHeadConfig ? templateModuleInternal.getHeadConfig(props) : void 0;
  const template = await vite.transformIndexHtml(pathname, templateBase);
  const html = template.replace(`<!--app-html-->`, appHtml).replace(
    `<!--app-head-->`,
    `<head>
        <script type="text/javascript">
          window._RSS_PROPS_ = ${JSON.stringify(props)};
          window._RSS_TEMPLATE_PATH_ = '${templateModuleInternal.path}';
          window._RSS_LANG_ = '${getLang(headConfig, props)}';
        <\/script>
        ${headConfig ? renderHeadConfigToString(headConfig) : ""}
      </head>`
  );
  res.status(200).type(getContentType(templateModuleInternal, props)).end(html);
}
export {
  sendAppHTML as default
};
