import buildStart from "./buildStart/buildStart.js";
import closeBundle from "./closeBundle/closeBundle.js";
import path, { parse } from "path";
import { readdir } from "fs/promises";
import { processEnvVariables } from "../../util/processEnvVariables.js";
const intro = `var global = globalThis;`;
const build = (projectStructure) => {
  return {
    name: "vite-plugin:build",
    apply: "build",
    config: async () => {
      return {
        envDir: projectStructure.envVarDir,
        envPrefix: projectStructure.envVarPrefix,
        build: {
          outDir: projectStructure.distRoot.path,
          manifest: true,
          rollupOptions: {
            preserveEntrySignatures: "strict",
            input: await discoverInputs(
              projectStructure.templatesRoot.getAbsolutePath(),
              projectStructure.scopedTemplatesPath?.getAbsolutePath(),
              projectStructure.hydrationBundleOutputRoot.getAbsolutePath()
            ),
            output: {
              intro,
              assetFileNames: "assets/static/[name]-[hash][extname]",
              chunkFileNames: "assets/static/[name]-[hash].js"
            }
          }
        },
        define: processEnvVariables(projectStructure.envVarPrefix)
      };
    },
    buildStart: buildStart(projectStructure),
    closeBundle: closeBundle(projectStructure)
  };
};
const discoverInputs = async (rootTemplateDir, scopedTemplateDir, hydrationOutputDir) => {
  const entryPoints = {};
  const updateEntryPoints = async (dir) => (await readdir(dir, { withFileTypes: true })).filter((dirent) => !dirent.isDirectory()).map((file) => file.name).forEach((template) => {
    const parsedPath = parse(template);
    const outputPath = `server/${parsedPath.name}`;
    if (entryPoints[outputPath]) {
      return;
    }
    entryPoints[outputPath] = path.join(dir, template);
    if (parsedPath.ext === ".tsx" || parsedPath.ext === ".jsx") {
      entryPoints[`hydrate/${parsedPath.name}`] = path.join(hydrationOutputDir, template).replace("jsx", "tsx");
    }
  });
  if (scopedTemplateDir) {
    await updateEntryPoints(scopedTemplateDir);
  }
  await updateEntryPoints(rootTemplateDir);
  return entryPoints;
};
export {
  build
};
