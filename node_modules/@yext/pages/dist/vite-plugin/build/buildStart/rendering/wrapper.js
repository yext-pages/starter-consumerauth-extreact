import {
  renderHeadConfigToString,
  getLang
} from "../../../../common/src/template/head.js";
const reactWrapper = (props, templateModuleInternal, template, hydrate, getHeadConfig) => {
  if (!props.__meta.manifest) {
    throw new Error("Manifest is undefined");
  }
  const projectFilepaths = props.__meta.manifest.projectFilepaths;
  const headConfig = getHeadConfig ? getHeadConfig(props) : void 0;
  const lang = getLang(headConfig, props);
  const bundlerManifest = props.__meta.manifest.bundlerManifest;
  const rootTemplateFilepath = `${projectFilepaths.templatesRoot}/${templateModuleInternal.templateName}.tsx`;
  const scopedTemplateFilepath = `${projectFilepaths.scopedTemplatesPath}/${templateModuleInternal.templateName}.tsx`;
  const templateFilepath = !!projectFilepaths.scopedTemplatesPath && bundlerManifest[scopedTemplateFilepath] ? scopedTemplateFilepath : rootTemplateFilepath;
  return `<!DOCTYPE html>
    <html lang=${lang}>
    <head>
        <script>window.__INITIAL__DATA__ = ${JSON.stringify(props)}<\/script>
        ${Array.from(
    getCssTags(
      templateFilepath,
      props.__meta.manifest.bundlerManifest,
      /* @__PURE__ */ new Set()
    )
  ).map(
    (f) => `<link rel="stylesheet" href="${props.relativePrefixToRoot + f}"/>`
  ).join("\n")}
        ${headConfig ? renderHeadConfigToString(headConfig) : ""}
    </head>
    <body>
        <div id="reactele">${template}</div>${hydrate ? `<script type="module" src="${props.relativePrefixToRoot + findHydrationFilename(
    `${projectFilepaths.hydrationBundleOutputRoot}/${templateModuleInternal.templateName}.tsx`,
    props
  )}" defer><\/script>` : ""}
    </body>
    </html>`;
};
const getCssTags = (filepath, manifest, seen) => {
  const entry = structuredClone(
    Object.entries(manifest).find(([file2]) => file2 === filepath)
  );
  if (!entry) {
    return /* @__PURE__ */ new Set();
  }
  const [file, info] = entry;
  seen.add(file);
  const cssFiles = new Set(info.css);
  (info.imports || []).flatMap((f) => Array.from(getCssTags(f, manifest, seen))).forEach((f) => cssFiles.add(f));
  return cssFiles;
};
const findHydrationFilename = (hydrationFile, data) => {
  const { __meta } = data;
  for (const [file, info] of Object.entries(__meta.manifest.bundlerManifest)) {
    if (file !== hydrationFile) {
      continue;
    }
    return info.file;
  }
};
export {
  reactWrapper
};
