{
  "version": 3,
  "sources": ["../../@yext/analytics/src/infra/HttpRequester.ts", "../../@yext/analytics/src/infra/SearchAnalyticsReporter.ts", "../../@yext/analytics/src/models/search/SearchAnalyticsEventType.ts", "../../@yext/analytics/src/models/pages/events/DefaultPagesEventNames.ts", "../../@yext/analytics/src/models/pages/events/CtaClick.ts", "../../@yext/analytics/src/models/pages/events/WebsiteEvent.ts", "../../@yext/analytics/src/models/pages/events/DrivingDirectionEvent.ts", "../../@yext/analytics/src/models/pages/events/PageViewEvent.ts", "../../@yext/analytics/src/models/pages/events/PhoneCallEvent.ts", "../../@yext/analytics/src/models/constants.ts", "../../@yext/analytics/src/infra/CalculateSeed.ts", "../../@yext/analytics/src/infra/ConversionTrackingReporter.ts", "../../@yext/analytics/src/infra/PagesAnalyticsReporter.ts", "../../@yext/analytics/src/utils/CookieManager.ts", "../../@yext/analytics/src/index.ts"],
  "sourcesContent": ["import { HttpRequesterService } from '../services';\nimport { AnalyticsPayload } from '../models';\nimport fetch from 'cross-fetch';\n\n/**\n * Responsible for making web requests.\n *\n */\nexport class HttpRequester implements HttpRequesterService {\n  post(url: string, body: AnalyticsPayload): Promise<Response> {\n    const data = JSON.stringify(body);\n\n    const fetchInit: RequestInit = {\n      method: 'POST',\n      body: data,\n      keepalive: true\n    };\n\n    if (typeof(window) !== 'undefined' && window.fetch) {\n      return window.fetch(url, fetchInit);\n    }\n\n    return fetch(url, fetchInit);\n  }\n\n  get(url: string): Promise<Response> {\n    const fetchInit: RequestInit = {\n      method: 'GET',\n      mode: 'no-cors',\n    };\n\n    if (typeof (window) !== 'undefined' && window.fetch) {\n      return window.fetch(url, fetchInit);\n    }\n\n    return fetch(url, fetchInit);\n  }\n}", "import { HttpRequesterService, SearchAnalyticsService } from '../services';\nimport { AnalyticsPayload, SearchAnalyticsConfig, SearchAnalyticsEvent, Visitor } from '../models';\n\nconst DEFAULT_DOMAIN = 'https://answers.yext-pixel.com';\n\n/**\n * Responsible for reporting Analytics events.\n *\n * @public\n */\nexport class SearchAnalyticsReporter implements SearchAnalyticsService {\n  private _visitor: Visitor | undefined;\n  private _debug: boolean|undefined;\n  constructor(private config: SearchAnalyticsConfig, private httpRequesterService: HttpRequesterService) {\n    this.setVisitor(config.visitor);\n    this._debug = config.debug;\n  }\n\n  /**\n   * Prints event details to the console for debugging of analytics events as they fire.\n   * @param event - the SearchAnalyticsEvent that will be printed\n   */\n  private printEvent(event: SearchAnalyticsEvent): void {\n    if (!this._debug) return;\n    console.log(\n      `%c[YextAnalytics]%c- Tracked Search event: ${event.type}`,\n      'background: white; color: blue;',\n      '',\n    );\n  }\n\n  /** {@inheritDoc AnalyticsService.report} */\n  async report(\n    event: SearchAnalyticsEvent,\n    additionalRequestAttributes?: AnalyticsPayload\n  ): Promise<void> {\n    const domain = this.config.domain ?? DEFAULT_DOMAIN;\n    const url = `${domain}/realtimeanalytics/data/answers/${this.config.businessId}`;\n    const { type, ...eventData } = event;\n    const data = {\n      eventType: type,\n      businessId: this.config.businessId,\n      experienceKey: this.config.experienceKey,\n      experienceVersion: this.config.experienceVersion,\n      ...(this._visitor && { visitor: { ...this._visitor } }),\n      ...SearchAnalyticsReporter._formatForApi(eventData)\n    };\n    const res = await this.httpRequesterService.post(\n      url, { data, ...additionalRequestAttributes }\n    );\n    if (res.status !== 200) {\n      const errorMessage = await res.text();\n      throw new Error(errorMessage);\n    }\n    this.printEvent(event);\n  }\n\n  /** {@inheritDoc AnalyticsService.setVisitor} */\n  setVisitor(visitor: Visitor | undefined): void {\n    this._visitor = visitor;\n  }\n\n  /**\n   * Formats the event data for the api which includes adapting verticalKey to verticalConfigId.\n   *\n   * @param event - The data to format.\n   * @returns The formatted data.\n   */\n  private static _formatForApi(event: Omit<SearchAnalyticsEvent, 'type'>): AnalyticsPayload {\n    const transformedEvent: AnalyticsPayload = { ...event };\n    if (transformedEvent.verticalKey) {\n      transformedEvent.verticalConfigId = transformedEvent.verticalKey;\n      delete transformedEvent.verticalKey;\n    }\n    return transformedEvent;\n  }\n\n  /** {@inheritDoc SearchAnalyticsService.setDebugEnabled} */\n  setDebugEnabled(enabled: boolean): void {\n    this._debug = enabled;\n  }\n}", "/**\n * Represents the possible analytics event types.\n *\n * @public\n */\nexport enum SearchAnalyticsEventType {\n  /** {@link AllTabNavigationEvent} */\n  AllTabNavigation = 'ALL_TAB_NAVIGATION',\n  /** {@link AllTabNavigationEvent} */\n  VerticalTabNavigation = 'VERTICAL_TAB_NAVIGATION',\n  /** {@link ScrollEvent} */\n  ScrollToBottomOfPage = 'SCROLL_TO_BOTTOM_OF_PAGE',\n  /** {@link QuestionSubmissionEvent} */\n  QuestionFocus = 'QUESTION_FOCUS',\n  /** {@link QuestionSubmissionEvent} */\n  QuestionSubmit = 'QUESTION_SUBMIT',\n  /** {@link AccordionToggleEvent} */\n  RowExpand = 'ROW_EXPAND',\n  /** {@link AccordionToggleEvent} */\n  RowCollapse = 'ROW_COLLAPSE',\n  /** {@link ThumbsFeedbackEvent} */\n  ThumbsUp = 'THUMBS_UP',\n  /** {@link ThumbsFeedbackEvent} */\n  ThumbsDown = 'THUMBS_DOWN',\n  /** {@link VoiceSearchEvent} */\n  VoiceStart = 'VOICE_START',\n  /** {@link VoiceSearchEvent} */\n  VoiceStop = 'VOICE_STOP',\n  /** {@link SearchBarImpressionEvent} */\n  SearchBarImpression = 'SEARCH_BAR_IMPRESSION',\n  /** {@link SearchClearEvent} */\n  SearchClearButton = 'SEARCH_CLEAR_BUTTON',\n  /** {@link PaginationEvent} */\n  Paginate = 'PAGINATE',\n  /** {@link AutocompleteEvent} */\n  AutocompleteSelection = 'AUTO_COMPLETE_SELECTION',\n  /** {@link VerticalViewAllEvent} */\n  VerticalViewAll = 'VERTICAL_VIEW_ALL',\n\n  // CTA event types\n  /** {@link CtaEvent} */\n  CtaClick = 'CTA_CLICK',\n  /** {@link CtaEvent} */\n  TitleClick = 'TITLE_CLICK',\n  /** {@link CtaEvent} */\n  TapToCall = 'TAP_TO_CALL',\n  /** {@link CtaEvent} */\n  OrderNow = 'ORDER_NOW',\n  /** {@link CtaEvent} */\n  AddToCart = 'ADD_TO_CART',\n  /** {@link CtaEvent} */\n  ApplyNow = 'APPLY_NOW',\n  /** {@link CtaEvent} */\n  DrivingDirections = 'DRIVING_DIRECTIONS',\n  /** {@link CtaEvent} */\n  ViewWebsite = 'VIEW_WEBSITE',\n  /** {@link CtaEvent} */\n  Email = 'EMAIL',\n  /** {@link CtaEvent} */\n  BookAppointment = 'BOOK_APPOINTMENT',\n  /** {@link CtaEvent} */\n  Rsvp = 'RSVP',\n\n  // Search duration event types\n  /** {@link SearchDurationEvent} */\n  ResultsHidden = 'RESULTS_HIDDEN',\n  /** {@link SearchDurationEvent} */\n  ResultsUnhidden = 'RESULTS_UNHIDDEN',\n  /** {@link SearchDurationEvent} */\n  FollowUpQuery = 'FOLLOW_UP_QUERY',\n}\n\nexport { SearchAnalyticsEventType as AnalyticsEventType};", "/**\n * Default pages analytics event types.\n *\n * @public\n */\nexport enum DefaultPagesEventNames {\n  PageView = 'PAGE_VIEW',\n  CTA = 'CTA_CLICK',\n  Website = 'WEBSITE',\n  DrivingDirection = 'DRIVING_DIRECTIONS',\n  PhoneCall = 'CALL',\n}", "import { PagesAnalyticsEvent } from './PagesAnalyticsEvent';\nimport { DefaultPagesEventNames } from './DefaultPagesEventNames';\n\n/**\n * A Pages CTA Event\n *\n * @public\n */\nexport const CtaClick: PagesAnalyticsEvent = {\n  eventType: DefaultPagesEventNames.CTA,\n};", "import { PagesAnalyticsEvent } from './PagesAnalyticsEvent';\nimport { DefaultPagesEventNames } from './DefaultPagesEventNames';\n\n/**\n * A Pages Website Click Event\n *\n * @public\n */\nexport const WebsiteEvent: PagesAnalyticsEvent = {\n  eventType: DefaultPagesEventNames.Website,\n};", "import { PagesAnalyticsEvent } from './PagesAnalyticsEvent';\nimport { DefaultPagesEventNames } from './DefaultPagesEventNames';\n\n/**\n * A Pages DrivingDirection Event\n *\n * @public\n */\nexport const DrivingDirectionEvent: PagesAnalyticsEvent = {\n  eventType: DefaultPagesEventNames.DrivingDirection,\n};", "import { PagesAnalyticsEvent } from './PagesAnalyticsEvent';\nimport { DefaultPagesEventNames } from './DefaultPagesEventNames';\n\n/**\n * A Pages PageView Event\n *\n * @public\n */\nexport const PageViewEvent: PagesAnalyticsEvent = {\n  eventType: DefaultPagesEventNames.PageView,\n};", "import { PagesAnalyticsEvent } from './PagesAnalyticsEvent';\nimport { DefaultPagesEventNames } from './DefaultPagesEventNames';\n\n/**\n * A Pages Phone Call Event\n *\n * @public\n */\nexport const PhoneCallEvent: PagesAnalyticsEvent = {\n  eventType: DefaultPagesEventNames.PhoneCall,\n};", "/**\n * URL Parameter & Param name for Yext conversion pixels\n *\n * @public\n */\nexport const COOKIE_PARAM = '_yfpc';\nexport const COOKIE_REMOVAL_VALUE = '__temp__';\nexport const LISTINGS_SOURCE_PARAM = 'y_source';\nexport const DEFAULT_CONVERSION_TRACKING_DOMAIN = 'realtimeanalytics.yext.com';", "\n/**\n * Get a random number to use as a cache buster in analytics pixel URLs\n * @returns number\n *\n * @internal\n */\nexport function calculateSeed(): number {\n  return Date.now() + Math.floor(1000 * Math.random());\n}", "import { ConversionEvent, COOKIE_PARAM, ListingsClickEvent } from '../models';\nimport { DEFAULT_CONVERSION_TRACKING_DOMAIN, LISTINGS_SOURCE_PARAM } from '../models/constants';\nimport { CommonConversionData } from '../models/conversiontracking/CommonConversionData';\nimport { ConversionTrackingService, HttpRequesterService } from '../services';\nimport { calculateSeed } from './CalculateSeed';\n\nconst conversionEndpoint = 'conversiontracking/conversion';\nconst listingsEndpoint = 'listings';\n\nexport class ConversionTrackingReporter implements ConversionTrackingService {\n  private _debug: boolean|undefined;\n  constructor(\n    private httpRequesterService: HttpRequesterService,\n    private debug?: boolean|undefined,\n  ) {\n    this._debug = debug;\n  }\n\n  /**\n   * Prints event details to the console for debugging of analytics events as they fire.\n   * @param event - the details of the event that will be printed\n   * @param type - the type of the event that was tracked\n   */\n  private printEvent(event: string, type: string): void {\n    if (!this._debug) return;\n    console.log(\n      `%c[YextAnalytics]%c- Tracked ${type} event: ${event}`,\n      'background: white; color: blue;',\n      '',\n    );\n  }\n\n  async handleRequest(url: string): Promise<void> {\n    const res = await this.httpRequesterService.get(url.toString());\n    if (res.status !== 200 && !(res.type === 'opaqueredirect' || res.type === 'opaque')) {\n      const errorMessage = await res.text();\n      throw new Error(errorMessage);\n    }\n  }\n\n  private static formatBaseEvent(event: CommonConversionData, params: URLSearchParams): void {\n    params.set(COOKIE_PARAM, event.cookieId);\n    if (event.referrer) params.set('referrer', event.referrer);\n    params.set('v', calculateSeed().toString());\n    params.set('location', event.location);\n  }\n\n  /** {@inheritDoc ConversionTrackingService.trackConversion} */\n  async trackConversion(event: ConversionEvent): Promise<void> {\n    const url = new URL(`https://${DEFAULT_CONVERSION_TRACKING_DOMAIN}/${conversionEndpoint}`);\n    const params = new URLSearchParams();\n    params.set('cid', event.cid);\n    if (event.cv) params.set('cv', event.cv);\n    ConversionTrackingReporter.formatBaseEvent(event, params);\n    url.search = params.toString();\n    await this.handleRequest(url.toString());\n    this.printEvent(event.cid, 'Conversion');\n  }\n\n  /** {@inheritDoc ConversionTrackingService.trackListings} */\n  async trackListings(event: ListingsClickEvent): Promise<void> {\n    const url = new URL(`https://${DEFAULT_CONVERSION_TRACKING_DOMAIN}/${listingsEndpoint}`);\n    const params = new URLSearchParams();\n    params.set(LISTINGS_SOURCE_PARAM, event.source);\n    ConversionTrackingReporter.formatBaseEvent(event, params);\n    url.search = params.toString();\n    await this.handleRequest(url.toString());\n    this.printEvent(event.source, 'Listings Click');\n  }\n\n  /** {@inheritDoc ConversionTrackingService.setDebugEnabled} */\n  setDebugEnabled(enabled: boolean): void {\n    this._debug = enabled;\n  }\n}", "import { COOKIE_PARAM, DEFAULT_CONVERSION_TRACKING_DOMAIN, LISTINGS_SOURCE_PARAM } from '../models/constants';\nimport { ConversionDetails } from '../models';\nimport { HttpRequesterService, PagesAnalyticsService } from '../services';\nimport { DefaultPagesEventNames, PagesAnalyticsConfig, Visitor } from '../models';\nimport { PagesAnalyticsEvent } from '../models';\nimport { PageViewEvent } from '../models';\nimport { calculateSeed } from './CalculateSeed';\nimport { ConversionTrackingReporter } from './ConversionTrackingReporter';\n\nconst DEFAULT_DOMAIN_PAGES = 'www.yext-pixel.com';\nconst PRODUCT_NAME = 'sites';\nconst ENDPOINT = 'store_pagespixel';\n\nenum urlParamNames {\n  BusinessId = 'businessids',\n  Product = 'product',\n  SiteId = 'siteId',\n  IsStaging = 'isStaging',\n  CacheBuster = 'v',\n  UrlPath = 'pageurl',\n  Referrer = 'pagesReferrer',\n  EventType = 'eventType',\n  PageSetId = 'pageSetId',\n  EntityInternalId = 'ids',\n  DirectoryId = 'directoryId',\n  SearchId = 'searchId',\n  StaticPageId = 'staticPageId',\n  PageType = 'pageType',\n  VisitorId = 'visitorId',\n  VisitorMethod = 'visitorIdMethod',\n  PageDomain = 'pageDomain'\n}\n\nconst eventTypeNameMapping = new Map<string, string>();\neventTypeNameMapping.set(DefaultPagesEventNames.PageView, 'pageview');\neventTypeNameMapping.set(DefaultPagesEventNames.CTA, 'calltoactionclick');\neventTypeNameMapping.set(DefaultPagesEventNames.PhoneCall, 'phonecall');\neventTypeNameMapping.set(DefaultPagesEventNames.DrivingDirection, 'drivingdirection');\neventTypeNameMapping.set(DefaultPagesEventNames.Website, 'clicktowebsite');\n\nfunction getEventName(name: string): string {\n  const mappedName = eventTypeNameMapping.get(name);\n  if (typeof mappedName === 'string') {\n    return mappedName;\n  }\n  return name;\n}\n\n/**\n * Responsible for reporting Pages Analytics Events\n *\n * @public\n */\nexport class PagesAnalyticsReporter implements PagesAnalyticsService{\n  private _visitor: Visitor |undefined;\n  private _debug: boolean|undefined;\n  private _conversionTrackingEnabled: boolean|undefined;\n  private _cookieID: string|undefined;\n  private readonly _conversionTracker: ConversionTrackingReporter;\n  private _hasTrackedListings: boolean;\n  private readonly _pageUrl: URL;\n  private readonly _pageDomain: URL | undefined;\n  constructor(private config: PagesAnalyticsConfig,\n              private httpRequesterService: HttpRequesterService) {\n    this.setVisitor(config.visitor);\n    this._debug = config.debug;\n    this._conversionTracker = new ConversionTrackingReporter(this.httpRequesterService, this._debug);\n    this._hasTrackedListings = false;\n    try {\n      this._pageUrl = new URL(config.pageUrl);\n    } catch {\n      throw new Error(`pageUrl property must be a valid URL, was: '${config.pageUrl}'`);\n    }\n    if (config.pageDomain) {\n      try {\n        this._pageDomain = new URL(config.pageDomain);\n      } catch {\n        console.warn(`pageDomain '${config.pageDomain}' is not a valid URL.`,\n          'It will not be included as a query param sent to the API.');\n      }\n    }\n  }\n\n  /**\n   * Prints event details to the console for debugging of analytics events as they fire.\n   * @param event - the PagesAnalyticsEvent that will be printed\n   */\n  private printEvent(event: PagesAnalyticsEvent): void {\n    if (!this._debug) return;\n    console.log(\n      `%c[YextAnalytics]%c- Tracked Pages event: ${event.eventType}`,\n      'background: white; color: blue;',\n      '',\n    );\n  }\n\n  /**\n   * Converts config and PagesAnalyticsEvent into url parameters for sending to API\n   * @param event - PagesAnalyticsEvent to transform into URLSearchParams\n   */\n  private urlParameters(event: PagesAnalyticsEvent): URLSearchParams {\n    const params = new URLSearchParams();\n    params.set(urlParamNames.BusinessId, this.config.businessId.toString());\n    params.set(urlParamNames.Product, PRODUCT_NAME);\n    params.set(urlParamNames.SiteId, this.config.siteId.toString());\n    params.set(urlParamNames.IsStaging, (!this.config.production).toString());\n    params.set(urlParamNames.EventType, getEventName(event.eventType));\n    params.set(urlParamNames.PageType, this.config.pageType.name);\n\n    if (this.config.pageType.name === 'entity') {\n      params.set(urlParamNames.PageSetId, this.config.pageType.pageSetId);\n      params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());\n    } else if (this.config.pageType.name === 'directory') {\n      params.set(urlParamNames.DirectoryId, this.config.pageType.directoryId);\n      params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());\n    } else if (this.config.pageType.name === 'locator') {\n      params.set(urlParamNames.SearchId, this.config.pageType.searchId);\n    } else if (urlParamNames.StaticPageId in this.config.pageType){\n      params.set(urlParamNames.StaticPageId, this.config.pageType.staticPageId);\n    }\n\n    params.set(urlParamNames.CacheBuster, calculateSeed().toString());\n    params.set(urlParamNames.UrlPath, this._pageUrl.pathname);\n    params.set(urlParamNames.Referrer, this.config.referrer);\n    this._pageDomain && params.set(urlParamNames.PageDomain, this._pageDomain.toString());\n\n    if (this._conversionTrackingEnabled && this._cookieID) {\n      params.set(COOKIE_PARAM, this._cookieID);\n    }\n\n    if (this._visitor) {\n      params.set(urlParamNames.VisitorId, this._visitor.id);\n      if (this._visitor.idMethod) params.set(urlParamNames.VisitorMethod, this._visitor.idMethod);\n    }\n\n    return params;\n  }\n\n  /** {@inheritDoc PagesAnalyticsService.pageView} */\n  async pageView(): Promise<void> {\n    const sourceValue = this._pageUrl.searchParams.get(LISTINGS_SOURCE_PARAM);\n\n    if (this._conversionTrackingEnabled\n      && this._cookieID\n      && !this._hasTrackedListings\n      && sourceValue) {\n      await this._conversionTracker.trackListings({\n        cookieId: this._cookieID,\n        location: this._pageUrl.toString(),\n        source: sourceValue,\n      });\n      this._hasTrackedListings = true;\n    }\n    return this.track(PageViewEvent);\n  }\n\n  /**\n   * returns the endpoint to hit depending on whether conversion tracking is enabled\n   * @private\n   */\n  private endpoint(): string {\n    if (this._conversionTrackingEnabled) {\n      return `https://${DEFAULT_CONVERSION_TRACKING_DOMAIN}/${ENDPOINT}`;\n    }\n    return `https://${DEFAULT_DOMAIN_PAGES}/${ENDPOINT}`;\n  }\n\n  /** {@inheritDoc PagesAnalyticsService.setDebugEnabled} */\n  async track(event: PagesAnalyticsEvent, conversionInfo?: ConversionDetails): Promise<void> {\n    /** TODO: need to evaluate that the event name is valid, I think there are restrictions in the characters\n      * that are accepted\n      */\n    const url = new URL(this.endpoint());\n    url.search = this.urlParameters(event).toString();\n    const res = await this.httpRequesterService.get(url.toString());\n    // modern browsers won't let us access the status because of CORS\n    // https://developer.mozilla.org/en-US/docs/Web/API/Request/mode\n    if (res.status !== 200 && !(res.type == 'opaque' || res.type == 'opaqueredirect')) {\n      const errorMessage = await res.text();\n      throw new Error(errorMessage);\n    }\n    this.printEvent(event);\n\n    if (this._conversionTrackingEnabled && this._cookieID && conversionInfo) {\n      await this._conversionTracker.trackConversion({\n        cid: conversionInfo.cid,\n        cv: conversionInfo.cv,\n        cookieId: this._cookieID,\n        location: this._pageUrl.toString(),\n      });\n    }\n  }\n\n  /** {@inheritDoc PagesAnalyticsService.setDebugEnabled} */\n  setDebugEnabled(enabled: boolean): void {\n    this._debug = enabled;\n    if (this._conversionTracker) {\n      this._conversionTracker.setDebugEnabled(enabled);\n    }\n  }\n\n  /** {@inheritDoc PagesAnalyticsService.setVisitor} */\n  setVisitor(visitor: Visitor | undefined): void {\n    this._visitor = visitor;\n  }\n\n  /** {@inheritDoc PagesAnalyticsService.setConversionTrackingEnabled} */\n  setConversionTrackingEnabled(enabled: boolean, cookieId: string): void {\n    this._conversionTrackingEnabled = enabled;\n    this._cookieID = cookieId;\n  }\n}\n\n", "import { COOKIE_PARAM } from '../models';\nimport { COOKIE_REMOVAL_VALUE } from '../models/constants';\n\n/**\n * CookieManager will manager conversion tracking cookies\n *\n * @public\n */\nexport class CookieManager {\n  /**\n   * Takes the window and document\n   * @param _outerWindow - typically the window object or a mock\n   * @param _outerDocument - typically teh document object or a mock\n   */\n  constructor(private _outerWindow: Window = window, private _outerDocument: Document = document) {\n  }\n  /**\n   * Gets the existing YFPC ID, or sets a new one if it doesn't already exist.\n   * You should only call this method if doing so complies with your GDPR/CCPA compliance requirements.\n   *\n   * @public\n   */\n  setAndGetYextCookie(): string {\n    let cookieValue = this.fetchCookie();\n    if (!cookieValue) {\n      cookieValue = CookieManager.generateRandomCookie().toString();\n    }\n    this.setCookieAndRemoveOldCookies(cookieValue);\n    return cookieValue;\n  }\n\n  /**\n   */\n  private static generateRandomCookie(): number {\n    return Math.floor(Math.random() * new Date().getTime());\n  }\n\n  /**\n   * Retrieves the identifier stored as a cookie on the user's browser, if present. Otherwise\n   * returns empty. This is accomplished by attempting to set a cookie at domains in order of\n   * increasing specificity (e.g. \".com\", then \".example.com\", then \".subdomain.example.com\"), and\n   * the first one that we can set a cookie in is the root domain. Check if we already have a cookie\n   * in the root domain and if not, check if a cookie exists without a domain, for legacy reasons.\n   *\n   */\n  private fetchCookie(): string {\n    let cookieValue = '';\n    const checkDomain = (domain: string) => {\n      if (this.canSetCookieWithDomain(domain)) {\n        const removedValue = this.removeCookieByDomain(domain);\n        if (removedValue) {\n          // We found and removed a value, so put it back\n          cookieValue = removedValue;\n          this.setCookie(cookieValue, domain);\n        }\n        // Exit the loop once we've reached root domain (the first domain where we can set a cookie)\n        return true;\n      }\n    };\n\n    this.forEachDomainIncreasingSpecificity(checkDomain);\n    // If no cookie was present in the root domain, check for a cookie that doesn't have a domain\n    // specified (by passing an empty string to checkDomain, indicating no domain).\n    if (!cookieValue) checkDomain('');\n    return cookieValue;\n  }\n\n  /**\n   * Runs a function on each possible domain in order of increasing specificity (e.g. .com,\n   * .example.com, .full.example.com). Note that empty string, indicating unset domain, is iterated\n   * through at the end. A truthy return value indicates to break out of the loop.\n   *\n   * @param func - A function to call on each possible domain\n   */\n  private forEachDomainIncreasingSpecificity(func: (a: string) => boolean|undefined): void {\n    let exitedLoop = false;\n    const domainParts = this._outerDocument.location.hostname.split('.').reverse();\n    let currDomain = '';\n\n    for (let i = 0; i < domainParts.length; i++) {\n      currDomain = '.' + domainParts[i] + currDomain;\n      if (func(currDomain)) {\n        exitedLoop = true;\n        break;\n      }\n    }\n    if (!exitedLoop) func('');\n  }\n\n  /**\n   * Removes a COOKIE_PARAM cookie by domain, then returns its value if successful and empty string\n   * otherwise.\n   *\n   * @param cookieDomain - The domain to remove the cookie from\n   */\n  private removeCookieByDomain(cookieDomain: string): string {\n    const prevRemainingCookies = this.persistentCookies();\n    this.clearCookie(cookieDomain);\n    const remainingCookies = this.persistentCookies();\n\n    if (remainingCookies.length < prevRemainingCookies.length) {\n      return CookieManager.listDifference(prevRemainingCookies, remainingCookies)[0] || '';\n    }\n    return '';\n  }\n\n  /**\n   * Returns the list difference between a superlist and sublist, accounting for number of\n   * occurrences.\n   *\n   * @param superlist - The full array\n   * @param sublist - The subarray\n   */\n  private static listDifference(superlist: string[] , sublist: string[]): string[] {\n    const superlistCopy = Array.from(superlist);\n    for (let i = 0; i < sublist.length; i++) {\n      const index = superlistCopy.indexOf(sublist[i]);\n      if (index !== -1) {\n        superlistCopy.splice(index, 1);\n      }\n    }\n    return superlistCopy;\n  }\n\n  /**\n   * Retrieves a list of values of cookies with the name of COOKIE_PARAM that are present and not\n   * set to be removed (i.e. having the specific value this script uses to indicate a removed\n   * cookie).\n   *\n   */\n  private persistentCookies(): string[] {\n    return this.allCookies().filter(\n      val => val !== COOKIE_REMOVAL_VALUE);\n  }\n\n  /**\n   * Retrieves a list of values of cookies with the name of COOKIE_PARAM that are present.\n   *\n   */\n  private allCookies(): string[] {\n    const arr: string[] = [];\n    this.forEachCookieNameValue((name, value) => {\n      if (name === COOKIE_PARAM) {\n        arr.push(value);\n      }\n    });\n    return arr;\n  }\n\n  /**\n   * Runs nameValueFunc on each cookie's key and value (after trimming), only if the key and value\n   * are both truthy.\n   *\n   * @param nameValueFunc - A function to run on each cookie key-value pair\n   */\n  private forEachCookieNameValue(nameValueFunc: (a: string, b: string) => void): void {\n    this._outerDocument.cookie.split(';').forEach((cookie) => {\n      const keyValue = cookie.split('='),\n        key = keyValue[0],\n        value = keyValue[1];\n\n      if (key && value) {\n        nameValueFunc(key.trim(), value.trim());\n      }\n    });\n  }\n\n  /**\n   * Stores a tracking cookie on the user's browser with the given value in the root domain, and\n   * removes first party cookies from all other domains (which may be present for legacy reasons).\n   *\n   * @param cookieValue - The value to set as the first party cookie\n   */\n  private setCookieAndRemoveOldCookies(cookieValue: string): void {\n    let rootDomainReached = false;\n    const totalCookies = this.allCookies().length;\n    let numCookiesEncountered = 0;\n\n    // Iterate until we find the topmost domain (the root domain), where we set the cookie,\n    // then continue iterating, just deleting any cookies we find afterwards.\n    this.forEachDomainIncreasingSpecificity(domain => {\n      if (rootDomainReached) {\n        if (this.removeCookieByDomain(domain)) numCookiesEncountered++;\n      } else {\n        if (this.canSetCookieWithDomain(domain)) {\n          // In root domain, so set cookie\n          if (this.removeCookieByDomain(domain)) numCookiesEncountered++;\n          this.setCookie(cookieValue, domain);\n          rootDomainReached = true;\n        }\n      }\n\n      if (numCookiesEncountered >= totalCookies && rootDomainReached) {\n        // Break if we've already encountered every cookie and we already set one in root domain\n        return true;\n      }\n    });\n  }\n\n  /**\n   * Returns whether we are able to set a cookie (formatted like the actual cookie for tracking)\n   * at a specified domain or not. Preserves existing cookies in the same domain (but not their\n   * expiration dates).\n   *\n   * @param domain - The value for the cookie's domain attribute\n   */\n  private canSetCookieWithDomain(domain: string): boolean {\n    const lostCookie = this.removeCookieByDomain(domain);\n    const existingCookies = this.allCookies();\n    this.setCookie(COOKIE_REMOVAL_VALUE, domain);\n    const newCookies = this.allCookies();\n    if (existingCookies.length < newCookies.length) {\n      // Cookie was successfully saved, so wipe it and put back the old cookie if there was one\n      if (lostCookie) {\n        this.setCookie(lostCookie, domain);\n      } else {\n        this.clearCookie(domain);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Stores a cookie on the user's browser with the given value and domain, with name COOKIE_PARAM.\n   *\n   * @param cookieValue - The value to set as the first party cookie\n   * @param cookieDomain - The domain in which to set the cookie\n   */\n  private setCookie(cookieValue: string, cookieDomain: string): void {\n    this._outerDocument.cookie = this.formatCookie(\n      COOKIE_PARAM,\n      cookieValue,\n      cookieDomain);\n  }\n\n  /**\n   * Creates a formatted cookie string given a key, value, domain, and, optionally, a path.\n   * `Expires` is set to ensure the cookie is persistent, `Samesite=None` so the value can be\n   * included in cross-site requests,`Domain` defaults to root domain (if possible) to enable\n   * tracking across subdomains, and `Secure` is required when using\n   * `Samesite=None`: https://www.chromestatus.com/feature/5633521622188032\n   *\n   * @param cookieName - The name of the cookie\n   * @param cookieValue - The value of the cookie\n   * @param domain - The domain to set the cookie for\n   * @param path - The path to set the cookie for\n   */\n  private formatCookie(cookieName: string, cookieValue: string, domain: string, path = '/'): string {\n    let cookieString = cookieName + '=' + cookieValue;\n    const now = new Date();\n    now.setTime(now.getTime() + 90 * 24 * 60 * 60 * 1000);\n    cookieString += ';path=' + path;\n    cookieString += ';expires=' + now.toUTCString();\n    if (domain) cookieString += ';domain=' + domain;\n    cookieString += ';samesite=None;';\n    if (this._outerWindow.location.protocol === 'https:') {\n      cookieString += ' Secure ';\n    }\n    return cookieString;\n  }\n\n\n  /**\n   * Sets a cookie with name COOKIE_PARAM to make it expire immediately.\n   *\n   * @param cookieDomain - The domain of the cookie to clear\n   * @param cookiePath - The path of the cookie to be deleted (defaults to '/')\n   */\n  private clearCookie(cookieDomain = '', cookiePath = '/'): void {\n    const epoch = new Date(0);\n    let cookieString = COOKIE_PARAM + '=' + COOKIE_REMOVAL_VALUE;\n    cookieString += ';path=' + cookiePath;\n    cookieString += ';expires=' + epoch.toUTCString();\n    if (cookieDomain) cookieString += ';domain=' + cookieDomain + ';';\n    cookieString += ';samesite=None;';\n    if (this._outerWindow.location.protocol === 'https:') {\n      cookieString += ' Secure ';\n    }\n    this._outerDocument.cookie = cookieString;\n  }\n}", "import { HttpRequester } from './infra/HttpRequester';\nimport { AnalyticsReporter } from './infra/AnalyticsReporter';\nimport { ConversionTrackingReporter } from './infra/ConversionTrackingReporter';\nimport { SearchAnalyticsReporter } from './infra/SearchAnalyticsReporter';\nimport { PagesAnalyticsReporter } from './infra/PagesAnalyticsReporter';\nimport { AnalyticsConfig, PagesAnalyticsConfig, SearchAnalyticsConfig } from './models';\nimport { AnalyticsService, SearchAnalyticsService, PagesAnalyticsService, ConversionTrackingService } from './services';\n\n/**\n * Maintained for backwards compatibility with older versions of the library\n * provideAnalytics uses the AnalyticsConfig, AnalyticsService, and AnalyticsReporter aliases\n * for SearchAnalyticsConfig, SearchAnalyticsService, and SearchAnalyticsReporter\n *\n * @remarks\n * Returns an analytics service instance.\n *\n * @param config - The analytics config\n *\n * @public\n */\nexport function provideAnalytics(config: AnalyticsConfig): AnalyticsService {\n  const httpRequester = new HttpRequester();\n  return new AnalyticsReporter(config, httpRequester);\n}\n\n/**\n * Provides a Search Analytics service given a Search specific config\n *\n * @remarks\n * Returns an analytics service instance.\n *\n * @param config - The Search analytics config\n *\n * @public\n */\nexport function provideSearchAnalytics(config: SearchAnalyticsConfig): SearchAnalyticsService {\n  const httpRequester = new HttpRequester();\n  return new SearchAnalyticsReporter(config, httpRequester);\n}\n\n/**\n * Provides a Pages Analytics service given a Pages specific config\n *\n * @remarks\n * Returns an analytics service instance.\n *\n * @param config - The Pages analytics config\n *\n * @public\n */\nexport function providePagesAnalytics(config: PagesAnalyticsConfig): PagesAnalyticsService {\n  const httpRequester = new HttpRequester();\n  return new PagesAnalyticsReporter(config, httpRequester);\n}\n\n/**\n * Provides a Conversion Tracking service given an optional debugging parameter\n *\n * @remarks\n * Returns a conversion tracking service instance\n *\n * @param debug - turn on console log debugging for tracked events\n *\n * @public\n */\nexport function provideConversionTrackingAnalytics(debug?: boolean): ConversionTrackingService {\n  const httpRequester = new HttpRequester();\n  return new ConversionTrackingReporter(httpRequester, debug);\n}\n\nexport * from './models';\nexport {\n  AnalyticsService,\n  PagesAnalyticsService,\n  SearchAnalyticsService,\n  ConversionTrackingService,\n} from './services';\n\nexport * from './utils';"],
  "mappings": "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",
  "names": ["HttpRequester", "fetch", "SearchAnalyticsReporter", "SearchAnalyticsEventType", "DefaultPagesEventNames", "ConversionTrackingReporter", "urlParamNames", "PagesAnalyticsReporter", "CookieManager"]
}
