import {
  require_browser_ponyfill
} from "./chunk-GAJARCMZ.js";
import {
  __toESM
} from "./chunk-IN47U6CF.js";

// node_modules/@yext/analytics/lib/esm/infra/HttpRequester.js
var import_cross_fetch = __toESM(require_browser_ponyfill());
var HttpRequester = function() {
  function HttpRequester2() {
  }
  HttpRequester2.prototype.post = function(url, body) {
    var data = JSON.stringify(body);
    var fetchInit = {
      method: "POST",
      body: data,
      keepalive: true
    };
    if (typeof window !== "undefined" && window.fetch) {
      return window.fetch(url, fetchInit);
    }
    return (0, import_cross_fetch.default)(url, fetchInit);
  };
  HttpRequester2.prototype.get = function(url) {
    var fetchInit = {
      method: "GET",
      mode: "no-cors"
    };
    if (typeof window !== "undefined" && window.fetch) {
      return window.fetch(url, fetchInit);
    }
    return (0, import_cross_fetch.default)(url, fetchInit);
  };
  return HttpRequester2;
}();

// node_modules/@yext/analytics/lib/esm/infra/SearchAnalyticsReporter.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var DEFAULT_DOMAIN = "https://answers.yext-pixel.com";
var SearchAnalyticsReporter = function() {
  function SearchAnalyticsReporter2(config, httpRequesterService) {
    this.config = config;
    this.httpRequesterService = httpRequesterService;
    this.setVisitor(config.visitor);
    this._debug = config.debug;
  }
  SearchAnalyticsReporter2.prototype.printEvent = function(event) {
    if (!this._debug)
      return;
    console.log("%c[YextAnalytics]%c- Tracked Search event: ".concat(event.type), "background: white; color: blue;", "");
  };
  SearchAnalyticsReporter2.prototype.report = function(event, additionalRequestAttributes) {
    var _a;
    return __awaiter(this, void 0, void 0, function() {
      var domain, url, type, eventData, data, res, errorMessage;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            domain = (_a = this.config.domain) !== null && _a !== void 0 ? _a : DEFAULT_DOMAIN;
            url = "".concat(domain, "/realtimeanalytics/data/answers/").concat(this.config.businessId);
            type = event.type, eventData = __rest(event, ["type"]);
            data = __assign(__assign({ eventType: type, businessId: this.config.businessId, experienceKey: this.config.experienceKey, experienceVersion: this.config.experienceVersion }, this._visitor && { visitor: __assign({}, this._visitor) }), SearchAnalyticsReporter2._formatForApi(eventData));
            return [4, this.httpRequesterService.post(url, __assign({ data }, additionalRequestAttributes))];
          case 1:
            res = _b.sent();
            if (!(res.status !== 200))
              return [3, 3];
            return [4, res.text()];
          case 2:
            errorMessage = _b.sent();
            throw new Error(errorMessage);
          case 3:
            this.printEvent(event);
            return [2];
        }
      });
    });
  };
  SearchAnalyticsReporter2.prototype.setVisitor = function(visitor) {
    this._visitor = visitor;
  };
  SearchAnalyticsReporter2._formatForApi = function(event) {
    var transformedEvent = __assign({}, event);
    if (transformedEvent.verticalKey) {
      transformedEvent.verticalConfigId = transformedEvent.verticalKey;
      delete transformedEvent.verticalKey;
    }
    return transformedEvent;
  };
  SearchAnalyticsReporter2.prototype.setDebugEnabled = function(enabled) {
    this._debug = enabled;
  };
  return SearchAnalyticsReporter2;
}();

// node_modules/@yext/analytics/lib/esm/models/search/SearchAnalyticsEventType.js
var SearchAnalyticsEventType;
(function(SearchAnalyticsEventType2) {
  SearchAnalyticsEventType2["AllTabNavigation"] = "ALL_TAB_NAVIGATION";
  SearchAnalyticsEventType2["VerticalTabNavigation"] = "VERTICAL_TAB_NAVIGATION";
  SearchAnalyticsEventType2["ScrollToBottomOfPage"] = "SCROLL_TO_BOTTOM_OF_PAGE";
  SearchAnalyticsEventType2["QuestionFocus"] = "QUESTION_FOCUS";
  SearchAnalyticsEventType2["QuestionSubmit"] = "QUESTION_SUBMIT";
  SearchAnalyticsEventType2["RowExpand"] = "ROW_EXPAND";
  SearchAnalyticsEventType2["RowCollapse"] = "ROW_COLLAPSE";
  SearchAnalyticsEventType2["ThumbsUp"] = "THUMBS_UP";
  SearchAnalyticsEventType2["ThumbsDown"] = "THUMBS_DOWN";
  SearchAnalyticsEventType2["VoiceStart"] = "VOICE_START";
  SearchAnalyticsEventType2["VoiceStop"] = "VOICE_STOP";
  SearchAnalyticsEventType2["SearchBarImpression"] = "SEARCH_BAR_IMPRESSION";
  SearchAnalyticsEventType2["SearchClearButton"] = "SEARCH_CLEAR_BUTTON";
  SearchAnalyticsEventType2["Paginate"] = "PAGINATE";
  SearchAnalyticsEventType2["AutocompleteSelection"] = "AUTO_COMPLETE_SELECTION";
  SearchAnalyticsEventType2["VerticalViewAll"] = "VERTICAL_VIEW_ALL";
  SearchAnalyticsEventType2["CtaClick"] = "CTA_CLICK";
  SearchAnalyticsEventType2["TitleClick"] = "TITLE_CLICK";
  SearchAnalyticsEventType2["TapToCall"] = "TAP_TO_CALL";
  SearchAnalyticsEventType2["OrderNow"] = "ORDER_NOW";
  SearchAnalyticsEventType2["AddToCart"] = "ADD_TO_CART";
  SearchAnalyticsEventType2["ApplyNow"] = "APPLY_NOW";
  SearchAnalyticsEventType2["DrivingDirections"] = "DRIVING_DIRECTIONS";
  SearchAnalyticsEventType2["ViewWebsite"] = "VIEW_WEBSITE";
  SearchAnalyticsEventType2["Email"] = "EMAIL";
  SearchAnalyticsEventType2["BookAppointment"] = "BOOK_APPOINTMENT";
  SearchAnalyticsEventType2["Rsvp"] = "RSVP";
  SearchAnalyticsEventType2["ResultsHidden"] = "RESULTS_HIDDEN";
  SearchAnalyticsEventType2["ResultsUnhidden"] = "RESULTS_UNHIDDEN";
  SearchAnalyticsEventType2["FollowUpQuery"] = "FOLLOW_UP_QUERY";
})(SearchAnalyticsEventType || (SearchAnalyticsEventType = {}));

// node_modules/@yext/analytics/lib/esm/models/pages/events/DefaultPagesEventNames.js
var DefaultPagesEventNames;
(function(DefaultPagesEventNames2) {
  DefaultPagesEventNames2["PageView"] = "PAGE_VIEW";
  DefaultPagesEventNames2["CTA"] = "CTA_CLICK";
  DefaultPagesEventNames2["Website"] = "WEBSITE";
  DefaultPagesEventNames2["DrivingDirection"] = "DRIVING_DIRECTIONS";
  DefaultPagesEventNames2["PhoneCall"] = "CALL";
})(DefaultPagesEventNames || (DefaultPagesEventNames = {}));

// node_modules/@yext/analytics/lib/esm/models/pages/events/CtaClick.js
var CtaClick = {
  eventType: DefaultPagesEventNames.CTA
};

// node_modules/@yext/analytics/lib/esm/models/pages/events/WebsiteEvent.js
var WebsiteEvent = {
  eventType: DefaultPagesEventNames.Website
};

// node_modules/@yext/analytics/lib/esm/models/pages/events/DrivingDirectionEvent.js
var DrivingDirectionEvent = {
  eventType: DefaultPagesEventNames.DrivingDirection
};

// node_modules/@yext/analytics/lib/esm/models/pages/events/PageViewEvent.js
var PageViewEvent = {
  eventType: DefaultPagesEventNames.PageView
};

// node_modules/@yext/analytics/lib/esm/models/pages/events/PhoneCallEvent.js
var PhoneCallEvent = {
  eventType: DefaultPagesEventNames.PhoneCall
};

// node_modules/@yext/analytics/lib/esm/models/constants.js
var COOKIE_PARAM = "_yfpc";
var COOKIE_REMOVAL_VALUE = "__temp__";
var LISTINGS_SOURCE_PARAM = "y_source";
var DEFAULT_CONVERSION_TRACKING_DOMAIN = "realtimeanalytics.yext.com";

// node_modules/@yext/analytics/lib/esm/infra/CalculateSeed.js
function calculateSeed() {
  return Date.now() + Math.floor(1e3 * Math.random());
}

// node_modules/@yext/analytics/lib/esm/infra/ConversionTrackingReporter.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var conversionEndpoint = "conversiontracking/conversion";
var listingsEndpoint = "listings";
var ConversionTrackingReporter = function() {
  function ConversionTrackingReporter2(httpRequesterService, debug) {
    this.httpRequesterService = httpRequesterService;
    this.debug = debug;
    this._debug = debug;
  }
  ConversionTrackingReporter2.prototype.printEvent = function(event, type) {
    if (!this._debug)
      return;
    console.log("%c[YextAnalytics]%c- Tracked ".concat(type, " event: ").concat(event), "background: white; color: blue;", "");
  };
  ConversionTrackingReporter2.prototype.handleRequest = function(url) {
    return __awaiter2(this, void 0, void 0, function() {
      var res, errorMessage;
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.httpRequesterService.get(url.toString())];
          case 1:
            res = _a.sent();
            if (!(res.status !== 200 && !(res.type === "opaqueredirect" || res.type === "opaque")))
              return [3, 3];
            return [4, res.text()];
          case 2:
            errorMessage = _a.sent();
            throw new Error(errorMessage);
          case 3:
            return [2];
        }
      });
    });
  };
  ConversionTrackingReporter2.formatBaseEvent = function(event, params) {
    params.set(COOKIE_PARAM, event.cookieId);
    if (event.referrer)
      params.set("referrer", event.referrer);
    params.set("v", calculateSeed().toString());
    params.set("location", event.location);
  };
  ConversionTrackingReporter2.prototype.trackConversion = function(event) {
    return __awaiter2(this, void 0, void 0, function() {
      var url, params;
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = new URL("https://".concat(DEFAULT_CONVERSION_TRACKING_DOMAIN, "/").concat(conversionEndpoint));
            params = new URLSearchParams();
            params.set("cid", event.cid);
            if (event.cv)
              params.set("cv", event.cv);
            ConversionTrackingReporter2.formatBaseEvent(event, params);
            url.search = params.toString();
            return [4, this.handleRequest(url.toString())];
          case 1:
            _a.sent();
            this.printEvent(event.cid, "Conversion");
            return [2];
        }
      });
    });
  };
  ConversionTrackingReporter2.prototype.trackListings = function(event) {
    return __awaiter2(this, void 0, void 0, function() {
      var url, params;
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = new URL("https://".concat(DEFAULT_CONVERSION_TRACKING_DOMAIN, "/").concat(listingsEndpoint));
            params = new URLSearchParams();
            params.set(LISTINGS_SOURCE_PARAM, event.source);
            ConversionTrackingReporter2.formatBaseEvent(event, params);
            url.search = params.toString();
            return [4, this.handleRequest(url.toString())];
          case 1:
            _a.sent();
            this.printEvent(event.source, "Listings Click");
            return [2];
        }
      });
    });
  };
  ConversionTrackingReporter2.prototype.setDebugEnabled = function(enabled) {
    this._debug = enabled;
  };
  return ConversionTrackingReporter2;
}();

// node_modules/@yext/analytics/lib/esm/infra/PagesAnalyticsReporter.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator3 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var DEFAULT_DOMAIN_PAGES = "www.yext-pixel.com";
var PRODUCT_NAME = "sites";
var ENDPOINT = "store_pagespixel";
var urlParamNames;
(function(urlParamNames2) {
  urlParamNames2["BusinessId"] = "businessids";
  urlParamNames2["Product"] = "product";
  urlParamNames2["SiteId"] = "siteId";
  urlParamNames2["IsStaging"] = "isStaging";
  urlParamNames2["CacheBuster"] = "v";
  urlParamNames2["UrlPath"] = "pageurl";
  urlParamNames2["Referrer"] = "pagesReferrer";
  urlParamNames2["EventType"] = "eventType";
  urlParamNames2["PageSetId"] = "pageSetId";
  urlParamNames2["EntityInternalId"] = "ids";
  urlParamNames2["DirectoryId"] = "directoryId";
  urlParamNames2["SearchId"] = "searchId";
  urlParamNames2["StaticPageId"] = "staticPageId";
  urlParamNames2["PageType"] = "pageType";
  urlParamNames2["VisitorId"] = "visitorId";
  urlParamNames2["VisitorMethod"] = "visitorIdMethod";
  urlParamNames2["PageDomain"] = "pageDomain";
})(urlParamNames || (urlParamNames = {}));
var eventTypeNameMapping = /* @__PURE__ */ new Map();
eventTypeNameMapping.set(DefaultPagesEventNames.PageView, "pageview");
eventTypeNameMapping.set(DefaultPagesEventNames.CTA, "calltoactionclick");
eventTypeNameMapping.set(DefaultPagesEventNames.PhoneCall, "phonecall");
eventTypeNameMapping.set(DefaultPagesEventNames.DrivingDirection, "drivingdirection");
eventTypeNameMapping.set(DefaultPagesEventNames.Website, "clicktowebsite");
function getEventName(name) {
  var mappedName = eventTypeNameMapping.get(name);
  if (typeof mappedName === "string") {
    return mappedName;
  }
  return name;
}
var PagesAnalyticsReporter = function() {
  function PagesAnalyticsReporter2(config, httpRequesterService) {
    this.config = config;
    this.httpRequesterService = httpRequesterService;
    this.setVisitor(config.visitor);
    this._debug = config.debug;
    this._conversionTracker = new ConversionTrackingReporter(this.httpRequesterService, this._debug);
    this._hasTrackedListings = false;
    try {
      this._pageUrl = new URL(config.pageUrl);
    } catch (_a) {
      throw new Error("pageUrl property must be a valid URL, was: '".concat(config.pageUrl, "'"));
    }
    if (config.pageDomain) {
      try {
        this._pageDomain = new URL(config.pageDomain);
      } catch (_b) {
        console.warn("pageDomain '".concat(config.pageDomain, "' is not a valid URL."), "It will not be included as a query param sent to the API.");
      }
    }
  }
  PagesAnalyticsReporter2.prototype.printEvent = function(event) {
    if (!this._debug)
      return;
    console.log("%c[YextAnalytics]%c- Tracked Pages event: ".concat(event.eventType), "background: white; color: blue;", "");
  };
  PagesAnalyticsReporter2.prototype.urlParameters = function(event) {
    var params = new URLSearchParams();
    params.set(urlParamNames.BusinessId, this.config.businessId.toString());
    params.set(urlParamNames.Product, PRODUCT_NAME);
    params.set(urlParamNames.SiteId, this.config.siteId.toString());
    params.set(urlParamNames.IsStaging, (!this.config.production).toString());
    params.set(urlParamNames.EventType, getEventName(event.eventType));
    params.set(urlParamNames.PageType, this.config.pageType.name);
    if (this.config.pageType.name === "entity") {
      params.set(urlParamNames.PageSetId, this.config.pageType.pageSetId);
      params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());
    } else if (this.config.pageType.name === "directory") {
      params.set(urlParamNames.DirectoryId, this.config.pageType.directoryId);
      params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());
    } else if (this.config.pageType.name === "locator") {
      params.set(urlParamNames.SearchId, this.config.pageType.searchId);
    } else if (urlParamNames.StaticPageId in this.config.pageType) {
      params.set(urlParamNames.StaticPageId, this.config.pageType.staticPageId);
    }
    params.set(urlParamNames.CacheBuster, calculateSeed().toString());
    params.set(urlParamNames.UrlPath, this._pageUrl.pathname);
    params.set(urlParamNames.Referrer, this.config.referrer);
    this._pageDomain && params.set(urlParamNames.PageDomain, this._pageDomain.toString());
    if (this._conversionTrackingEnabled && this._cookieID) {
      params.set(COOKIE_PARAM, this._cookieID);
    }
    if (this._visitor) {
      params.set(urlParamNames.VisitorId, this._visitor.id);
      if (this._visitor.idMethod)
        params.set(urlParamNames.VisitorMethod, this._visitor.idMethod);
    }
    return params;
  };
  PagesAnalyticsReporter2.prototype.pageView = function() {
    return __awaiter3(this, void 0, void 0, function() {
      var sourceValue;
      return __generator3(this, function(_a) {
        switch (_a.label) {
          case 0:
            sourceValue = this._pageUrl.searchParams.get(LISTINGS_SOURCE_PARAM);
            if (!(this._conversionTrackingEnabled && this._cookieID && !this._hasTrackedListings && sourceValue))
              return [3, 2];
            return [4, this._conversionTracker.trackListings({
              cookieId: this._cookieID,
              location: this._pageUrl.toString(),
              source: sourceValue
            })];
          case 1:
            _a.sent();
            this._hasTrackedListings = true;
            _a.label = 2;
          case 2:
            return [2, this.track(PageViewEvent)];
        }
      });
    });
  };
  PagesAnalyticsReporter2.prototype.endpoint = function() {
    if (this._conversionTrackingEnabled) {
      return "https://".concat(DEFAULT_CONVERSION_TRACKING_DOMAIN, "/").concat(ENDPOINT);
    }
    return "https://".concat(DEFAULT_DOMAIN_PAGES, "/").concat(ENDPOINT);
  };
  PagesAnalyticsReporter2.prototype.track = function(event, conversionInfo) {
    return __awaiter3(this, void 0, void 0, function() {
      var url, res, errorMessage;
      return __generator3(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = new URL(this.endpoint());
            url.search = this.urlParameters(event).toString();
            return [4, this.httpRequesterService.get(url.toString())];
          case 1:
            res = _a.sent();
            if (!(res.status !== 200 && !(res.type == "opaque" || res.type == "opaqueredirect")))
              return [3, 3];
            return [4, res.text()];
          case 2:
            errorMessage = _a.sent();
            throw new Error(errorMessage);
          case 3:
            this.printEvent(event);
            if (!(this._conversionTrackingEnabled && this._cookieID && conversionInfo))
              return [3, 5];
            return [4, this._conversionTracker.trackConversion({
              cid: conversionInfo.cid,
              cv: conversionInfo.cv,
              cookieId: this._cookieID,
              location: this._pageUrl.toString()
            })];
          case 4:
            _a.sent();
            _a.label = 5;
          case 5:
            return [2];
        }
      });
    });
  };
  PagesAnalyticsReporter2.prototype.setDebugEnabled = function(enabled) {
    this._debug = enabled;
    if (this._conversionTracker) {
      this._conversionTracker.setDebugEnabled(enabled);
    }
  };
  PagesAnalyticsReporter2.prototype.setVisitor = function(visitor) {
    this._visitor = visitor;
  };
  PagesAnalyticsReporter2.prototype.setConversionTrackingEnabled = function(enabled, cookieId) {
    this._conversionTrackingEnabled = enabled;
    this._cookieID = cookieId;
  };
  return PagesAnalyticsReporter2;
}();

// node_modules/@yext/analytics/lib/esm/utils/CookieManager.js
var CookieManager = function() {
  function CookieManager2(_outerWindow, _outerDocument) {
    if (_outerWindow === void 0) {
      _outerWindow = window;
    }
    if (_outerDocument === void 0) {
      _outerDocument = document;
    }
    this._outerWindow = _outerWindow;
    this._outerDocument = _outerDocument;
  }
  CookieManager2.prototype.setAndGetYextCookie = function() {
    var cookieValue = this.fetchCookie();
    if (!cookieValue) {
      cookieValue = CookieManager2.generateRandomCookie().toString();
    }
    this.setCookieAndRemoveOldCookies(cookieValue);
    return cookieValue;
  };
  CookieManager2.generateRandomCookie = function() {
    return Math.floor(Math.random() * new Date().getTime());
  };
  CookieManager2.prototype.fetchCookie = function() {
    var _this = this;
    var cookieValue = "";
    var checkDomain = function(domain) {
      if (_this.canSetCookieWithDomain(domain)) {
        var removedValue = _this.removeCookieByDomain(domain);
        if (removedValue) {
          cookieValue = removedValue;
          _this.setCookie(cookieValue, domain);
        }
        return true;
      }
    };
    this.forEachDomainIncreasingSpecificity(checkDomain);
    if (!cookieValue)
      checkDomain("");
    return cookieValue;
  };
  CookieManager2.prototype.forEachDomainIncreasingSpecificity = function(func) {
    var exitedLoop = false;
    var domainParts = this._outerDocument.location.hostname.split(".").reverse();
    var currDomain = "";
    for (var i = 0; i < domainParts.length; i++) {
      currDomain = "." + domainParts[i] + currDomain;
      if (func(currDomain)) {
        exitedLoop = true;
        break;
      }
    }
    if (!exitedLoop)
      func("");
  };
  CookieManager2.prototype.removeCookieByDomain = function(cookieDomain) {
    var prevRemainingCookies = this.persistentCookies();
    this.clearCookie(cookieDomain);
    var remainingCookies = this.persistentCookies();
    if (remainingCookies.length < prevRemainingCookies.length) {
      return CookieManager2.listDifference(prevRemainingCookies, remainingCookies)[0] || "";
    }
    return "";
  };
  CookieManager2.listDifference = function(superlist, sublist) {
    var superlistCopy = Array.from(superlist);
    for (var i = 0; i < sublist.length; i++) {
      var index = superlistCopy.indexOf(sublist[i]);
      if (index !== -1) {
        superlistCopy.splice(index, 1);
      }
    }
    return superlistCopy;
  };
  CookieManager2.prototype.persistentCookies = function() {
    return this.allCookies().filter(function(val) {
      return val !== COOKIE_REMOVAL_VALUE;
    });
  };
  CookieManager2.prototype.allCookies = function() {
    var arr = [];
    this.forEachCookieNameValue(function(name, value) {
      if (name === COOKIE_PARAM) {
        arr.push(value);
      }
    });
    return arr;
  };
  CookieManager2.prototype.forEachCookieNameValue = function(nameValueFunc) {
    this._outerDocument.cookie.split(";").forEach(function(cookie) {
      var keyValue = cookie.split("="), key = keyValue[0], value = keyValue[1];
      if (key && value) {
        nameValueFunc(key.trim(), value.trim());
      }
    });
  };
  CookieManager2.prototype.setCookieAndRemoveOldCookies = function(cookieValue) {
    var _this = this;
    var rootDomainReached = false;
    var totalCookies = this.allCookies().length;
    var numCookiesEncountered = 0;
    this.forEachDomainIncreasingSpecificity(function(domain) {
      if (rootDomainReached) {
        if (_this.removeCookieByDomain(domain))
          numCookiesEncountered++;
      } else {
        if (_this.canSetCookieWithDomain(domain)) {
          if (_this.removeCookieByDomain(domain))
            numCookiesEncountered++;
          _this.setCookie(cookieValue, domain);
          rootDomainReached = true;
        }
      }
      if (numCookiesEncountered >= totalCookies && rootDomainReached) {
        return true;
      }
    });
  };
  CookieManager2.prototype.canSetCookieWithDomain = function(domain) {
    var lostCookie = this.removeCookieByDomain(domain);
    var existingCookies = this.allCookies();
    this.setCookie(COOKIE_REMOVAL_VALUE, domain);
    var newCookies = this.allCookies();
    if (existingCookies.length < newCookies.length) {
      if (lostCookie) {
        this.setCookie(lostCookie, domain);
      } else {
        this.clearCookie(domain);
      }
      return true;
    }
    return false;
  };
  CookieManager2.prototype.setCookie = function(cookieValue, cookieDomain) {
    this._outerDocument.cookie = this.formatCookie(COOKIE_PARAM, cookieValue, cookieDomain);
  };
  CookieManager2.prototype.formatCookie = function(cookieName, cookieValue, domain, path) {
    if (path === void 0) {
      path = "/";
    }
    var cookieString = cookieName + "=" + cookieValue;
    var now = new Date();
    now.setTime(now.getTime() + 90 * 24 * 60 * 60 * 1e3);
    cookieString += ";path=" + path;
    cookieString += ";expires=" + now.toUTCString();
    if (domain)
      cookieString += ";domain=" + domain;
    cookieString += ";samesite=None;";
    if (this._outerWindow.location.protocol === "https:") {
      cookieString += " Secure ";
    }
    return cookieString;
  };
  CookieManager2.prototype.clearCookie = function(cookieDomain, cookiePath) {
    if (cookieDomain === void 0) {
      cookieDomain = "";
    }
    if (cookiePath === void 0) {
      cookiePath = "/";
    }
    var epoch = new Date(0);
    var cookieString = COOKIE_PARAM + "=" + COOKIE_REMOVAL_VALUE;
    cookieString += ";path=" + cookiePath;
    cookieString += ";expires=" + epoch.toUTCString();
    if (cookieDomain)
      cookieString += ";domain=" + cookieDomain + ";";
    cookieString += ";samesite=None;";
    if (this._outerWindow.location.protocol === "https:") {
      cookieString += " Secure ";
    }
    this._outerDocument.cookie = cookieString;
  };
  return CookieManager2;
}();

// node_modules/@yext/analytics/lib/esm/index.js
function provideAnalytics(config) {
  var httpRequester = new HttpRequester();
  return new SearchAnalyticsReporter(config, httpRequester);
}
function provideSearchAnalytics(config) {
  var httpRequester = new HttpRequester();
  return new SearchAnalyticsReporter(config, httpRequester);
}
function providePagesAnalytics(config) {
  var httpRequester = new HttpRequester();
  return new PagesAnalyticsReporter(config, httpRequester);
}
function provideConversionTrackingAnalytics(debug) {
  var httpRequester = new HttpRequester();
  return new ConversionTrackingReporter(httpRequester, debug);
}
export {
  SearchAnalyticsEventType as AnalyticsEventType,
  COOKIE_PARAM,
  CookieManager,
  CtaClick,
  DefaultPagesEventNames,
  DrivingDirectionEvent,
  PageViewEvent,
  PhoneCallEvent,
  SearchAnalyticsEventType,
  WebsiteEvent,
  provideAnalytics,
  provideConversionTrackingAnalytics,
  providePagesAnalytics,
  provideSearchAnalytics
};
//# sourceMappingURL=@yext_analytics.js.map
