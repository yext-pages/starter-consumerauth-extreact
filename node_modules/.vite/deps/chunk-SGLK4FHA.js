import {
  require_browser_ponyfill
} from "./chunk-GAJARCMZ.js";
import {
  require_jsx_runtime
} from "./chunk-Q73NGT2Y.js";
import {
  require_react
} from "./chunk-C7AOB6VP.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-IN47U6CF.js";

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React = require_react();
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState = React.useState, useEffect2 = React.useEffect, useLayoutEffect = React.useLayoutEffect, useDebugValue = React.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect2(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
        var useSyncExternalStore$2 = React.useSyncExternalStore !== void 0 ? React.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
var require_with_selector_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React = require_react();
        var shim = require_shim();
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useSyncExternalStore = shim.useSyncExternalStore;
        var useRef2 = React.useRef, useEffect2 = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue;
        function useSyncExternalStoreWithSelector2(subscribe, getSnapshot, getServerSnapshot, selector, isEqual3) {
          var instRef = useRef2(null);
          var inst;
          if (instRef.current === null) {
            inst = {
              hasValue: false,
              value: null
            };
            instRef.current = inst;
          } else {
            inst = instRef.current;
          }
          var _useMemo = useMemo(function() {
            var hasMemo = false;
            var memoizedSnapshot;
            var memoizedSelection;
            var memoizedSelector = function(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                var _nextSelection = selector(nextSnapshot);
                if (isEqual3 !== void 0) {
                  if (inst.hasValue) {
                    var currentSelection = inst.value;
                    if (isEqual3(currentSelection, _nextSelection)) {
                      memoizedSelection = currentSelection;
                      return currentSelection;
                    }
                  }
                }
                memoizedSelection = _nextSelection;
                return _nextSelection;
              }
              var prevSnapshot = memoizedSnapshot;
              var prevSelection = memoizedSelection;
              if (objectIs(prevSnapshot, nextSnapshot)) {
                return prevSelection;
              }
              var nextSelection = selector(nextSnapshot);
              if (isEqual3 !== void 0 && isEqual3(prevSelection, nextSelection)) {
                return prevSelection;
              }
              memoizedSnapshot = nextSnapshot;
              memoizedSelection = nextSelection;
              return nextSelection;
            };
            var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
            var getSnapshotWithSelector = function() {
              return memoizedSelector(getSnapshot());
            };
            var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            };
            return [getSnapshotWithSelector, getServerSnapshotWithSelector];
          }, [getSnapshot, getServerSnapshot, selector, isEqual3]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
          var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
          useEffect2(function() {
            inst.hasValue = true;
            inst.value = value;
          }, [value]);
          useDebugValue(value);
          return value;
        }
        exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_with_selector_development();
    }
  }
});

// node_modules/js-levenshtein/index.js
var require_js_levenshtein = __commonJS({
  "node_modules/js-levenshtein/index.js"(exports, module) {
    "use strict";
    module.exports = function() {
      function _min(d0, d1, d2, bx, ay) {
        return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;
      }
      return function(a2, b2) {
        if (a2 === b2) {
          return 0;
        }
        if (a2.length > b2.length) {
          var tmp = a2;
          a2 = b2;
          b2 = tmp;
        }
        var la = a2.length;
        var lb = b2.length;
        while (la > 0 && a2.charCodeAt(la - 1) === b2.charCodeAt(lb - 1)) {
          la--;
          lb--;
        }
        var offset = 0;
        while (offset < la && a2.charCodeAt(offset) === b2.charCodeAt(offset)) {
          offset++;
        }
        la -= offset;
        lb -= offset;
        if (la === 0 || lb < 3) {
          return lb;
        }
        var x2 = 0;
        var y2;
        var d0;
        var d1;
        var d2;
        var d3;
        var dd;
        var dy;
        var ay;
        var bx0;
        var bx1;
        var bx2;
        var bx3;
        var vector = [];
        for (y2 = 0; y2 < la; y2++) {
          vector.push(y2 + 1);
          vector.push(a2.charCodeAt(offset + y2));
        }
        var len = vector.length - 1;
        for (; x2 < lb - 3; ) {
          bx0 = b2.charCodeAt(offset + (d0 = x2));
          bx1 = b2.charCodeAt(offset + (d1 = x2 + 1));
          bx2 = b2.charCodeAt(offset + (d2 = x2 + 2));
          bx3 = b2.charCodeAt(offset + (d3 = x2 + 3));
          dd = x2 += 4;
          for (y2 = 0; y2 < len; y2 += 2) {
            dy = vector[y2];
            ay = vector[y2 + 1];
            d0 = _min(dy, d0, d1, bx0, ay);
            d1 = _min(d0, d1, d2, bx1, ay);
            d2 = _min(d1, d2, d3, bx2, ay);
            dd = _min(d2, d3, dd, bx3, ay);
            vector[y2] = dd;
            d3 = d2;
            d2 = d1;
            d1 = d0;
            d0 = dy;
          }
        }
        for (; x2 < lb; ) {
          bx0 = b2.charCodeAt(offset + (d0 = x2));
          dd = ++x2;
          for (y2 = 0; y2 < len; y2 += 2) {
            dy = vector[y2];
            vector[y2] = dd = _min(dy, d0, dd, bx0, vector[y2 + 1]);
            d0 = dy;
          }
        }
        return dd;
      };
    }();
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var Uint8Array = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, "WeakMap");
    module.exports = WeakMap;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual3(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual3;
  }
});

// node_modules/@yext/search-headless-react/lib/esm/useSearchActions.js
var import_react2 = __toESM(require_react());

// node_modules/@yext/search-headless-react/lib/esm/SearchHeadlessContext.js
var import_react = __toESM(require_react());
var SearchHeadlessContext = (0, import_react.createContext)({});

// node_modules/@yext/search-headless-react/lib/esm/useSearchActions.js
function useSearchActions() {
  const searchHeadless = (0, import_react2.useContext)(SearchHeadlessContext);
  if (searchHeadless.state === void 0) {
    throw new Error("Attempted to call useSearchActions() outside of SearchHeadlessProvider. Please ensure that 'useSearchActions()' is called within an SearchHeadlessProvider component.");
  }
  return searchHeadless;
}

// node_modules/@yext/search-headless-react/lib/esm/useSearchState.js
var import_react3 = __toESM(require_react());
var import_with_selector = __toESM(require_with_selector());
function useSearchState(stateSelector) {
  const search = (0, import_react3.useContext)(SearchHeadlessContext);
  if (search.state === void 0) {
    throw new Error("Attempted to call useSearchState() outside of SearchHeadlessProvider. Please ensure that 'useSearchState()' is called within an SearchHeadlessProvider component.");
  }
  const getSnapshot = (0, import_react3.useCallback)(() => search.state, [search.state]);
  const isMountedRef = (0, import_react3.useRef)(false);
  (0, import_react3.useEffect)(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  const subscribe = (0, import_react3.useCallback)((cb) => search.addListener({
    valueAccessor: (state) => state,
    callback: () => {
      if (!isMountedRef.current) {
        return;
      }
      cb();
    }
  }), [search]);
  const selectedState = (0, import_with_selector.useSyncExternalStoreWithSelector)(subscribe, getSnapshot, getSnapshot, stateSelector);
  return selectedState;
}

// node_modules/@yext/search-headless-react/lib/esm/useSearchUtilities.js
var import_react4 = __toESM(require_react());
function useSearchUtilities() {
  return (0, import_react4.useContext)(SearchHeadlessContext).utilities;
}

// node_modules/@yext/search-headless-react/lib/esm/SearchHeadlessProvider.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
function SearchHeadlessProvider(props) {
  const { children, searcher } = props;
  return (0, import_jsx_runtime.jsx)(SearchHeadlessContext.Provider, Object.assign({ value: searcher }, { children }), void 0);
}

// node_modules/@yext/search-core/dist/esm/src/SearchCore.js
var SearchCore = function() {
  function SearchCore2(searchService, questionSubmissionService, autoCompleteService) {
    this.searchService = searchService;
    this.questionSubmissionService = questionSubmissionService;
    this.autoCompleteService = autoCompleteService;
  }
  SearchCore2.prototype.universalSearch = function(request) {
    return this.searchService.universalSearch(request);
  };
  SearchCore2.prototype.verticalSearch = function(request) {
    return this.searchService.verticalSearch(request);
  };
  SearchCore2.prototype.submitQuestion = function(request) {
    return this.questionSubmissionService.submitQuestion(request);
  };
  SearchCore2.prototype.universalAutocomplete = function(request) {
    return this.autoCompleteService.universalAutocomplete(request);
  };
  SearchCore2.prototype.verticalAutocomplete = function(request) {
    return this.autoCompleteService.verticalAutocomplete(request);
  };
  SearchCore2.prototype.filterSearch = function(request) {
    return this.autoCompleteService.filterSearch(request);
  };
  return SearchCore2;
}();

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/response/directanswer/DirectAnswerType.js
var DirectAnswerType;
(function(DirectAnswerType2) {
  DirectAnswerType2["FeaturedSnippet"] = "FEATURED_SNIPPET";
  DirectAnswerType2["FieldValue"] = "FIELD_VALUE";
})(DirectAnswerType || (DirectAnswerType = {}));

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/response/Source.js
var Source;
(function(Source2) {
  Source2["KnowledgeManager"] = "KNOWLEDGE_MANAGER";
  Source2["Google"] = "GOOGLE_CSE";
  Source2["Bing"] = "BING_CSE";
  Source2["Zendesk"] = "ZENDESK";
  Source2["Algolia"] = "ALGOLIA";
  Source2["Custom"] = "CUSTOM_SEARCHER";
})(Source || (Source = {}));

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/ResultsFactory.js
var ResultsFactory = function() {
  function ResultsFactory2() {
  }
  ResultsFactory2.create = function(results, source) {
    var _this = this;
    if (!results) {
      return [];
    }
    return results.map(function(result, index) {
      var resultIndex = index + 1;
      switch (source) {
        case Source.KnowledgeManager:
          return _this.fromKnowledgeManager(result, resultIndex);
        case Source.Google:
          return _this.fromGoogleCustomSearchEngine(result, resultIndex);
        case Source.Bing:
          return _this.fromBingCustomSearchEngine(result, resultIndex);
        case Source.Zendesk:
          return _this.fromZendeskSearchEngine(result, resultIndex);
        case Source.Algolia:
          return _this.fromAlgoliaSearchEngine(result, resultIndex);
        default:
          return _this.fromCustomSource(result, resultIndex);
      }
    });
  };
  ResultsFactory2.fromKnowledgeManager = function(result, index) {
    var _a;
    var rawData = (_a = result.data) !== null && _a !== void 0 ? _a : result;
    return {
      rawData,
      source: Source.KnowledgeManager,
      index,
      name: rawData.name,
      description: rawData.description,
      link: rawData.website,
      id: rawData.id,
      distance: result.distance,
      distanceFromFilter: result.distanceFromFilter,
      highlightedFields: result.highlightedFields,
      entityType: rawData.type
    };
  };
  ResultsFactory2.fromGoogleCustomSearchEngine = function(result, index) {
    var _a;
    var rawData = (_a = result.data) !== null && _a !== void 0 ? _a : result;
    return {
      rawData,
      source: Source.Google,
      index,
      name: rawData.htmlTitle.replace(/(<([^>]+)>)/ig, ""),
      description: rawData.htmlSnippet,
      link: rawData.link
    };
  };
  ResultsFactory2.fromBingCustomSearchEngine = function(result, index) {
    var _a;
    var rawData = (_a = result.data) !== null && _a !== void 0 ? _a : result;
    return {
      rawData,
      source: Source.Bing,
      index,
      name: rawData.name,
      description: rawData.snippet,
      link: rawData.url
    };
  };
  ResultsFactory2.fromZendeskSearchEngine = function(result, index) {
    var _a;
    var rawData = (_a = result.data) !== null && _a !== void 0 ? _a : result;
    return {
      rawData,
      source: Source.Zendesk,
      index,
      name: rawData.title,
      description: rawData.snippet,
      link: rawData.html_url
    };
  };
  ResultsFactory2.fromAlgoliaSearchEngine = function(result, index) {
    var _a;
    var rawData = (_a = result.data) !== null && _a !== void 0 ? _a : result;
    return {
      rawData,
      source: Source.Algolia,
      index,
      name: rawData.name,
      id: rawData.objectID
    };
  };
  ResultsFactory2.fromCustomSource = function(result, index) {
    var _a;
    var rawData = (_a = result.data) !== null && _a !== void 0 ? _a : result;
    return {
      rawData,
      source: Source.Custom,
      index,
      name: rawData.name,
      description: rawData.description,
      link: rawData.website,
      id: rawData.id
    };
  };
  ResultsFactory2.fromDirectAnswer = function(result) {
    var _a;
    var rawData = (_a = result.fieldValues) !== null && _a !== void 0 ? _a : {};
    return {
      rawData,
      source: Source.KnowledgeManager,
      name: rawData.name,
      description: rawData.description,
      link: result.website,
      id: result.id,
      entityType: result.type
    };
  };
  return ResultsFactory2;
}();

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/response/directanswer/BuiltInFieldType.js
var BuiltInFieldType;
(function(BuiltInFieldType2) {
  BuiltInFieldType2["URL"] = "url";
  BuiltInFieldType2["ComplexURL"] = "complex_url";
  BuiltInFieldType2["IOSAppURL"] = "ios_app_url";
  BuiltInFieldType2["AndroidAppURL"] = "android_app_url";
  BuiltInFieldType2["FacebookURL"] = "facebook_url";
  BuiltInFieldType2["Email"] = "email";
  BuiltInFieldType2["InstagramHandle"] = "instagram_handle";
  BuiltInFieldType2["TwitterHandle"] = "twitter_handle";
  BuiltInFieldType2["Phone"] = "phone";
  BuiltInFieldType2["Address"] = "address";
  BuiltInFieldType2["Hours"] = "hours";
  BuiltInFieldType2["Decimal"] = "decimal";
  BuiltInFieldType2["Integer"] = "integer";
  BuiltInFieldType2["SingleLineText"] = "single_line_text";
  BuiltInFieldType2["RichText"] = "rich_text";
  BuiltInFieldType2["MultiLineText"] = "multi_line_text";
})(BuiltInFieldType || (BuiltInFieldType = {}));

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/createDirectAnswer.js
var __assign = function() {
  __assign = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function createDirectAnswer(data) {
  var isFieldValueDirectAnswer = (data === null || data === void 0 ? void 0 : data.type) === DirectAnswerType.FieldValue;
  var isFeaturedSnippetDirectAnswer = (data === null || data === void 0 ? void 0 : data.type) === DirectAnswerType.FeaturedSnippet;
  var commonDirectAnswerData = {
    value: data.answer.value,
    relatedResult: ResultsFactory.fromDirectAnswer(data.relatedItem.data),
    verticalKey: data.relatedItem.verticalConfigId,
    fieldType: Object.values(BuiltInFieldType).includes(data.answer.fieldType) ? data.answer.fieldType : "unknown"
  };
  if (isFieldValueDirectAnswer) {
    return __assign(__assign({ type: DirectAnswerType.FieldValue }, commonDirectAnswerData), { entityName: data.answer.entityName, fieldName: data.answer.fieldName, fieldApiName: data.answer.fieldApiName });
  } else if (isFeaturedSnippetDirectAnswer) {
    var fieldType = commonDirectAnswerData.fieldType;
    if (fieldType != BuiltInFieldType.MultiLineText && fieldType != BuiltInFieldType.RichText) {
      throw new Error("Unexpected fieldType for featured snippet direct answer: ".concat(fieldType));
    }
    return __assign(__assign({ type: DirectAnswerType.FeaturedSnippet }, commonDirectAnswerData), { snippet: data.answer.snippet });
  } else {
    throw new Error("The Search API returned an unknown direct answer type: ".concat(data === null || data === void 0 ? void 0 : data.type));
  }
}

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/common/Matcher.js
var Matcher;
(function(Matcher2) {
  Matcher2["Equals"] = "$eq";
  Matcher2["NotEquals"] = "!$eq";
  Matcher2["LessThan"] = "$lt";
  Matcher2["LessThanOrEqualTo"] = "$le";
  Matcher2["GreaterThan"] = "$gt";
  Matcher2["GreaterThanOrEqualTo"] = "$ge";
  Matcher2["Near"] = "$near";
  Matcher2["Between"] = "$between";
})(Matcher || (Matcher = {}));

// node_modules/@yext/search-core/dist/esm/src/transformers/core/createFieldValueFilter.js
function createFieldValueFilter(filter) {
  var fieldId = Object.keys(filter)[0];
  var matcher = Object.keys(filter[fieldId])[0];
  var value;
  if (matcher === Matcher.Between) {
    value = createNumberRangeValue(filter[fieldId][matcher]);
  } else {
    value = filter[fieldId][matcher];
  }
  return {
    fieldId,
    matcher,
    value
  };
}
function createNumberRangeValue(value) {
  var numberRangeValue = {};
  Object.keys(value).forEach(function(limitMatcher) {
    if (limitMatcher === Matcher.GreaterThan || limitMatcher === Matcher.GreaterThanOrEqualTo) {
      numberRangeValue.start = { matcher: limitMatcher, value: value[limitMatcher] };
    } else if (limitMatcher === Matcher.LessThan || limitMatcher === Matcher.LessThanOrEqualTo) {
      numberRangeValue.end = { matcher: limitMatcher, value: value[limitMatcher] };
    }
  });
  return numberRangeValue;
}

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/createFacets.js
function createFacets(facets) {
  if (!facets) {
    return [];
  }
  return facets.map(function(facet) {
    return {
      fieldId: facet.fieldId,
      displayName: facet.displayName,
      options: createFacetOptions(facet.options)
    };
  });
}
function createFacetOptions(options) {
  return options.map(function(option) {
    var filter = createFieldValueFilter(option.filter);
    return {
      displayName: option.displayName,
      count: option.count,
      selected: option.selected,
      matcher: filter.matcher,
      value: filter.value
    };
  });
}

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/createLocationBias.js
function createLocationBias(data) {
  return {
    latitude: data.latitude,
    longitude: data.longitude,
    displayName: data.locationDisplayName,
    method: data.accuracy
  };
}

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/createSpellCheck.js
function createSpellCheck(data) {
  return {
    originalQuery: data.originalQuery,
    correctedQuery: data.correctedQuery.value,
    type: data.type,
    matchedSubstrings: data.correctedQuery.matchedSubstrings
  };
}

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/createAppliedQueryFilter.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign2.apply(this, arguments);
};
function createAppliedQueryFilter(data) {
  return __assign2({ displayKey: data.displayKey, displayValue: data.displayValue, filter: createFieldValueFilter(data.filter), type: data.type }, data.details && { details: data.details });
}

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/createVerticalResults.js
function createVerticalResults(data) {
  var appliedQueryFilters = data.appliedQueryFilters ? data.appliedQueryFilters.map(createAppliedQueryFilter) : [];
  return {
    appliedQueryFilters,
    queryDurationMillis: data.queryDurationMillis,
    results: ResultsFactory.create(data.results, data.source),
    resultsCount: data.resultsCount,
    source: data.source,
    verticalKey: data.verticalConfigId
  };
}

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/createVerticalSearchResponse.js
function createVerticalSearchResponse(data) {
  var _a, _b, _c;
  return {
    verticalResults: createVerticalResults(data.response),
    queryId: data.response.queryId,
    directAnswer: data.response.directAnswer && createDirectAnswer(data.response.directAnswer),
    searchIntents: data.response.searchIntents,
    facets: createFacets(data.response.facets),
    spellCheck: data.response.spellCheck && createSpellCheck(data.response.spellCheck),
    locationBias: data.response.locationBias && createLocationBias(data.response.locationBias),
    allResultsForVertical: data.response.allResultsForVertical && createVerticalSearchResponse({ response: data.response.allResultsForVertical }),
    alternativeVerticals: (_b = (_a = data.response.alternativeVerticals) === null || _a === void 0 ? void 0 : _a.modules) === null || _b === void 0 ? void 0 : _b.map(createVerticalResults),
    uuid: (_c = data.meta) === null || _c === void 0 ? void 0 : _c.uuid,
    queryRulesActionsData: data.response.queryRulesActionsData
  };
}

// node_modules/@yext/search-core/dist/esm/src/models/core/Environment.js
var Environment;
(function(Environment2) {
  Environment2["PROD"] = "prod";
  Environment2["SANDBOX"] = "sbx";
})(Environment || (Environment = {}));

// node_modules/@yext/search-core/dist/esm/src/models/core/CloudRegion.js
var CloudRegion;
(function(CloudRegion2) {
  CloudRegion2["US"] = "us";
  CloudRegion2["EU"] = "eu";
})(CloudRegion || (CloudRegion = {}));

// node_modules/@yext/search-core/dist/esm/src/provideEndpoints.js
var defaultApiVersion = 20220511;
var EndpointsFactory = function() {
  function EndpointsFactory2(config) {
    this.environment = (config === null || config === void 0 ? void 0 : config.environment) || Environment.PROD;
    this.cloudRegion = (config === null || config === void 0 ? void 0 : config.cloudRegion) || CloudRegion.US;
  }
  EndpointsFactory2.prototype.getDomain = function() {
    return "https://".concat(this.environment, "-cdn.").concat(this.cloudRegion, ".yextapis.com");
  };
  EndpointsFactory2.prototype.getEndpoints = function() {
    return {
      universalSearch: "".concat(this.getDomain(), "/v2/accounts/me/search/query"),
      verticalSearch: "".concat(this.getDomain(), "/v2/accounts/me/search/vertical/query"),
      questionSubmission: "".concat(this.getDomain(), "/v2/accounts/me/createQuestion"),
      status: "https://answersstatus.pagescdn.com",
      universalAutocomplete: "".concat(this.getDomain(), "/v2/accounts/me/search/autocomplete"),
      verticalAutocomplete: "".concat(this.getDomain(), "/v2/accounts/me/search/vertical/autocomplete"),
      filterSearch: "".concat(this.getDomain(), "/v2/accounts/me/search/filtersearch")
    };
  };
  return EndpointsFactory2;
}();
var SandboxEndpoints = new EndpointsFactory({ environment: Environment.SANDBOX, cloudRegion: CloudRegion.US }).getEndpoints();

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/request/QuerySource.js
var QuerySource;
(function(QuerySource2) {
  QuerySource2["Standard"] = "STANDARD";
  QuerySource2["Overlay"] = "OVERLAY";
  QuerySource2["Autocomplete"] = "AUTOCOMPLETE";
})(QuerySource || (QuerySource = {}));

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/createFailedVertical.js
function createFailedVertical(data) {
  return {
    verticalKey: data.verticalConfigId,
    errorType: data.errorType,
    queryDurationMillis: data.queryDurationMillis,
    details: data.details
  };
}

// node_modules/@yext/search-core/dist/esm/src/transformers/searchservice/createUniversalSearchResponse.js
function createUniversalSearchResponse(data) {
  var _a;
  var verticalResults = Array.isArray(data.response.modules) ? data.response.modules.map(createVerticalResults) : [];
  return {
    verticalResults,
    queryId: data.response.queryId,
    directAnswer: data.response.directAnswer && createDirectAnswer(data.response.directAnswer),
    searchIntents: data.response.searchIntents,
    spellCheck: data.response.spellCheck && createSpellCheck(data.response.spellCheck),
    locationBias: data.response.locationBias && createLocationBias(data.response.locationBias),
    uuid: data.meta.uuid,
    queryRulesActionsData: data.response.queryRulesActionsData,
    failedVerticals: (_a = data.response.failedVerticals) === null || _a === void 0 ? void 0 : _a.map(createFailedVertical)
  };
}

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/common/NumberRangeValue.js
function isNumberRangeValue(data) {
  return typeof data === "object" && !!data && ("start" in data || "end" in data);
}

// node_modules/@yext/search-core/dist/esm/src/serializers/serializeStaticFilters.js
function serializeStaticFilters(filter) {
  if (filter.kind !== "fieldValue") {
    var shapedFilter = shapeCombinedFilterForApi(filter.combinator, filter.filters);
    return shapedFilter && JSON.stringify(shapedFilter);
  }
  return JSON.stringify(shapeFieldValueFilterForApi(filter));
}
function shapeCombinedFilterForApi(combinator, filters) {
  var _a;
  var shapedFilters = [];
  for (var _i = 0, filters_1 = filters; _i < filters_1.length; _i++) {
    var filter = filters_1[_i];
    if (filter.kind !== "fieldValue") {
      var shapedFilter = shapeCombinedFilterForApi(filter.combinator, filter.filters);
      shapedFilter && shapedFilters.push(shapedFilter);
    } else {
      shapedFilters.push(shapeFieldValueFilterForApi(filter));
    }
  }
  return shapedFilters.length === 0 ? void 0 : shapedFilters.length === 1 ? shapedFilters[0] : (_a = {}, _a[combinator] = shapedFilters, _a);
}
function shapeFieldValueFilterForApi(filter) {
  var _a, _b;
  var filterValues = {};
  if (isNumberRangeValue(filter.value)) {
    if (filter.value.start) {
      filterValues[filter.value.start.matcher] = filter.value.start.value;
    }
    if (filter.value.end) {
      filterValues[filter.value.end.matcher] = filter.value.end.value;
    }
  } else {
    filterValues = (_a = {}, _a[filter.matcher] = filter.value, _a);
  }
  return _b = {}, _b[filter.fieldId] = filterValues, _b;
}

// node_modules/@yext/search-core/dist/esm/src/serializers/serializeFacets.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign3.apply(this, arguments);
};
function serializeFacets(filters) {
  return JSON.stringify(filters.reduce(function(obj, facet) {
    var fieldId = facet.fieldId;
    var shapedFacets = shapeFacetOptionArrayForApi(facet.options, fieldId);
    obj[fieldId] = shapedFacets;
    return obj;
  }, {}));
}
function shapeFacetOptionArrayForApi(options, fieldId) {
  return options.map(function(option) {
    return shapeFieldValueFilterForApi(__assign3(__assign3({}, option), { fieldId }));
  });
}

// node_modules/@yext/search-core/dist/esm/package.json
var package_default = {
  name: "@yext/search-core",
  version: "2.3.0",
  description: "Typescript Networking Library for the Yext Search API",
  main: "./dist/commonjs/src/index.js",
  module: "./dist/esm/src/index.js",
  types: "./dist/bundle.d.ts",
  keywords: [
    "networking",
    "search api",
    "search",
    "browser",
    "nodejs",
    "typescript",
    "commonjs",
    "es6",
    "yext"
  ],
  files: [
    "dist",
    "legacy",
    "lib",
    "src",
    "THIRD-PARTY-NOTICES"
  ],
  engines: {
    node: ">=12"
  },
  scripts: {
    test: "npm run lint && jest",
    lint: "eslint . --max-warnings=0",
    "tsc-cjs": "tsc -p tsconfig.cjs.json",
    "tsc-esm": "tsc -p tsconfig.esm.json",
    tsc: "npm run tsc-cjs && npm run tsc-esm",
    "build-legacy-bundle": "npx webpack",
    build: "rm -rf dist/** && npm run tsc && npm run build-legacy-bundle && npm run api-extractor && npm run generate-docs",
    "build-ci": "npm run tsc-cjs && npm run api-extractor && npm run generate-docs",
    dev: "npm run tsc-esm -- --watch",
    prepublishOnly: "npm run build",
    "api-extractor": "api-extractor run --local --verbose",
    "generate-docs": "api-documenter markdown --input-folder temp --output-folder docs && rm -rf temp && npm run generate-notices",
    "generate-notices": "generate-license-file --input package.json --output THIRD-PARTY-NOTICES --overwrite"
  },
  repository: {
    type: "git",
    url: "https://github.com/yext/search-core.git"
  },
  author: "slapshot@yext.com",
  license: "BSD-3-Clause",
  bugs: {
    url: "https://github.com/yext/search-core/issues"
  },
  homepage: "https://github.com/yext/search-core#readme",
  devDependencies: {
    "@babel/core": "^7.12.3",
    "@babel/plugin-transform-runtime": "^7.12.10",
    "@babel/preset-env": "^7.12.1",
    "@babel/preset-typescript": "^7.12.1",
    "@microsoft/api-documenter": "^7.13.76",
    "@microsoft/api-extractor": "^7.19.2",
    "@types/jest": "^28.1.1",
    "@typescript-eslint/eslint-plugin": "^5.16.0",
    "@typescript-eslint/parser": "^5.16.0",
    "@yext/eslint-config-slapshot": "^0.4.0",
    "@yext/eslint-plugin-export-star": "^1.0.2",
    "babel-jest": "^28.1.0",
    "babel-loader": "^8.3.0",
    eslint: "^8.11.0",
    "eslint-config-react-app": "^7.0.1",
    "eslint-plugin-tsdoc": "^0.2.14",
    "generate-license-file": "^1.3.0",
    jest: "^28.1.0",
    "jest-environment-jsdom": "^28.1.0",
    "ts-loader": "^8.4.0",
    typescript: "^4.0.3",
    webpack: "^5.73.0",
    "webpack-cli": "^4.4.0"
  },
  dependencies: {
    "@babel/runtime-corejs3": "^7.12.5",
    "cross-fetch": "^3.1.5"
  },
  jest: {
    bail: 0,
    collectCoverage: true,
    collectCoverageFrom: [
      "src/**",
      "!src/models/**/*.ts"
    ],
    verbose: true,
    moduleFileExtensions: [
      "js",
      "ts"
    ],
    moduleDirectories: [
      "node_modules",
      "<rootDir>"
    ],
    testEnvironment: "jsdom",
    testPathIgnorePatterns: [
      "./tests/mocks/*"
    ],
    testMatch: [
      "<rootDir>/tests/**/*.[jt]s"
    ]
  }
};

// node_modules/@yext/search-core/dist/esm/src/utils/getClientSdk.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign4.apply(this, arguments);
};
var version = package_default.version;
function getClientSdk(additionalHttpHeaders) {
  var _a;
  var coreAgent = { ANSWERS_CORE: version };
  if (!additionalHttpHeaders) {
    return coreAgent;
  }
  var customClientSdk = (_a = additionalHttpHeaders["Client-SDK"]) !== null && _a !== void 0 ? _a : {};
  return Object.entries(customClientSdk).reduce(function(clientSdk, _a2) {
    var _b;
    var agent = _a2[0], version3 = _a2[1];
    return version3 ? __assign4(__assign4({}, clientSdk), (_b = {}, _b[agent] = version3, _b)) : clientSdk;
  }, coreAgent);
}

// node_modules/@yext/search-core/dist/esm/src/infra/SearchServiceImpl.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign5.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e2) {
        op = [6, e2];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var SearchServiceImpl = function() {
  function SearchServiceImpl2(config, httpService, apiResponseValidator) {
    this.config = config;
    this.httpService = httpService;
    this.apiResponseValidator = apiResponseValidator;
    this.universalSearchEndpoint = config.endpoints.universalSearch;
    this.verticalSearchEndpoint = config.endpoints.verticalSearch;
  }
  SearchServiceImpl2.prototype.universalSearch = function(request) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function() {
      var queryParams, response, _e, validationResult;
      return __generator(this, function(_f) {
        switch (_f.label) {
          case 0:
            queryParams = __assign5(__assign5(__assign5({ input: request.query, experienceKey: this.config.experienceKey }, "apiKey" in this.config && { api_key: this.config.apiKey }), { v: defaultApiVersion, version: this.config.experienceVersion, limit: JSON.stringify(request.limit), location: this.stringifyLatLong(request.location), locale: this.config.locale, skipSpellCheck: request.skipSpellCheck, session_id: request.sessionId, sessionTrackingEnabled: request.sessionTrackingEnabled, queryTrigger: request.queryTrigger, context: JSON.stringify(request.context), referrerPageUrl: request.referrerPageUrl, source: request.querySource || QuerySource.Standard, visitorId: (_a = this.config.visitor) === null || _a === void 0 ? void 0 : _a.id, visitorIdMethod: (_b = this.config.visitor) === null || _b === void 0 ? void 0 : _b.idMethod, restrictVerticals: (_c = request.restrictVerticals) === null || _c === void 0 ? void 0 : _c.join(",") }), (_d = this.config) === null || _d === void 0 ? void 0 : _d.additionalQueryParams);
            if (!("token" in this.config))
              return [3, 2];
            return [4, this.httpService.get(this.universalSearchEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders), this.config.token)];
          case 1:
            _e = _f.sent();
            return [3, 4];
          case 2:
            return [4, this.httpService.get(this.universalSearchEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders))];
          case 3:
            _e = _f.sent();
            _f.label = 4;
          case 4:
            response = _e;
            validationResult = this.apiResponseValidator.validate(response);
            if (validationResult instanceof Error) {
              return [2, Promise.reject(validationResult)];
            }
            return [2, createUniversalSearchResponse(response)];
        }
      });
    });
  };
  SearchServiceImpl2.prototype.verticalSearch = function(request) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function() {
      var queryParams, response, _e, validationResult;
      return __generator(this, function(_f) {
        switch (_f.label) {
          case 0:
            queryParams = __assign5(__assign5(__assign5({ experienceKey: this.config.experienceKey }, "apiKey" in this.config && { api_key: this.config.apiKey }), { v: defaultApiVersion, version: this.config.experienceVersion, locale: this.config.locale, input: request.query, location: this.stringifyLatLong(request.location), verticalKey: request.verticalKey, filters: request.staticFilter && serializeStaticFilters(request.staticFilter), limit: request.limit, offset: request.offset, retrieveFacets: request.retrieveFacets, facetFilters: request.facets && serializeFacets(request.facets), skipSpellCheck: request.skipSpellCheck, queryTrigger: request.queryTrigger, session_id: request.sessionId, sessionTrackingEnabled: request.sessionTrackingEnabled, sortBys: JSON.stringify(request.sortBys || []), context: JSON.stringify(request.context), referrerPageUrl: request.referrerPageUrl, source: request.querySource || QuerySource.Standard, locationRadius: (_a = request.locationRadius) === null || _a === void 0 ? void 0 : _a.toString(), queryId: request.queryId, visitorId: (_b = this.config.visitor) === null || _b === void 0 ? void 0 : _b.id, visitorIdMethod: (_c = this.config.visitor) === null || _c === void 0 ? void 0 : _c.idMethod }), (_d = this.config) === null || _d === void 0 ? void 0 : _d.additionalQueryParams);
            if (!("token" in this.config))
              return [3, 2];
            return [4, this.httpService.get(this.verticalSearchEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders), this.config.token)];
          case 1:
            _e = _f.sent();
            return [3, 4];
          case 2:
            return [4, this.httpService.get(this.verticalSearchEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders))];
          case 3:
            _e = _f.sent();
            _f.label = 4;
          case 4:
            response = _e;
            validationResult = this.apiResponseValidator.validate(response);
            if (validationResult instanceof Error) {
              return [2, Promise.reject(validationResult)];
            }
            return [2, createVerticalSearchResponse(response)];
        }
      });
    });
  };
  SearchServiceImpl2.prototype.stringifyLatLong = function(latLong) {
    if (!latLong) {
      return void 0;
    }
    return "".concat(latLong.latitude, ",").concat(latLong.longitude);
  };
  return SearchServiceImpl2;
}();

// node_modules/@yext/search-core/dist/esm/src/infra/QuestionSubmissionServiceImpl.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign6.apply(this, arguments);
};
var __awaiter2 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e2) {
        op = [6, e2];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var QuestionSubmissionServiceImpl = function() {
  function QuestionSubmissionServiceImpl2(config, httpService, apiResponseValidator) {
    this.config = config;
    this.httpService = httpService;
    this.apiResponseValidator = apiResponseValidator;
    this.endpoint = this.config.endpoints.questionSubmission;
  }
  QuestionSubmissionServiceImpl2.prototype.submitQuestion = function(request) {
    var _a;
    return __awaiter2(this, void 0, void 0, function() {
      var queryParams, body, response, _b, validationResult;
      return __generator2(this, function(_c) {
        switch (_c.label) {
          case 0:
            queryParams = __assign6(__assign6(__assign6({ v: defaultApiVersion }, "apiKey" in this.config && { api_key: this.config.apiKey }), { sessionTrackingEnabled: request.sessionTrackingEnabled }), (_a = this.config) === null || _a === void 0 ? void 0 : _a.additionalQueryParams);
            body = {
              email: request.email,
              entityId: request.entityId,
              name: request.name,
              questionDescription: request.questionDescription,
              questionLanguage: this.config.locale,
              questionText: request.questionText,
              site: "FIRSTPARTY"
            };
            if (!("token" in this.config))
              return [3, 2];
            return [4, this.httpService.post(this.endpoint, queryParams, body, getClientSdk(request.additionalHttpHeaders), this.config.token)];
          case 1:
            _b = _c.sent();
            return [3, 4];
          case 2:
            return [4, this.httpService.post(this.endpoint, queryParams, body, getClientSdk(request.additionalHttpHeaders))];
          case 3:
            _b = _c.sent();
            _c.label = 4;
          case 4:
            response = _b;
            validationResult = this.apiResponseValidator.validate(response);
            if (validationResult instanceof Error) {
              return [2, Promise.reject(validationResult)];
            }
            return [2, {
              uuid: response.meta.uuid
            }];
        }
      });
    });
  };
  return QuestionSubmissionServiceImpl2;
}();

// node_modules/@yext/search-core/dist/esm/src/infra/HttpServiceImpl.js
var import_cross_fetch = __toESM(require_browser_ponyfill());

// node_modules/@yext/search-core/dist/esm/src/utils/urlutils.js
function addParamsToURL(url, params) {
  var parsedUrl = new URL(url);
  var urlParams = new URLSearchParams(parsedUrl.search.substring(1));
  var sanitizedParams = sanitizeQueryParams(params);
  for (var key in sanitizedParams) {
    urlParams.append(key, sanitizedParams[key].toString());
  }
  var updatedUrl = parsedUrl.origin + parsedUrl.pathname;
  var paramsString = urlParams.toString();
  if (paramsString) {
    updatedUrl += "?" + paramsString;
  }
  return updatedUrl;
}
function sanitizeQueryParams(params) {
  Object.keys(params).forEach(function(key) {
    if (params[key] === void 0 || params[key] === null) {
      delete params[key];
    }
  });
  return params;
}

// node_modules/@yext/search-core/dist/esm/src/infra/HttpServiceImpl.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign7.apply(this, arguments);
};
var RequestMethods;
(function(RequestMethods2) {
  RequestMethods2["GET"] = "get";
  RequestMethods2["POST"] = "post";
})(RequestMethods || (RequestMethods = {}));
var HttpServiceImpl = function() {
  function HttpServiceImpl2() {
  }
  HttpServiceImpl2.prototype.get = function(url, queryParams, clientSdk, authToken) {
    return fetch(url, queryParams, {
      method: RequestMethods.GET,
      mode: "cors",
      credentials: "include",
      headers: __assign7({ "Client-SDK": formatAsHttpHeader(clientSdk) }, authToken && { Authorization: "Bearer ".concat(authToken) })
    }).then(function(res) {
      return res.json();
    });
  };
  HttpServiceImpl2.prototype.post = function(url, queryParams, body, clientSdk, authToken) {
    var sanitizedBodyParams = sanitizeQueryParams(body);
    return fetch(url, queryParams, __assign7(__assign7({ method: RequestMethods.POST, body: JSON.stringify(sanitizedBodyParams), mode: "cors" }, authToken && { credentials: "include" }), { headers: __assign7({ "Client-SDK": formatAsHttpHeader(clientSdk), "Content-Type": "application/json" }, authToken && { Authorization: "Bearer ".concat(authToken) }) })).then(function(res) {
      return res.json();
    });
  };
  return HttpServiceImpl2;
}();
function fetch(url, queryParams, reqInit) {
  var urlWithParams = addParamsToURL(url, queryParams);
  if (typeof window !== "undefined" && window.fetch) {
    return window.fetch(urlWithParams, reqInit);
  }
  return (0, import_cross_fetch.default)(urlWithParams, reqInit);
}
function formatAsHttpHeader(clientSdk) {
  return Object.keys(clientSdk).reduce(function(combinedHeader, currentKey) {
    var httpFormattedHeader = "".concat(currentKey, "=").concat(clientSdk[currentKey]);
    return combinedHeader ? "".concat(combinedHeader, ", ").concat(httpFormattedHeader) : httpFormattedHeader;
  }, "");
}

// node_modules/@yext/search-core/dist/esm/src/models/searchapi/SearchError.js
var __extends = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d3[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var SearchError = function(_super) {
  __extends(SearchError2, _super);
  function SearchError2(message, code, type) {
    var _this = _super.call(this, message) || this;
    _this.message = message;
    _this.code = code;
    _this.type = type;
    Object.setPrototypeOf(_this, SearchError2.prototype);
    return _this;
  }
  return SearchError2;
}(Error);

// node_modules/@yext/search-core/dist/esm/src/transformers/autocompleteservice/createAutocompleteResult.js
function createAutocompleteResult(result) {
  var _a;
  var relatedItem = result.relatedItem ? ResultsFactory.create([result.relatedItem], Source.KnowledgeManager)[0] : result.relatedItem;
  return {
    filter: result.filter && createFieldValueFilter(result.filter),
    key: result.key,
    matchedSubstrings: result.matchedSubstrings || [],
    value: result.value,
    relatedItem,
    verticalKeys: result.verticalKeys,
    inputIntents: (_a = result.queryIntents) !== null && _a !== void 0 ? _a : []
  };
}

// node_modules/@yext/search-core/dist/esm/src/transformers/autocompleteservice/createAutocompleteResponse.js
function createAutocompleteResponse(data) {
  var _a, _b;
  if (!data.response) {
    throw new Error("The autocomplete data does not contain a response property");
  }
  if (!Object.keys(data.response).length) {
    throw new Error("The autocomplete response is empty");
  }
  var response = data.response;
  var responseResults = response.results.map(createAutocompleteResult);
  var inputIntents = (_b = (_a = response.input) === null || _a === void 0 ? void 0 : _a.queryIntents) !== null && _b !== void 0 ? _b : [];
  return {
    results: responseResults,
    queryId: response.queryId,
    inputIntents: inputIntents || [],
    uuid: data.meta.uuid
  };
}
function createFilterSearchResponse(data) {
  if (!data.response) {
    throw new Error("The autocomplete data does not contain a response property");
  }
  if (!Object.keys(data.response).length) {
    throw new Error("The autocomplete response is empty");
  }
  var response = data.response;
  if (response.failedVerticals && response.failedVerticals.length != 0) {
    var error = response.failedVerticals[0];
    throw new SearchError(error.details.description, error.details.responseCode, error.errorType);
  }
  var sections = response.sections.map(function(section) {
    return {
      label: section.label,
      results: section.results.map(createAutocompleteResult)
    };
  });
  return {
    sections,
    queryId: response.queryId,
    businessId: response.businessId,
    uuid: data.meta.uuid
  };
}

// node_modules/@yext/search-core/dist/esm/src/serializers/serializeFilterSearch.js
function serializeSearchParameterFields(fields) {
  return fields.map(function(_a) {
    var fieldApiName = _a.fieldApiName, entityType = _a.entityType, fetchEntities = _a.fetchEntities;
    return {
      fieldId: fieldApiName,
      entityTypeId: entityType,
      shouldFetchEntities: fetchEntities
    };
  });
}
function serializeExcludedFields(excludedFields) {
  return excludedFields === null || excludedFields === void 0 ? void 0 : excludedFields.map(function(_a) {
    var _b, _c;
    var fieldId = _a.fieldId, matcher = _a.matcher, value = _a.value;
    return _b = {}, _b[fieldId] = (_c = {}, _c[matcher] = value, _c), _b;
  });
}

// node_modules/@yext/search-core/dist/esm/src/infra/AutocompleteServiceImpl.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign8.apply(this, arguments);
};
var __awaiter3 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator3 = function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e2) {
        op = [6, e2];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var AutocompleteServiceImpl = function() {
  function AutocompleteServiceImpl2(config, httpRequester, apiResponseValidator) {
    this.config = config;
    this.httpService = httpRequester;
    this.apiResponseValidator = apiResponseValidator;
    this.universalEndpoint = this.config.endpoints.universalAutocomplete;
    this.verticalEndpoint = this.config.endpoints.verticalAutocomplete;
    this.filterEndpoint = this.config.endpoints.filterSearch;
  }
  AutocompleteServiceImpl2.prototype.universalAutocomplete = function(request) {
    var _a, _b, _c;
    return __awaiter3(this, void 0, void 0, function() {
      var queryParams, response, _d, validationResult;
      return __generator3(this, function(_e) {
        switch (_e.label) {
          case 0:
            queryParams = __assign8(__assign8(__assign8({ input: request.input, experienceKey: this.config.experienceKey }, "apiKey" in this.config && { api_key: this.config.apiKey }), { v: defaultApiVersion, version: this.config.experienceVersion, locale: this.config.locale, sessionTrackingEnabled: request.sessionTrackingEnabled, visitorId: (_a = this.config.visitor) === null || _a === void 0 ? void 0 : _a.id, visitorIdMethod: (_b = this.config.visitor) === null || _b === void 0 ? void 0 : _b.idMethod }), (_c = this.config) === null || _c === void 0 ? void 0 : _c.additionalQueryParams);
            if (!("token" in this.config))
              return [3, 2];
            return [4, this.httpService.get(this.universalEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders), this.config.token)];
          case 1:
            _d = _e.sent();
            return [3, 4];
          case 2:
            return [4, this.httpService.get(this.universalEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders))];
          case 3:
            _d = _e.sent();
            _e.label = 4;
          case 4:
            response = _d;
            validationResult = this.apiResponseValidator.validate(response);
            if (validationResult instanceof Error) {
              return [2, Promise.reject(validationResult)];
            }
            return [2, createAutocompleteResponse(response)];
        }
      });
    });
  };
  AutocompleteServiceImpl2.prototype.verticalAutocomplete = function(request) {
    var _a, _b, _c;
    return __awaiter3(this, void 0, void 0, function() {
      var queryParams, response, _d, validationResult;
      return __generator3(this, function(_e) {
        switch (_e.label) {
          case 0:
            queryParams = __assign8(__assign8(__assign8({ input: request.input, experienceKey: this.config.experienceKey }, "apiKey" in this.config && { api_key: this.config.apiKey }), { v: defaultApiVersion, version: this.config.experienceVersion, locale: this.config.locale, verticalKey: request.verticalKey, sessionTrackingEnabled: request.sessionTrackingEnabled, visitorId: (_a = this.config.visitor) === null || _a === void 0 ? void 0 : _a.id, visitorIdMethod: (_b = this.config.visitor) === null || _b === void 0 ? void 0 : _b.idMethod }), (_c = this.config) === null || _c === void 0 ? void 0 : _c.additionalQueryParams);
            if (!("token" in this.config))
              return [3, 2];
            return [4, this.httpService.get(this.verticalEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders), this.config.token)];
          case 1:
            _d = _e.sent();
            return [3, 4];
          case 2:
            return [4, this.httpService.get(this.verticalEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders))];
          case 3:
            _d = _e.sent();
            _e.label = 4;
          case 4:
            response = _d;
            validationResult = this.apiResponseValidator.validate(response);
            if (validationResult instanceof Error) {
              return [2, Promise.reject(validationResult)];
            }
            return [2, createAutocompleteResponse(response)];
        }
      });
    });
  };
  AutocompleteServiceImpl2.prototype.filterSearch = function(request) {
    var _a, _b, _c;
    return __awaiter3(this, void 0, void 0, function() {
      var searchParams, queryParams, response, _d, validationResult;
      return __generator3(this, function(_e) {
        switch (_e.label) {
          case 0:
            searchParams = {
              sectioned: request.sectioned,
              fields: serializeSearchParameterFields(request.fields)
            };
            queryParams = __assign8(__assign8(__assign8({ input: request.input, experienceKey: this.config.experienceKey }, "apiKey" in this.config && { api_key: this.config.apiKey }), { v: defaultApiVersion, version: this.config.experienceVersion, locale: this.config.locale, search_parameters: JSON.stringify(searchParams), verticalKey: request.verticalKey, sessionTrackingEnabled: request.sessionTrackingEnabled, visitorId: (_a = this.config.visitor) === null || _a === void 0 ? void 0 : _a.id, visitorIdMethod: (_b = this.config.visitor) === null || _b === void 0 ? void 0 : _b.idMethod, excluded: JSON.stringify(serializeExcludedFields(request.excluded)) }), (_c = this.config) === null || _c === void 0 ? void 0 : _c.additionalQueryParams);
            if (!("token" in this.config))
              return [3, 2];
            return [4, this.httpService.get(this.filterEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders), this.config.token)];
          case 1:
            _d = _e.sent();
            return [3, 4];
          case 2:
            return [4, this.httpService.get(this.filterEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders))];
          case 3:
            _d = _e.sent();
            _e.label = 4;
          case 4:
            response = _d;
            validationResult = this.apiResponseValidator.validate(response);
            if (validationResult instanceof Error) {
              return [2, Promise.reject(validationResult)];
            }
            return [2, createFilterSearchResponse(response)];
        }
      });
    });
  };
  return AutocompleteServiceImpl2;
}();

// node_modules/@yext/search-core/dist/esm/src/validation/ApiResponseValidator.js
var ApiResponseValidator = function() {
  function ApiResponseValidator2() {
  }
  ApiResponseValidator2.prototype.validate = function(apiResponse) {
    var testFunctions = [
      this.validateResponseProp,
      this.validateMetaProp,
      this.checkForApiErrors
    ];
    var testResults = testFunctions.map(function(testFn) {
      return testFn(apiResponse);
    });
    return testResults.find(function(result) {
      return result;
    });
  };
  ApiResponseValidator2.prototype.validateResponseProp = function(apiResponse) {
    if (!apiResponse.response) {
      return new SearchError("Malformed Search API response: missing response property.");
    }
  };
  ApiResponseValidator2.prototype.validateMetaProp = function(apiResponse) {
    if (!apiResponse.meta) {
      return new SearchError("Malformed Search API response: missing meta property.");
    }
  };
  ApiResponseValidator2.prototype.checkForApiErrors = function(apiResponse) {
    var _a, _b;
    if (((_b = (_a = apiResponse.meta) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b.length) >= 1) {
      var error = apiResponse.meta.errors[0];
      return new SearchError(error.message, error.code, error.type);
    }
  };
  return ApiResponseValidator2;
}();

// node_modules/@yext/search-core/dist/esm/src/provideCore.js
var __assign9 = function() {
  __assign9 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign9.apply(this, arguments);
};
function provideCore(config) {
  if ("apiKey" in config && "token" in config) {
    throw new Error("Both apiKey and token are present. Only one authentication method should be provided");
  }
  var defaultedConfig = __assign9(__assign9({}, config), { endpoints: __assign9(__assign9({}, new EndpointsFactory(config).getEndpoints()), config.endpoints) });
  var httpService = new HttpServiceImpl();
  var apiResponseValidator = new ApiResponseValidator();
  var searchService = new SearchServiceImpl(defaultedConfig, httpService, apiResponseValidator);
  var questionSubmissionService = new QuestionSubmissionServiceImpl(defaultedConfig, httpService, apiResponseValidator);
  var autoCompleteService = new AutocompleteServiceImpl(defaultedConfig, httpService, apiResponseValidator);
  return new SearchCore(searchService, questionSubmissionService, autoCompleteService);
}

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/request/StaticFilter.js
var FilterCombinator;
(function(FilterCombinator2) {
  FilterCombinator2["AND"] = "$and";
  FilterCombinator2["OR"] = "$or";
})(FilterCombinator || (FilterCombinator = {}));

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/request/QueryTrigger.js
var QueryTrigger;
(function(QueryTrigger2) {
  QueryTrigger2["Initialize"] = "initialize";
  QueryTrigger2["Suggest"] = "suggest";
})(QueryTrigger || (QueryTrigger = {}));

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/request/SortType.js
var SortType;
(function(SortType2) {
  SortType2["Field"] = "FIELD";
  SortType2["EntityDistance"] = "ENTITY_DISTANCE";
  SortType2["Relevance"] = "RELEVANCE";
})(SortType || (SortType = {}));

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/request/Direction.js
var Direction;
(function(Direction2) {
  Direction2["Ascending"] = "ASC";
  Direction2["Descending"] = "DESC";
})(Direction || (Direction = {}));

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/response/AppliedQueryFilterType.js
var AppliedQueryFilterType;
(function(AppliedQueryFilterType2) {
  AppliedQueryFilterType2["FieldValue"] = "FIELD_VALUE";
  AppliedQueryFilterType2["Place"] = "PLACE";
  AppliedQueryFilterType2["Intent"] = "INTENT";
})(AppliedQueryFilterType || (AppliedQueryFilterType = {}));

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/response/LocationBias.js
var LocationBiasMethod;
(function(LocationBiasMethod2) {
  LocationBiasMethod2["Ip"] = "IP";
  LocationBiasMethod2["Device"] = "DEVICE";
  LocationBiasMethod2["Unknown"] = "UNKNOWN";
})(LocationBiasMethod || (LocationBiasMethod = {}));

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/response/SearchIntent.js
var SearchIntent;
(function(SearchIntent2) {
  SearchIntent2["NearMe"] = "NEAR_ME";
})(SearchIntent || (SearchIntent = {}));

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/response/SpellCheck.js
var SpellCheckType;
(function(SpellCheckType2) {
  SpellCheckType2["Suggest"] = "SUGGEST";
  SpellCheckType2["AutoCorrect"] = "AUTOCORRECT";
  SpellCheckType2["Combine"] = "COMBINE";
})(SpellCheckType || (SpellCheckType = {}));

// node_modules/@yext/search-core/dist/esm/src/models/searchservice/response/ErrorType.js
var ErrorType;
(function(ErrorType2) {
  ErrorType2["Timeout"] = "TIMEOUT";
  ErrorType2["BackendError"] = "BACKEND_ERROR";
  ErrorType2["InvalidConfig"] = "INVALID_CONFIG";
  ErrorType2["InvalidQuery"] = "INVALID_QUERY";
})(ErrorType || (ErrorType = {}));

// node_modules/@yext/search-headless/dist/esm/src/http-manager.js
var HttpManager = class {
  constructor() {
    this.latestRequestIds = {
      universalQuery: 0,
      verticalQuery: 0
    };
    this.latestResponseIds = {
      universalQuery: 0,
      verticalQuery: 0
    };
  }
  updateRequestId(requestName) {
    return ++this.latestRequestIds[requestName];
  }
  setResponseId(responseName, responseId) {
    this.latestResponseIds[responseName] = responseId;
  }
  getLatestResponseId(responseName) {
    return this.latestResponseIds[responseName];
  }
  processRequestId(requestName, requestId) {
    const latestResponseId = this.getLatestResponseId(requestName);
    if (requestId > latestResponseId) {
      this.setResponseId(requestName, requestId);
      return true;
    }
    return false;
  }
};

// node_modules/@yext/search-headless/dist/esm/src/redux-state-manager.js
var ReduxStateManager = class {
  constructor(store2, headlessId, headlessReducerManager2) {
    this.store = store2;
    this.headlessId = headlessId;
    headlessReducerManager2.addAnswersReducer(this.headlessId);
    store2.replaceReducer(headlessReducerManager2.getParentReducer());
  }
  getState() {
    const state = this.store.getState();
    return state[this.headlessId];
  }
  dispatchEvent(type, payload) {
    const answersActionType = type === "set-state" ? "set-state" : this.headlessId + "/" + type;
    this.store.dispatch({
      type: answersActionType,
      payload,
      headlessId: this.headlessId
    });
  }
  addListener(listener2) {
    let previousValue = listener2.valueAccessor(this.getState());
    return this.store.subscribe(() => {
      const currentValue = listener2.valueAccessor(this.getState());
      if (currentValue !== previousValue) {
        previousValue = currentValue;
        listener2.callback(currentValue);
      }
    });
  }
};

// node_modules/@yext/search-headless/dist/esm/src/search-utilities.js
var search_utilities_exports = {};
__export(search_utilities_exports, {
  isCloseMatch: () => isCloseMatch,
  searchThroughFacet: () => searchThroughFacet
});

// node_modules/@yext/search-headless/dist/esm/src/utils/searchable-facets.js
var import_js_levenshtein = __toESM(require_js_levenshtein());
function isLevenshteinMatch(value, searchTerm) {
  if (value.includes(searchTerm)) {
    return true;
  }
  const minLevenshteinSearchLength = 3;
  if (searchTerm.length < minLevenshteinSearchLength) {
    return false;
  }
  const bestDistance = getBestLevenshteinDistance(value, searchTerm);
  const maxLevenshteinDistance = 1;
  if (bestDistance <= maxLevenshteinDistance) {
    return true;
  }
  return false;
}
function getBestLevenshteinDistance(value, searchTerm) {
  const substrings = [];
  for (let start = 0; start <= value.length - searchTerm.length; start++) {
    substrings.push(value.substr(start, searchTerm.length));
  }
  let bestDistance = searchTerm.length;
  for (const substring of substrings) {
    const levDist = (0, import_js_levenshtein.default)(substring, searchTerm);
    if (levDist < bestDistance) {
      bestDistance = levDist;
    }
  }
  return bestDistance;
}

// node_modules/@yext/search-headless/dist/esm/src/search-utilities.js
function searchThroughFacet(facet, searchTerm) {
  return Object.assign(Object.assign({}, facet), { options: facet.options.filter((o2) => isCloseMatch(o2.displayName, searchTerm)) });
}
function isCloseMatch(value, searchTerm) {
  return isLevenshteinMatch(value.toLowerCase(), searchTerm.toLowerCase());
}

// node_modules/@yext/search-headless/dist/esm/src/utils/transform-filters.js
function combineFiltersWithOR(filters) {
  if (filters.length === 1) {
    return filters[0];
  }
  return {
    kind: "disjunction",
    combinator: FilterCombinator.OR,
    filters
  };
}
function transformFiltersToCoreFormat(selectableFilters) {
  if (!selectableFilters) {
    return null;
  }
  const selectedFilters = selectableFilters.filter((selectableFilter) => selectableFilter.selected).map((selectableFilter) => selectableFilter.filter);
  if (selectedFilters.length === 0) {
    return null;
  }
  if (selectedFilters.length === 1) {
    return selectedFilters[0];
  }
  const combinationFilters = [];
  const fieldIdToFilters = selectedFilters.reduce((fieldIdToFilters2, filter) => {
    if (filter.kind !== "fieldValue") {
      combinationFilters.push(filter);
    } else {
      fieldIdToFilters2[filter.fieldId] ? fieldIdToFilters2[filter.fieldId].push(filter) : fieldIdToFilters2[filter.fieldId] = [filter];
    }
    return fieldIdToFilters2;
  }, {});
  const groupedFieldValueFilters = Object.values(fieldIdToFilters);
  if (groupedFieldValueFilters.length === 1 && combinationFilters.length === 0) {
    return combineFiltersWithOR(groupedFieldValueFilters[0]);
  }
  return {
    kind: "conjunction",
    combinator: FilterCombinator.AND,
    filters: groupedFieldValueFilters.map((filters) => combineFiltersWithOR(filters)).concat(combinationFilters)
  };
}

// node_modules/@yext/search-headless/dist/esm/src/models/utils/searchType.js
var SearchTypeEnum;
(function(SearchTypeEnum2) {
  SearchTypeEnum2["Universal"] = "universal";
  SearchTypeEnum2["Vertical"] = "vertical";
})(SearchTypeEnum || (SearchTypeEnum = {}));

// node_modules/immer/dist/immer.esm.js
function n(n2) {
  for (var r2 = arguments.length, t2 = Array(r2 > 1 ? r2 - 1 : 0), e2 = 1; e2 < r2; e2++)
    t2[e2 - 1] = arguments[e2];
  if (true) {
    var i2 = Y[n2], o2 = i2 ? "function" == typeof i2 ? i2.apply(null, t2) : i2 : "unknown error nr: " + n2;
    throw Error("[Immer] " + o2);
  }
  throw Error("[Immer] minified error nr: " + n2 + (t2.length ? " " + t2.map(function(n3) {
    return "'" + n3 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r(n2) {
  return !!n2 && !!n2[Q];
}
function t(n2) {
  var r2;
  return !!n2 && (function(n3) {
    if (!n3 || "object" != typeof n3)
      return false;
    var r3 = Object.getPrototypeOf(n3);
    if (null === r3)
      return true;
    var t2 = Object.hasOwnProperty.call(r3, "constructor") && r3.constructor;
    return t2 === Object || "function" == typeof t2 && Function.toString.call(t2) === Z;
  }(n2) || Array.isArray(n2) || !!n2[L] || !!(null === (r2 = n2.constructor) || void 0 === r2 ? void 0 : r2[L]) || s(n2) || v(n2));
}
function i(n2, r2, t2) {
  void 0 === t2 && (t2 = false), 0 === o(n2) ? (t2 ? Object.keys : nn)(n2).forEach(function(e2) {
    t2 && "symbol" == typeof e2 || r2(e2, n2[e2], n2);
  }) : n2.forEach(function(t3, e2) {
    return r2(e2, t3, n2);
  });
}
function o(n2) {
  var r2 = n2[Q];
  return r2 ? r2.i > 3 ? r2.i - 4 : r2.i : Array.isArray(n2) ? 1 : s(n2) ? 2 : v(n2) ? 3 : 0;
}
function u(n2, r2) {
  return 2 === o(n2) ? n2.has(r2) : Object.prototype.hasOwnProperty.call(n2, r2);
}
function a(n2, r2) {
  return 2 === o(n2) ? n2.get(r2) : n2[r2];
}
function f(n2, r2, t2) {
  var e2 = o(n2);
  2 === e2 ? n2.set(r2, t2) : 3 === e2 ? n2.add(t2) : n2[r2] = t2;
}
function c(n2, r2) {
  return n2 === r2 ? 0 !== n2 || 1 / n2 == 1 / r2 : n2 != n2 && r2 != r2;
}
function s(n2) {
  return X && n2 instanceof Map;
}
function v(n2) {
  return q && n2 instanceof Set;
}
function p(n2) {
  return n2.o || n2.t;
}
function l(n2) {
  if (Array.isArray(n2))
    return Array.prototype.slice.call(n2);
  var r2 = rn(n2);
  delete r2[Q];
  for (var t2 = nn(r2), e2 = 0; e2 < t2.length; e2++) {
    var i2 = t2[e2], o2 = r2[i2];
    false === o2.writable && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (r2[i2] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n2[i2] });
  }
  return Object.create(Object.getPrototypeOf(n2), r2);
}
function d(n2, e2) {
  return void 0 === e2 && (e2 = false), y(n2) || r(n2) || !t(n2) || (o(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h), Object.freeze(n2), e2 && i(n2, function(n3, r2) {
    return d(r2, true);
  }, true)), n2;
}
function h() {
  n(2);
}
function y(n2) {
  return null == n2 || "object" != typeof n2 || Object.isFrozen(n2);
}
function b(r2) {
  var t2 = tn[r2];
  return t2 || n(18, r2), t2;
}
function m(n2, r2) {
  tn[n2] || (tn[n2] = r2);
}
function _() {
  return U || n(0), U;
}
function j(n2, r2) {
  r2 && (b("Patches"), n2.u = [], n2.s = [], n2.v = r2);
}
function g(n2) {
  O(n2), n2.p.forEach(S), n2.p = null;
}
function O(n2) {
  n2 === U && (U = n2.l);
}
function w(n2) {
  return U = { p: [], l: U, h: n2, m: true, _: 0 };
}
function S(n2) {
  var r2 = n2[Q];
  0 === r2.i || 1 === r2.i ? r2.j() : r2.g = true;
}
function P(r2, e2) {
  e2._ = e2.p.length;
  var i2 = e2.p[0], o2 = void 0 !== r2 && r2 !== i2;
  return e2.h.O || b("ES5").S(e2, r2, o2), o2 ? (i2[Q].P && (g(e2), n(4)), t(r2) && (r2 = M(e2, r2), e2.l || x(e2, r2)), e2.u && b("Patches").M(i2[Q].t, r2, e2.u, e2.s)) : r2 = M(e2, i2, []), g(e2), e2.u && e2.v(e2.u, e2.s), r2 !== H ? r2 : void 0;
}
function M(n2, r2, t2) {
  if (y(r2))
    return r2;
  var e2 = r2[Q];
  if (!e2)
    return i(r2, function(i2, o3) {
      return A(n2, e2, r2, i2, o3, t2);
    }, true), r2;
  if (e2.A !== n2)
    return r2;
  if (!e2.P)
    return x(n2, e2.t, true), e2.t;
  if (!e2.I) {
    e2.I = true, e2.A._--;
    var o2 = 4 === e2.i || 5 === e2.i ? e2.o = l(e2.k) : e2.o, u2 = o2, a2 = false;
    3 === e2.i && (u2 = new Set(o2), o2.clear(), a2 = true), i(u2, function(r3, i2) {
      return A(n2, e2, o2, r3, i2, t2, a2);
    }), x(n2, o2, false), t2 && n2.u && b("Patches").N(e2, t2, n2.u, n2.s);
  }
  return e2.o;
}
function A(e2, i2, o2, a2, c2, s2, v2) {
  if (c2 === o2 && n(5), r(c2)) {
    var p2 = M(e2, c2, s2 && i2 && 3 !== i2.i && !u(i2.R, a2) ? s2.concat(a2) : void 0);
    if (f(o2, a2, p2), !r(p2))
      return;
    e2.m = false;
  } else
    v2 && o2.add(c2);
  if (t(c2) && !y(c2)) {
    if (!e2.h.D && e2._ < 1)
      return;
    M(e2, c2), i2 && i2.A.l || x(e2, c2);
  }
}
function x(n2, r2, t2) {
  void 0 === t2 && (t2 = false), !n2.l && n2.h.D && n2.m && d(r2, t2);
}
function z(n2, r2) {
  var t2 = n2[Q];
  return (t2 ? p(t2) : n2)[r2];
}
function I(n2, r2) {
  if (r2 in n2)
    for (var t2 = Object.getPrototypeOf(n2); t2; ) {
      var e2 = Object.getOwnPropertyDescriptor(t2, r2);
      if (e2)
        return e2;
      t2 = Object.getPrototypeOf(t2);
    }
}
function k(n2) {
  n2.P || (n2.P = true, n2.l && k(n2.l));
}
function E(n2) {
  n2.o || (n2.o = l(n2.t));
}
function N(n2, r2, t2) {
  var e2 = s(r2) ? b("MapSet").F(r2, t2) : v(r2) ? b("MapSet").T(r2, t2) : n2.O ? function(n3, r3) {
    var t3 = Array.isArray(n3), e3 = { i: t3 ? 1 : 0, A: r3 ? r3.A : _(), P: false, I: false, R: {}, l: r3, t: n3, k: null, o: null, j: null, C: false }, i2 = e3, o2 = en;
    t3 && (i2 = [e3], o2 = on);
    var u2 = Proxy.revocable(i2, o2), a2 = u2.revoke, f2 = u2.proxy;
    return e3.k = f2, e3.j = a2, f2;
  }(r2, t2) : b("ES5").J(r2, t2);
  return (t2 ? t2.A : _()).p.push(e2), e2;
}
function R(e2) {
  return r(e2) || n(22, e2), function n2(r2) {
    if (!t(r2))
      return r2;
    var e3, u2 = r2[Q], c2 = o(r2);
    if (u2) {
      if (!u2.P && (u2.i < 4 || !b("ES5").K(u2)))
        return u2.t;
      u2.I = true, e3 = D(r2, c2), u2.I = false;
    } else
      e3 = D(r2, c2);
    return i(e3, function(r3, t2) {
      u2 && a(u2.t, r3) === t2 || f(e3, r3, n2(t2));
    }), 3 === c2 ? new Set(e3) : e3;
  }(e2);
}
function D(n2, r2) {
  switch (r2) {
    case 2:
      return new Map(n2);
    case 3:
      return Array.from(n2);
  }
  return l(n2);
}
function F() {
  function t2(n2, r2) {
    var t3 = s2[n2];
    return t3 ? t3.enumerable = r2 : s2[n2] = t3 = { configurable: true, enumerable: r2, get: function() {
      var r3 = this[Q];
      return f2(r3), en.get(r3, n2);
    }, set: function(r3) {
      var t4 = this[Q];
      f2(t4), en.set(t4, n2, r3);
    } }, t3;
  }
  function e2(n2) {
    for (var r2 = n2.length - 1; r2 >= 0; r2--) {
      var t3 = n2[r2][Q];
      if (!t3.P)
        switch (t3.i) {
          case 5:
            a2(t3) && k(t3);
            break;
          case 4:
            o2(t3) && k(t3);
        }
    }
  }
  function o2(n2) {
    for (var r2 = n2.t, t3 = n2.k, e3 = nn(t3), i2 = e3.length - 1; i2 >= 0; i2--) {
      var o3 = e3[i2];
      if (o3 !== Q) {
        var a3 = r2[o3];
        if (void 0 === a3 && !u(r2, o3))
          return true;
        var f3 = t3[o3], s3 = f3 && f3[Q];
        if (s3 ? s3.t !== a3 : !c(f3, a3))
          return true;
      }
    }
    var v2 = !!r2[Q];
    return e3.length !== nn(r2).length + (v2 ? 0 : 1);
  }
  function a2(n2) {
    var r2 = n2.k;
    if (r2.length !== n2.t.length)
      return true;
    var t3 = Object.getOwnPropertyDescriptor(r2, r2.length - 1);
    if (t3 && !t3.get)
      return true;
    for (var e3 = 0; e3 < r2.length; e3++)
      if (!r2.hasOwnProperty(e3))
        return true;
    return false;
  }
  function f2(r2) {
    r2.g && n(3, JSON.stringify(p(r2)));
  }
  var s2 = {};
  m("ES5", { J: function(n2, r2) {
    var e3 = Array.isArray(n2), i2 = function(n3, r3) {
      if (n3) {
        for (var e4 = Array(r3.length), i3 = 0; i3 < r3.length; i3++)
          Object.defineProperty(e4, "" + i3, t2(i3, true));
        return e4;
      }
      var o4 = rn(r3);
      delete o4[Q];
      for (var u2 = nn(o4), a3 = 0; a3 < u2.length; a3++) {
        var f3 = u2[a3];
        o4[f3] = t2(f3, n3 || !!o4[f3].enumerable);
      }
      return Object.create(Object.getPrototypeOf(r3), o4);
    }(e3, n2), o3 = { i: e3 ? 5 : 4, A: r2 ? r2.A : _(), P: false, I: false, R: {}, l: r2, t: n2, k: i2, o: null, g: false, C: false };
    return Object.defineProperty(i2, Q, { value: o3, writable: true }), i2;
  }, S: function(n2, t3, o3) {
    o3 ? r(t3) && t3[Q].A === n2 && e2(n2.p) : (n2.u && function n3(r2) {
      if (r2 && "object" == typeof r2) {
        var t4 = r2[Q];
        if (t4) {
          var e3 = t4.t, o4 = t4.k, f3 = t4.R, c2 = t4.i;
          if (4 === c2)
            i(o4, function(r3) {
              r3 !== Q && (void 0 !== e3[r3] || u(e3, r3) ? f3[r3] || n3(o4[r3]) : (f3[r3] = true, k(t4)));
            }), i(e3, function(n4) {
              void 0 !== o4[n4] || u(o4, n4) || (f3[n4] = false, k(t4));
            });
          else if (5 === c2) {
            if (a2(t4) && (k(t4), f3.length = true), o4.length < e3.length)
              for (var s3 = o4.length; s3 < e3.length; s3++)
                f3[s3] = false;
            else
              for (var v2 = e3.length; v2 < o4.length; v2++)
                f3[v2] = true;
            for (var p2 = Math.min(o4.length, e3.length), l2 = 0; l2 < p2; l2++)
              o4.hasOwnProperty(l2) || (f3[l2] = true), void 0 === f3[l2] && n3(o4[l2]);
          }
        }
      }
    }(n2.p[0]), e2(n2.p));
  }, K: function(n2) {
    return 4 === n2.i ? o2(n2) : a2(n2);
  } });
}
var G;
var U;
var W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x");
var X = "undefined" != typeof Map;
var q = "undefined" != typeof Set;
var B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect;
var H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
var L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
var Q = W ? Symbol.for("immer-state") : "__$immer_state";
var Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n2) {
  return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n2;
}, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n2) {
  return "Cannot apply patch, path doesn't resolve: " + n2;
}, 16: 'Sets cannot have "replace" patches.', 17: function(n2) {
  return "Unsupported patch operation: " + n2;
}, 18: function(n2) {
  return "The plugin for '" + n2 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n2 + "()` when initializing your application.";
}, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n2) {
  return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n2 + "'";
}, 22: function(n2) {
  return "'current' expects a draft, got: " + n2;
}, 23: function(n2) {
  return "'original' expects a draft, got: " + n2;
}, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
var Z = "" + Object.prototype.constructor;
var nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n2) {
  return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
} : Object.getOwnPropertyNames;
var rn = Object.getOwnPropertyDescriptors || function(n2) {
  var r2 = {};
  return nn(n2).forEach(function(t2) {
    r2[t2] = Object.getOwnPropertyDescriptor(n2, t2);
  }), r2;
};
var tn = {};
var en = { get: function(n2, r2) {
  if (r2 === Q)
    return n2;
  var e2 = p(n2);
  if (!u(e2, r2))
    return function(n3, r3, t2) {
      var e3, i3 = I(r3, t2);
      return i3 ? "value" in i3 ? i3.value : null === (e3 = i3.get) || void 0 === e3 ? void 0 : e3.call(n3.k) : void 0;
    }(n2, e2, r2);
  var i2 = e2[r2];
  return n2.I || !t(i2) ? i2 : i2 === z(n2.t, r2) ? (E(n2), n2.o[r2] = N(n2.A.h, i2, n2)) : i2;
}, has: function(n2, r2) {
  return r2 in p(n2);
}, ownKeys: function(n2) {
  return Reflect.ownKeys(p(n2));
}, set: function(n2, r2, t2) {
  var e2 = I(p(n2), r2);
  if (null == e2 ? void 0 : e2.set)
    return e2.set.call(n2.k, t2), true;
  if (!n2.P) {
    var i2 = z(p(n2), r2), o2 = null == i2 ? void 0 : i2[Q];
    if (o2 && o2.t === t2)
      return n2.o[r2] = t2, n2.R[r2] = false, true;
    if (c(t2, i2) && (void 0 !== t2 || u(n2.t, r2)))
      return true;
    E(n2), k(n2);
  }
  return n2.o[r2] === t2 && (void 0 !== t2 || r2 in n2.o) || Number.isNaN(t2) && Number.isNaN(n2.o[r2]) || (n2.o[r2] = t2, n2.R[r2] = true), true;
}, deleteProperty: function(n2, r2) {
  return void 0 !== z(n2.t, r2) || r2 in n2.t ? (n2.R[r2] = false, E(n2), k(n2)) : delete n2.R[r2], n2.o && delete n2.o[r2], true;
}, getOwnPropertyDescriptor: function(n2, r2) {
  var t2 = p(n2), e2 = Reflect.getOwnPropertyDescriptor(t2, r2);
  return e2 ? { writable: true, configurable: 1 !== n2.i || "length" !== r2, enumerable: e2.enumerable, value: t2[r2] } : e2;
}, defineProperty: function() {
  n(11);
}, getPrototypeOf: function(n2) {
  return Object.getPrototypeOf(n2.t);
}, setPrototypeOf: function() {
  n(12);
} };
var on = {};
i(en, function(n2, r2) {
  on[n2] = function() {
    return arguments[0] = arguments[0][0], r2.apply(this, arguments);
  };
}), on.deleteProperty = function(r2, t2) {
  return isNaN(parseInt(t2)) && n(13), on.set.call(this, r2, t2, void 0);
}, on.set = function(r2, t2, e2) {
  return "length" !== t2 && isNaN(parseInt(t2)) && n(14), en.set.call(this, r2[0], t2, e2, r2[0]);
};
var un = function() {
  function e2(r2) {
    var e3 = this;
    this.O = B, this.D = true, this.produce = function(r3, i3, o2) {
      if ("function" == typeof r3 && "function" != typeof i3) {
        var u2 = i3;
        i3 = r3;
        var a2 = e3;
        return function(n2) {
          var r4 = this;
          void 0 === n2 && (n2 = u2);
          for (var t2 = arguments.length, e4 = Array(t2 > 1 ? t2 - 1 : 0), o3 = 1; o3 < t2; o3++)
            e4[o3 - 1] = arguments[o3];
          return a2.produce(n2, function(n3) {
            var t3;
            return (t3 = i3).call.apply(t3, [r4, n3].concat(e4));
          });
        };
      }
      var f2;
      if ("function" != typeof i3 && n(6), void 0 !== o2 && "function" != typeof o2 && n(7), t(r3)) {
        var c2 = w(e3), s2 = N(e3, r3, void 0), v2 = true;
        try {
          f2 = i3(s2), v2 = false;
        } finally {
          v2 ? g(c2) : O(c2);
        }
        return "undefined" != typeof Promise && f2 instanceof Promise ? f2.then(function(n2) {
          return j(c2, o2), P(n2, c2);
        }, function(n2) {
          throw g(c2), n2;
        }) : (j(c2, o2), P(f2, c2));
      }
      if (!r3 || "object" != typeof r3) {
        if (void 0 === (f2 = i3(r3)) && (f2 = r3), f2 === H && (f2 = void 0), e3.D && d(f2, true), o2) {
          var p2 = [], l2 = [];
          b("Patches").M(r3, f2, p2, l2), o2(p2, l2);
        }
        return f2;
      }
      n(21, r3);
    }, this.produceWithPatches = function(n2, r3) {
      if ("function" == typeof n2)
        return function(r4) {
          for (var t3 = arguments.length, i4 = Array(t3 > 1 ? t3 - 1 : 0), o3 = 1; o3 < t3; o3++)
            i4[o3 - 1] = arguments[o3];
          return e3.produceWithPatches(r4, function(r5) {
            return n2.apply(void 0, [r5].concat(i4));
          });
        };
      var t2, i3, o2 = e3.produce(n2, r3, function(n3, r4) {
        t2 = n3, i3 = r4;
      });
      return "undefined" != typeof Promise && o2 instanceof Promise ? o2.then(function(n3) {
        return [n3, t2, i3];
      }) : [o2, t2, i3];
    }, "boolean" == typeof (null == r2 ? void 0 : r2.useProxies) && this.setUseProxies(r2.useProxies), "boolean" == typeof (null == r2 ? void 0 : r2.autoFreeze) && this.setAutoFreeze(r2.autoFreeze);
  }
  var i2 = e2.prototype;
  return i2.createDraft = function(e3) {
    t(e3) || n(8), r(e3) && (e3 = R(e3));
    var i3 = w(this), o2 = N(this, e3, void 0);
    return o2[Q].C = true, O(i3), o2;
  }, i2.finishDraft = function(r2, t2) {
    var e3 = r2 && r2[Q];
    e3 && e3.C || n(9), e3.I && n(10);
    var i3 = e3.A;
    return j(i3, t2), P(void 0, i3);
  }, i2.setAutoFreeze = function(n2) {
    this.D = n2;
  }, i2.setUseProxies = function(r2) {
    r2 && !B && n(20), this.O = r2;
  }, i2.applyPatches = function(n2, t2) {
    var e3;
    for (e3 = t2.length - 1; e3 >= 0; e3--) {
      var i3 = t2[e3];
      if (0 === i3.path.length && "replace" === i3.op) {
        n2 = i3.value;
        break;
      }
    }
    e3 > -1 && (t2 = t2.slice(e3 + 1));
    var o2 = b("Patches").$;
    return r(n2) ? o2(n2, t2) : this.produce(n2, function(n3) {
      return o2(n3, t2);
    });
  }, e2;
}();
var an = new un();
var fn = an.produce;
var cn = an.produceWithPatches.bind(an);
var sn = an.setAutoFreeze.bind(an);
var vn = an.setUseProxies.bind(an);
var pn = an.applyPatches.bind(an);
var ln = an.createDraft.bind(an);
var dn = an.finishDraft.bind(an);
var immer_esm_default = fn;

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}

// node_modules/redux/es/redux.js
var $$observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
var randomString = function randomString2() {
  return Math.random().toString(36).substring(7).split("").join(".");
};
var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};
function isPlainObject(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto;
}
function miniKindOf(val) {
  if (val === void 0)
    return "undefined";
  if (val === null)
    return "null";
  var type = typeof val;
  switch (type) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function": {
      return type;
    }
  }
  if (Array.isArray(val))
    return "array";
  if (isDate(val))
    return "date";
  if (isError(val))
    return "error";
  var constructorName = ctorName(val);
  switch (constructorName) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return constructorName;
  }
  return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function ctorName(val) {
  return typeof val.constructor === "function" ? val.constructor.name : null;
}
function isError(val) {
  return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
function isDate(val) {
  if (val instanceof Date)
    return true;
  return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
function kindOf(val) {
  var typeOfVal = typeof val;
  if (true) {
    typeOfVal = miniKindOf(val);
  }
  return typeOfVal;
}
function createStore(reducer, preloadedState, enhancer) {
  var _ref2;
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
    }
    return enhancer(createStore)(reducer, preloadedState);
  }
  if (typeof reducer !== "function") {
    throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
  }
  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  function getState() {
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    }
    return currentState;
  }
  function subscribe(listener2) {
    if (typeof listener2 !== "function") {
      throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener2) + "'");
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    }
    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener2);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener2);
      nextListeners.splice(index, 1);
      currentListeners = null;
    };
  }
  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
    }
    if (typeof action.type === "undefined") {
      throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    var listeners = currentListeners = nextListeners;
    for (var i2 = 0; i2 < listeners.length; i2++) {
      var listener2 = listeners[i2];
      listener2();
    }
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
    }
    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  function observable() {
    var _ref;
    var outerSubscribe = subscribe;
    return _ref = {
      subscribe: function subscribe2(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
        }
        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }
        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      }
    }, _ref[$$observable] = function() {
      return this;
    }, _ref;
  }
  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch,
    subscribe,
    getState,
    replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}
function warning(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e2) {
  }
}
function getUnexpectedStateShapeWarningMessage(inputState, reducers12, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers12);
  var argumentName = action && action.type === ActionTypes.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
  if (reducerKeys.length === 0) {
    return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
  }
  if (!isPlainObject(inputState)) {
    return "The " + argumentName + ' has unexpected type of "' + kindOf(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
  }
  var unexpectedKeys = Object.keys(inputState).filter(function(key) {
    return !reducers12.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function(key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE)
    return;
  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + " " + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
  }
}
function assertReducerShape(reducers12) {
  Object.keys(reducers12).forEach(function(key) {
    var reducer = reducers12[key];
    var initialState12 = reducer(void 0, {
      type: ActionTypes.INIT
    });
    if (typeof initialState12 === "undefined") {
      throw new Error(false ? formatProdErrorMessage(12) : 'The slice reducer for key "' + key + `" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
    }
    if (typeof reducer(void 0, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === "undefined") {
      throw new Error(false ? formatProdErrorMessage(13) : 'The slice reducer for key "' + key + '" returned undefined when probed with a random type. ' + ("Don't try to handle '" + ActionTypes.INIT + `' or other actions in "redux/*" `) + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
    }
  });
}
function combineReducers(reducers12) {
  var reducerKeys = Object.keys(reducers12);
  var finalReducers = {};
  for (var i2 = 0; i2 < reducerKeys.length; i2++) {
    var key = reducerKeys[i2];
    if (true) {
      if (typeof reducers12[key] === "undefined") {
        warning('No reducer provided for key "' + key + '"');
      }
    }
    if (typeof reducers12[key] === "function") {
      finalReducers[key] = reducers12[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);
  var unexpectedKeyCache;
  if (true) {
    unexpectedKeyCache = {};
  }
  var shapeAssertionError;
  try {
    assertReducerShape(finalReducers);
  } catch (e2) {
    shapeAssertionError = e2;
  }
  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }
    if (shapeAssertionError) {
      throw shapeAssertionError;
    }
    if (true) {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        warning(warningMessage);
      }
    }
    var hasChanged = false;
    var nextState = {};
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === "undefined") {
        var actionType = action && action.type;
        throw new Error(false ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? '"' + String(actionType) + '"' : "(unknown type)") + ', the slice reducer for key "' + _key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  if (funcs.length === 0) {
    return function(arg) {
      return arg;
    };
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce(function(a2, b2) {
    return function() {
      return a2(b2.apply(void 0, arguments));
    };
  });
}
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }
  return function(createStore2) {
    return function() {
      var store2 = createStore2.apply(void 0, arguments);
      var _dispatch = function dispatch() {
        throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
      };
      var middlewareAPI = {
        getState: store2.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function(middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store2.dispatch);
      return _objectSpread2(_objectSpread2({}, store2), {}, {
        dispatch: _dispatch
      });
    };
  };
}

// node_modules/reselect/es/defaultMemoize.js
var NOT_FOUND = "NOT_FOUND";
function createSingletonCache(equals) {
  var entry;
  return {
    get: function get(key) {
      if (entry && equals(entry.key, key)) {
        return entry.value;
      }
      return NOT_FOUND;
    },
    put: function put(key, value) {
      entry = {
        key,
        value
      };
    },
    getEntries: function getEntries() {
      return entry ? [entry] : [];
    },
    clear: function clear() {
      entry = void 0;
    }
  };
}
function createLruCache(maxSize, equals) {
  var entries = [];
  function get(key) {
    var cacheIndex = entries.findIndex(function(entry2) {
      return equals(key, entry2.key);
    });
    if (cacheIndex > -1) {
      var entry = entries[cacheIndex];
      if (cacheIndex > 0) {
        entries.splice(cacheIndex, 1);
        entries.unshift(entry);
      }
      return entry.value;
    }
    return NOT_FOUND;
  }
  function put(key, value) {
    if (get(key) === NOT_FOUND) {
      entries.unshift({
        key,
        value
      });
      if (entries.length > maxSize) {
        entries.pop();
      }
    }
  }
  function getEntries() {
    return entries;
  }
  function clear() {
    entries = [];
  }
  return {
    get,
    put,
    getEntries,
    clear
  };
}
var defaultEqualityCheck = function defaultEqualityCheck2(a2, b2) {
  return a2 === b2;
};
function createCacheKeyComparator(equalityCheck) {
  return function areArgumentsShallowlyEqual(prev, next) {
    if (prev === null || next === null || prev.length !== next.length) {
      return false;
    }
    var length = prev.length;
    for (var i2 = 0; i2 < length; i2++) {
      if (!equalityCheck(prev[i2], next[i2])) {
        return false;
      }
    }
    return true;
  };
}
function defaultMemoize(func, equalityCheckOrOptions) {
  var providedOptions = typeof equalityCheckOrOptions === "object" ? equalityCheckOrOptions : {
    equalityCheck: equalityCheckOrOptions
  };
  var _providedOptions$equa = providedOptions.equalityCheck, equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa, _providedOptions$maxS = providedOptions.maxSize, maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS, resultEqualityCheck = providedOptions.resultEqualityCheck;
  var comparator = createCacheKeyComparator(equalityCheck);
  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);
  function memoized() {
    var value = cache.get(arguments);
    if (value === NOT_FOUND) {
      value = func.apply(null, arguments);
      if (resultEqualityCheck) {
        var entries = cache.getEntries();
        var matchingEntry = entries.find(function(entry) {
          return resultEqualityCheck(entry.value, value);
        });
        if (matchingEntry) {
          value = matchingEntry.value;
        }
      }
      cache.put(arguments, value);
    }
    return value;
  }
  memoized.clearCache = function() {
    return cache.clear();
  };
  return memoized;
}

// node_modules/reselect/es/index.js
function getDependencies(funcs) {
  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
  if (!dependencies.every(function(dep) {
    return typeof dep === "function";
  })) {
    var dependencyTypes = dependencies.map(function(dep) {
      return typeof dep === "function" ? "function " + (dep.name || "unnamed") + "()" : typeof dep;
    }).join(", ");
    throw new Error("createSelector expects all input-selectors to be functions, but received the following types: [" + dependencyTypes + "]");
  }
  return dependencies;
}
function createSelectorCreator(memoize) {
  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    memoizeOptionsFromArgs[_key - 1] = arguments[_key];
  }
  var createSelector2 = function createSelector3() {
    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      funcs[_key2] = arguments[_key2];
    }
    var _recomputations = 0;
    var _lastResult;
    var directlyPassedOptions = {
      memoizeOptions: void 0
    };
    var resultFunc = funcs.pop();
    if (typeof resultFunc === "object") {
      directlyPassedOptions = resultFunc;
      resultFunc = funcs.pop();
    }
    if (typeof resultFunc !== "function") {
      throw new Error("createSelector expects an output function after the inputs, but received: [" + typeof resultFunc + "]");
    }
    var _directlyPassedOption = directlyPassedOptions, _directlyPassedOption2 = _directlyPassedOption.memoizeOptions, memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2;
    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];
    var dependencies = getDependencies(funcs);
    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {
      _recomputations++;
      return resultFunc.apply(null, arguments);
    }].concat(finalMemoizeOptions));
    var selector = memoize(function dependenciesChecker() {
      var params = [];
      var length = dependencies.length;
      for (var i2 = 0; i2 < length; i2++) {
        params.push(dependencies[i2].apply(null, arguments));
      }
      _lastResult = memoizedResultFunc.apply(null, params);
      return _lastResult;
    });
    Object.assign(selector, {
      resultFunc,
      memoizedResultFunc,
      dependencies,
      lastResult: function lastResult() {
        return _lastResult;
      },
      recomputations: function recomputations() {
        return _recomputations;
      },
      resetRecomputations: function resetRecomputations() {
        return _recomputations = 0;
      }
    });
    return selector;
  };
  return createSelector2;
}
var createSelector = createSelectorCreator(defaultMemoize);

// node_modules/redux-thunk/es/index.js
function createThunkMiddleware(extraArgument) {
  var middleware = function middleware2(_ref) {
    var dispatch = _ref.dispatch, getState = _ref.getState;
    return function(next) {
      return function(action) {
        if (typeof action === "function") {
          return action(dispatch, getState, extraArgument);
        }
        return next(action);
      };
    };
  };
  return middleware;
}
var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;
var es_default = thunk;

// node_modules/@yext/search-headless/node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js
var __extends2 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d3[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __generator4 = function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e2) {
        op = [6, e2];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __spreadArray = function(to, from) {
  for (var i2 = 0, il = from.length, j2 = to.length; i2 < il; i2++, j2++)
    to[j2] = from[i2];
  return to;
};
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = function(obj, key, value) {
  return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
};
var __spreadValues = function(a2, b2) {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var _i = 0, _c = __getOwnPropSymbols(b2); _i < _c.length; _i++) {
      var prop = _c[_i];
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = function(a2, b2) {
  return __defProps(a2, __getOwnPropDescs(b2));
};
var __async = function(__this, __arguments, generator) {
  return new Promise(function(resolve, reject) {
    var fulfilled = function(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var rejected = function(value) {
      try {
        step(generator.throw(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var step = function(x2) {
      return x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
    };
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
  if (arguments.length === 0)
    return void 0;
  if (typeof arguments[0] === "object")
    return compose;
  return compose.apply(null, arguments);
};
var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {
  return function(noop2) {
    return noop2;
  };
};
function isPlainObject2(value) {
  if (typeof value !== "object" || value === null)
    return false;
  var proto = Object.getPrototypeOf(value);
  if (proto === null)
    return true;
  var baseProto = proto;
  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }
  return proto === baseProto;
}
function getTimeMeasureUtils(maxDelay, fnName) {
  var elapsed = 0;
  return {
    measureTime: function(fn2) {
      var started = Date.now();
      try {
        return fn2();
      } finally {
        var finished = Date.now();
        elapsed += finished - started;
      }
    },
    warnIfExceeded: function() {
      if (elapsed > maxDelay) {
        console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
      }
    }
  };
}
var MiddlewareArray = function(_super) {
  __extends2(MiddlewareArray2, _super);
  function MiddlewareArray2() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var _this = _super.apply(this, args) || this;
    Object.setPrototypeOf(_this, MiddlewareArray2.prototype);
    return _this;
  }
  Object.defineProperty(MiddlewareArray2, Symbol.species, {
    get: function() {
      return MiddlewareArray2;
    },
    enumerable: false,
    configurable: true
  });
  MiddlewareArray2.prototype.concat = function() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }
    return _super.prototype.concat.apply(this, arr);
  };
  MiddlewareArray2.prototype.prepend = function() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }
    if (arr.length === 1 && Array.isArray(arr[0])) {
      return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr[0].concat(this))))();
    }
    return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr.concat(this))))();
  };
  return MiddlewareArray2;
}(Array);
var EnhancerArray = function(_super) {
  __extends2(EnhancerArray2, _super);
  function EnhancerArray2() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var _this = _super.apply(this, args) || this;
    Object.setPrototypeOf(_this, EnhancerArray2.prototype);
    return _this;
  }
  Object.defineProperty(EnhancerArray2, Symbol.species, {
    get: function() {
      return EnhancerArray2;
    },
    enumerable: false,
    configurable: true
  });
  EnhancerArray2.prototype.concat = function() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }
    return _super.prototype.concat.apply(this, arr);
  };
  EnhancerArray2.prototype.prepend = function() {
    var arr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }
    if (arr.length === 1 && Array.isArray(arr[0])) {
      return new (EnhancerArray2.bind.apply(EnhancerArray2, __spreadArray([void 0], arr[0].concat(this))))();
    }
    return new (EnhancerArray2.bind.apply(EnhancerArray2, __spreadArray([void 0], arr.concat(this))))();
  };
  return EnhancerArray2;
}(Array);
function freezeDraftable(val) {
  return t(val) ? immer_esm_default(val, function() {
  }) : val;
}
var isProduction = false;
var prefix = "Invariant failed";
function invariant(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction) {
    throw new Error(prefix);
  }
  throw new Error(prefix + ": " + (message || ""));
}
function stringify(obj, serializer, indent, decycler) {
  return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
}
function getSerialize(serializer, decycler) {
  var stack = [], keys = [];
  if (!decycler)
    decycler = function(_2, value) {
      if (stack[0] === value)
        return "[Circular ~]";
      return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
    };
  return function(key, value) {
    if (stack.length > 0) {
      var thisPos = stack.indexOf(this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
      if (~stack.indexOf(value))
        value = decycler.call(this, key, value);
    } else
      stack.push(value);
    return serializer == null ? value : serializer.call(this, key, value);
  };
}
function isImmutableDefault(value) {
  return typeof value !== "object" || value == null || Object.isFrozen(value);
}
function trackForMutations(isImmutable, ignorePaths, obj) {
  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
  return {
    detectMutations: function() {
      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
    }
  };
}
function trackProperties(isImmutable, ignorePaths, obj, path) {
  if (ignorePaths === void 0) {
    ignorePaths = [];
  }
  if (path === void 0) {
    path = "";
  }
  var tracked = { value: obj };
  if (!isImmutable(obj)) {
    tracked.children = {};
    for (var key in obj) {
      var childPath = path ? path + "." + key : key;
      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
        continue;
      }
      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
    }
  }
  return tracked;
}
function detectMutations(isImmutable, ignoredPaths, trackedProperty, obj, sameParentRef, path) {
  if (ignoredPaths === void 0) {
    ignoredPaths = [];
  }
  if (sameParentRef === void 0) {
    sameParentRef = false;
  }
  if (path === void 0) {
    path = "";
  }
  var prevObj = trackedProperty ? trackedProperty.value : void 0;
  var sameRef = prevObj === obj;
  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
    return { wasMutated: true, path };
  }
  if (isImmutable(prevObj) || isImmutable(obj)) {
    return { wasMutated: false };
  }
  var keysToDetect = {};
  for (var key in trackedProperty.children) {
    keysToDetect[key] = true;
  }
  for (var key in obj) {
    keysToDetect[key] = true;
  }
  var hasIgnoredPaths = ignoredPaths.length > 0;
  var _loop_1 = function(key2) {
    var nestedPath = path ? path + "." + key2 : key2;
    if (hasIgnoredPaths) {
      var hasMatches = ignoredPaths.some(function(ignored) {
        if (ignored instanceof RegExp) {
          return ignored.test(nestedPath);
        }
        return nestedPath === ignored;
      });
      if (hasMatches) {
        return "continue";
      }
    }
    var result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key2], obj[key2], sameRef, nestedPath);
    if (result.wasMutated) {
      return { value: result };
    }
  };
  for (var key in keysToDetect) {
    var state_1 = _loop_1(key);
    if (typeof state_1 === "object")
      return state_1.value;
  }
  return { wasMutated: false };
}
function createImmutableStateInvariantMiddleware(options) {
  if (options === void 0) {
    options = {};
  }
  if (false) {
    return function() {
      return function(next) {
        return function(action) {
          return next(action);
        };
      };
    };
  }
  var _c = options.isImmutable, isImmutable = _c === void 0 ? isImmutableDefault : _c, ignoredPaths = options.ignoredPaths, _d = options.warnAfter, warnAfter = _d === void 0 ? 32 : _d, ignore = options.ignore;
  ignoredPaths = ignoredPaths || ignore;
  var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
  return function(_c2) {
    var getState = _c2.getState;
    var state = getState();
    var tracker = track(state);
    var result;
    return function(next) {
      return function(action) {
        var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
        measureUtils.measureTime(function() {
          state = getState();
          result = tracker.detectMutations();
          tracker = track(state);
          invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result.path || "") + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
        });
        var dispatchedAction = next(action);
        measureUtils.measureTime(function() {
          state = getState();
          result = tracker.detectMutations();
          tracker = track(state);
          result.wasMutated && invariant(!result.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result.path || "") + ". Take a look at the reducer(s) handling the action " + stringify(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
        });
        measureUtils.warnIfExceeded();
        return dispatchedAction;
      };
    };
  };
}
function isPlain(val) {
  var type = typeof val;
  return val == null || type === "string" || type === "boolean" || type === "number" || Array.isArray(val) || isPlainObject2(val);
}
function findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths, cache) {
  if (path === void 0) {
    path = "";
  }
  if (isSerializable === void 0) {
    isSerializable = isPlain;
  }
  if (ignoredPaths === void 0) {
    ignoredPaths = [];
  }
  var foundNestedSerializable;
  if (!isSerializable(value)) {
    return {
      keyPath: path || "<root>",
      value
    };
  }
  if (typeof value !== "object" || value === null) {
    return false;
  }
  if (cache == null ? void 0 : cache.has(value))
    return false;
  var entries = getEntries != null ? getEntries(value) : Object.entries(value);
  var hasIgnoredPaths = ignoredPaths.length > 0;
  var _loop_2 = function(key2, nestedValue2) {
    var nestedPath = path ? path + "." + key2 : key2;
    if (hasIgnoredPaths) {
      var hasMatches = ignoredPaths.some(function(ignored) {
        if (ignored instanceof RegExp) {
          return ignored.test(nestedPath);
        }
        return nestedPath === ignored;
      });
      if (hasMatches) {
        return "continue";
      }
    }
    if (!isSerializable(nestedValue2)) {
      return { value: {
        keyPath: nestedPath,
        value: nestedValue2
      } };
    }
    if (typeof nestedValue2 === "object") {
      foundNestedSerializable = findNonSerializableValue(nestedValue2, nestedPath, isSerializable, getEntries, ignoredPaths, cache);
      if (foundNestedSerializable) {
        return { value: foundNestedSerializable };
      }
    }
  };
  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
    var _c = entries_1[_i], key = _c[0], nestedValue = _c[1];
    var state_2 = _loop_2(key, nestedValue);
    if (typeof state_2 === "object")
      return state_2.value;
  }
  if (cache && isNestedFrozen(value))
    cache.add(value);
  return false;
}
function isNestedFrozen(value) {
  if (!Object.isFrozen(value))
    return false;
  for (var _i = 0, _c = Object.values(value); _i < _c.length; _i++) {
    var nestedValue = _c[_i];
    if (typeof nestedValue !== "object" || nestedValue === null)
      continue;
    if (!isNestedFrozen(nestedValue))
      return false;
  }
  return true;
}
function createSerializableStateInvariantMiddleware(options) {
  if (options === void 0) {
    options = {};
  }
  if (false) {
    return function() {
      return function(next) {
        return function(action) {
          return next(action);
        };
      };
    };
  }
  var _c = options.isSerializable, isSerializable = _c === void 0 ? isPlain : _c, getEntries = options.getEntries, _d = options.ignoredActions, ignoredActions = _d === void 0 ? [] : _d, _e = options.ignoredActionPaths, ignoredActionPaths = _e === void 0 ? ["meta.arg", "meta.baseQueryMeta"] : _e, _f = options.ignoredPaths, ignoredPaths = _f === void 0 ? [] : _f, _g = options.warnAfter, warnAfter = _g === void 0 ? 32 : _g, _h = options.ignoreState, ignoreState = _h === void 0 ? false : _h, _j = options.ignoreActions, ignoreActions = _j === void 0 ? false : _j, _k = options.disableCache, disableCache = _k === void 0 ? false : _k;
  var cache = !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
  return function(storeAPI) {
    return function(next) {
      return function(action) {
        var result = next(action);
        var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
        if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {
          measureUtils.measureTime(function() {
            var foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths, cache);
            if (foundActionNonSerializableValue) {
              var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;
              console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
            }
          });
        }
        if (!ignoreState) {
          measureUtils.measureTime(function() {
            var state = storeAPI.getState();
            var foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths, cache);
            if (foundStateNonSerializableValue) {
              var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;
              console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the reducer(s) handling this action type: " + action.type + ".\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");
            }
          });
          measureUtils.warnIfExceeded();
        }
        return result;
      };
    };
  };
}
function isBoolean(x2) {
  return typeof x2 === "boolean";
}
function curryGetDefaultMiddleware() {
  return function curriedGetDefaultMiddleware(options) {
    return getDefaultMiddleware(options);
  };
}
function getDefaultMiddleware(options) {
  if (options === void 0) {
    options = {};
  }
  var _c = options.thunk, thunk2 = _c === void 0 ? true : _c, _d = options.immutableCheck, immutableCheck = _d === void 0 ? true : _d, _e = options.serializableCheck, serializableCheck = _e === void 0 ? true : _e;
  var middlewareArray = new MiddlewareArray();
  if (thunk2) {
    if (isBoolean(thunk2)) {
      middlewareArray.push(es_default);
    } else {
      middlewareArray.push(es_default.withExtraArgument(thunk2.extraArgument));
    }
  }
  if (true) {
    if (immutableCheck) {
      var immutableOptions = {};
      if (!isBoolean(immutableCheck)) {
        immutableOptions = immutableCheck;
      }
      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
    }
    if (serializableCheck) {
      var serializableOptions = {};
      if (!isBoolean(serializableCheck)) {
        serializableOptions = serializableCheck;
      }
      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
    }
  }
  return middlewareArray;
}
var IS_PRODUCTION = false;
function configureStore(options) {
  var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
  var _c = options || {}, _d = _c.reducer, reducer = _d === void 0 ? void 0 : _d, _e = _c.middleware, middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;
  var rootReducer;
  if (typeof reducer === "function") {
    rootReducer = reducer;
  } else if (isPlainObject2(reducer)) {
    rootReducer = combineReducers(reducer);
  } else {
    throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
  }
  var finalMiddleware = middleware;
  if (typeof finalMiddleware === "function") {
    finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
      throw new Error("when using a middleware builder function, an array of middleware must be returned");
    }
  }
  if (!IS_PRODUCTION && finalMiddleware.some(function(item) {
    return typeof item !== "function";
  })) {
    throw new Error("each middleware provided to configureStore must be a function");
  }
  var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);
  var finalCompose = compose;
  if (devTools) {
    finalCompose = composeWithDevTools(__spreadValues({
      trace: !IS_PRODUCTION
    }, typeof devTools === "object" && devTools));
  }
  var defaultEnhancers = new EnhancerArray(middlewareEnhancer);
  var storeEnhancers = defaultEnhancers;
  if (Array.isArray(enhancers)) {
    storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
  } else if (typeof enhancers === "function") {
    storeEnhancers = enhancers(defaultEnhancers);
  }
  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
  return createStore(rootReducer, preloadedState, composedEnhancer);
}
function createAction(type, prepareAction) {
  function actionCreator() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (prepareAction) {
      var prepared = prepareAction.apply(void 0, args);
      if (!prepared) {
        throw new Error("prepareAction did not return an object");
      }
      return __spreadValues(__spreadValues({
        type,
        payload: prepared.payload
      }, "meta" in prepared && { meta: prepared.meta }), "error" in prepared && { error: prepared.error });
    }
    return { type, payload: args[0] };
  }
  actionCreator.toString = function() {
    return "" + type;
  };
  actionCreator.type = type;
  actionCreator.match = function(action) {
    return action.type === type;
  };
  return actionCreator;
}
function executeReducerBuilderCallback(builderCallback) {
  var actionsMap = {};
  var actionMatchers = [];
  var defaultCaseReducer;
  var builder = {
    addCase: function(typeOrActionCreator, reducer) {
      if (true) {
        if (actionMatchers.length > 0) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
        }
        if (defaultCaseReducer) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
        }
      }
      var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
      if (type in actionsMap) {
        throw new Error("addCase cannot be called with two reducers for the same action type");
      }
      actionsMap[type] = reducer;
      return builder;
    },
    addMatcher: function(matcher, reducer) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
        }
      }
      actionMatchers.push({ matcher, reducer });
      return builder;
    },
    addDefaultCase: function(reducer) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error("`builder.addDefaultCase` can only be called once");
        }
      }
      defaultCaseReducer = reducer;
      return builder;
    }
  };
  builderCallback(builder);
  return [actionsMap, actionMatchers, defaultCaseReducer];
}
function isStateFunction(x2) {
  return typeof x2 === "function";
}
var hasWarnedAboutObjectNotation = false;
function createReducer(initialState12, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
  if (actionMatchers === void 0) {
    actionMatchers = [];
  }
  if (true) {
    if (typeof mapOrBuilderCallback === "object") {
      if (!hasWarnedAboutObjectNotation) {
        hasWarnedAboutObjectNotation = true;
        console.warn("The object notation for `createReducer` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer");
      }
    }
  }
  var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];
  var getInitialState;
  if (isStateFunction(initialState12)) {
    getInitialState = function() {
      return freezeDraftable(initialState12());
    };
  } else {
    var frozenInitialState_1 = freezeDraftable(initialState12);
    getInitialState = function() {
      return frozenInitialState_1;
    };
  }
  function reducer(state, action) {
    if (state === void 0) {
      state = getInitialState();
    }
    var caseReducers = __spreadArray([
      actionsMap[action.type]
    ], finalActionMatchers.filter(function(_c2) {
      var matcher = _c2.matcher;
      return matcher(action);
    }).map(function(_c2) {
      var reducer2 = _c2.reducer;
      return reducer2;
    }));
    if (caseReducers.filter(function(cr) {
      return !!cr;
    }).length === 0) {
      caseReducers = [finalDefaultCaseReducer];
    }
    return caseReducers.reduce(function(previousState, caseReducer) {
      if (caseReducer) {
        if (r(previousState)) {
          var draft = previousState;
          var result = caseReducer(draft, action);
          if (result === void 0) {
            return previousState;
          }
          return result;
        } else if (!t(previousState)) {
          var result = caseReducer(previousState, action);
          if (result === void 0) {
            if (previousState === null) {
              return previousState;
            }
            throw Error("A case reducer on a non-draftable value must not return undefined");
          }
          return result;
        } else {
          return immer_esm_default(previousState, function(draft2) {
            return caseReducer(draft2, action);
          });
        }
      }
      return previousState;
    }, state);
  }
  reducer.getInitialState = getInitialState;
  return reducer;
}
var hasWarnedAboutObjectNotation2 = false;
function getType2(slice, actionKey) {
  return slice + "/" + actionKey;
}
function createSlice(options) {
  var name = options.name;
  if (!name) {
    throw new Error("`name` is a required option for createSlice");
  }
  if (typeof process !== "undefined" && true) {
    if (options.initialState === void 0) {
      console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
    }
  }
  var initialState12 = typeof options.initialState == "function" ? options.initialState : freezeDraftable(options.initialState);
  var reducers12 = options.reducers || {};
  var reducerNames = Object.keys(reducers12);
  var sliceCaseReducersByName = {};
  var sliceCaseReducersByType = {};
  var actionCreators = {};
  reducerNames.forEach(function(reducerName) {
    var maybeReducerWithPrepare = reducers12[reducerName];
    var type = getType2(name, reducerName);
    var caseReducer;
    var prepareCallback;
    if ("reducer" in maybeReducerWithPrepare) {
      caseReducer = maybeReducerWithPrepare.reducer;
      prepareCallback = maybeReducerWithPrepare.prepare;
    } else {
      caseReducer = maybeReducerWithPrepare;
    }
    sliceCaseReducersByName[reducerName] = caseReducer;
    sliceCaseReducersByType[type] = caseReducer;
    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
  });
  function buildReducer() {
    if (true) {
      if (typeof options.extraReducers === "object") {
        if (!hasWarnedAboutObjectNotation2) {
          hasWarnedAboutObjectNotation2 = true;
          console.warn("The object notation for `createSlice.extraReducers` is deprecated, and will be removed in RTK 2.0. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice");
        }
      }
    }
    var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;
    var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
    return createReducer(initialState12, function(builder) {
      for (var key in finalCaseReducers) {
        builder.addCase(key, finalCaseReducers[key]);
      }
      for (var _i = 0, actionMatchers_1 = actionMatchers; _i < actionMatchers_1.length; _i++) {
        var m2 = actionMatchers_1[_i];
        builder.addMatcher(m2.matcher, m2.reducer);
      }
      if (defaultCaseReducer) {
        builder.addDefaultCase(defaultCaseReducer);
      }
    });
  }
  var _reducer;
  return {
    name,
    reducer: function(state, action) {
      if (!_reducer)
        _reducer = buildReducer();
      return _reducer(state, action);
    },
    actions: actionCreators,
    caseReducers: sliceCaseReducersByName,
    getInitialState: function() {
      if (!_reducer)
        _reducer = buildReducer();
      return _reducer.getInitialState();
    }
  };
}
var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
var nanoid = function(size) {
  if (size === void 0) {
    size = 21;
  }
  var id = "";
  var i2 = size;
  while (i2--) {
    id += urlAlphabet[Math.random() * 64 | 0];
  }
  return id;
};
var commonProperties = [
  "name",
  "message",
  "stack",
  "code"
];
var RejectWithValue = function() {
  function RejectWithValue2(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }
  return RejectWithValue2;
}();
var FulfillWithMeta = function() {
  function FulfillWithMeta2(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }
  return FulfillWithMeta2;
}();
var miniSerializeError = function(value) {
  if (typeof value === "object" && value !== null) {
    var simpleError = {};
    for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
      var property = commonProperties_1[_i];
      if (typeof value[property] === "string") {
        simpleError[property] = value[property];
      }
    }
    return simpleError;
  }
  return { message: String(value) };
};
var createAsyncThunk = function() {
  function createAsyncThunk2(typePrefix, payloadCreator, options) {
    var fulfilled = createAction(typePrefix + "/fulfilled", function(payload, requestId, arg, meta) {
      return {
        payload,
        meta: __spreadProps(__spreadValues({}, meta || {}), {
          arg,
          requestId,
          requestStatus: "fulfilled"
        })
      };
    });
    var pending = createAction(typePrefix + "/pending", function(requestId, arg, meta) {
      return {
        payload: void 0,
        meta: __spreadProps(__spreadValues({}, meta || {}), {
          arg,
          requestId,
          requestStatus: "pending"
        })
      };
    });
    var rejected = createAction(typePrefix + "/rejected", function(error, requestId, arg, payload, meta) {
      return {
        payload,
        error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
        meta: __spreadProps(__spreadValues({}, meta || {}), {
          arg,
          requestId,
          rejectedWithValue: !!payload,
          requestStatus: "rejected",
          aborted: (error == null ? void 0 : error.name) === "AbortError",
          condition: (error == null ? void 0 : error.name) === "ConditionError"
        })
      };
    });
    var displayedWarning = false;
    var AC = typeof AbortController !== "undefined" ? AbortController : function() {
      function class_1() {
        this.signal = {
          aborted: false,
          addEventListener: function() {
          },
          dispatchEvent: function() {
            return false;
          },
          onabort: function() {
          },
          removeEventListener: function() {
          },
          reason: void 0,
          throwIfAborted: function() {
          }
        };
      }
      class_1.prototype.abort = function() {
        if (true) {
          if (!displayedWarning) {
            displayedWarning = true;
            console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
          }
        }
      };
      return class_1;
    }();
    function actionCreator(arg) {
      return function(dispatch, getState, extra) {
        var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();
        var abortController = new AC();
        var abortReason;
        var started = false;
        function abort(reason) {
          abortReason = reason;
          abortController.abort();
        }
        var promise2 = function() {
          return __async(this, null, function() {
            var _a, _b, finalAction, conditionResult, abortedPromise, err_1, skipDispatch;
            return __generator4(this, function(_c) {
              switch (_c.label) {
                case 0:
                  _c.trys.push([0, 4, , 5]);
                  conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, { getState, extra });
                  if (!isThenable(conditionResult))
                    return [3, 2];
                  return [4, conditionResult];
                case 1:
                  conditionResult = _c.sent();
                  _c.label = 2;
                case 2:
                  if (conditionResult === false || abortController.signal.aborted) {
                    throw {
                      name: "ConditionError",
                      message: "Aborted due to condition callback returning false."
                    };
                  }
                  started = true;
                  abortedPromise = new Promise(function(_2, reject) {
                    return abortController.signal.addEventListener("abort", function() {
                      return reject({
                        name: "AbortError",
                        message: abortReason || "Aborted"
                      });
                    });
                  });
                  dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, { requestId, arg }, { getState, extra })));
                  return [4, Promise.race([
                    abortedPromise,
                    Promise.resolve(payloadCreator(arg, {
                      dispatch,
                      getState,
                      extra,
                      requestId,
                      signal: abortController.signal,
                      abort,
                      rejectWithValue: function(value, meta) {
                        return new RejectWithValue(value, meta);
                      },
                      fulfillWithValue: function(value, meta) {
                        return new FulfillWithMeta(value, meta);
                      }
                    })).then(function(result) {
                      if (result instanceof RejectWithValue) {
                        throw result;
                      }
                      if (result instanceof FulfillWithMeta) {
                        return fulfilled(result.payload, requestId, arg, result.meta);
                      }
                      return fulfilled(result, requestId, arg);
                    })
                  ])];
                case 3:
                  finalAction = _c.sent();
                  return [3, 5];
                case 4:
                  err_1 = _c.sent();
                  finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                  return [3, 5];
                case 5:
                  skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
                  if (!skipDispatch) {
                    dispatch(finalAction);
                  }
                  return [2, finalAction];
              }
            });
          });
        }();
        return Object.assign(promise2, {
          abort,
          requestId,
          arg,
          unwrap: function() {
            return promise2.then(unwrapResult);
          }
        });
      };
    }
    return Object.assign(actionCreator, {
      pending,
      rejected,
      fulfilled,
      typePrefix
    });
  }
  createAsyncThunk2.withTypes = function() {
    return createAsyncThunk2;
  };
  return createAsyncThunk2;
}();
function unwrapResult(action) {
  if (action.meta && action.meta.rejectedWithValue) {
    throw action.payload;
  }
  if (action.error) {
    throw action.error;
  }
  return action.payload;
}
function isThenable(value) {
  return value !== null && typeof value === "object" && typeof value.then === "function";
}
var task = "task";
var listener = "listener";
var completed = "completed";
var cancelled = "cancelled";
var taskCancelled = "task-" + cancelled;
var taskCompleted = "task-" + completed;
var listenerCancelled = listener + "-" + cancelled;
var listenerCompleted = listener + "-" + completed;
var TaskAbortError = function() {
  function TaskAbortError2(code) {
    this.code = code;
    this.name = "TaskAbortError";
    this.message = task + " " + cancelled + " (reason: " + code + ")";
  }
  return TaskAbortError2;
}();
var alm = "listenerMiddleware";
var addListener = createAction(alm + "/add");
var clearAllListeners = createAction(alm + "/removeAll");
var removeListener = createAction(alm + "/remove");
var promise;
var queueMicrotaskShim = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : globalThis) : function(cb) {
  return (promise || (promise = Promise.resolve())).then(cb).catch(function(err) {
    return setTimeout(function() {
      throw err;
    }, 0);
  });
};
var createQueueWithTimer = function(timeout) {
  return function(notify) {
    setTimeout(notify, timeout);
  };
};
var rAF = typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10);
F();

// node_modules/@yext/search-headless/dist/esm/src/slices/vertical.js
var initialState = {};
var reducers = {
  handleSearchResponse: (state, action) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    if (((_a = action.payload) === null || _a === void 0 ? void 0 : _a.allResultsForVertical) && ((_b = action.payload) === null || _b === void 0 ? void 0 : _b.alternativeVerticals)) {
      const allResultsForVertical = {
        facets: action.payload.allResultsForVertical.facets || [],
        results: (_c = action.payload.allResultsForVertical.verticalResults) === null || _c === void 0 ? void 0 : _c.results,
        resultsCount: (_d = action.payload.allResultsForVertical.verticalResults) === null || _d === void 0 ? void 0 : _d.resultsCount
      };
      state.noResults = {
        allResultsForVertical,
        alternativeVerticals: action.payload.alternativeVerticals
      };
    } else {
      state.noResults = void 0;
    }
    state.appliedQueryFilters = (_f = (_e = action.payload) === null || _e === void 0 ? void 0 : _e.verticalResults) === null || _f === void 0 ? void 0 : _f.appliedQueryFilters;
    state.queryDurationMillis = (_h = (_g = action.payload) === null || _g === void 0 ? void 0 : _g.verticalResults) === null || _h === void 0 ? void 0 : _h.queryDurationMillis;
    state.results = (_k = (_j = action.payload) === null || _j === void 0 ? void 0 : _j.verticalResults) === null || _k === void 0 ? void 0 : _k.results;
    state.resultsCount = (_m = (_l = action.payload) === null || _l === void 0 ? void 0 : _l.verticalResults) === null || _m === void 0 ? void 0 : _m.resultsCount;
    state.source = (_p = (_o = action.payload) === null || _o === void 0 ? void 0 : _o.verticalResults) === null || _p === void 0 ? void 0 : _p.source;
  },
  setDisplayName: (state, action) => {
    state.displayName = action.payload;
  },
  setLimit: (state, action) => {
    state.limit = action.payload;
  },
  setOffset: (state, action) => {
    state.offset = action.payload;
  },
  setSortBys: (state, action) => {
    state.sortBys = action.payload;
  },
  setVerticalKey: (state, action) => {
    state.verticalKey = action.payload;
  },
  setLocationRadius: (state, action) => {
    state.locationRadius = action.payload;
  }
};
function createVerticalSlice(prefix2) {
  return createSlice({
    name: prefix2 + "vertical",
    initialState,
    reducers
  });
}

// node_modules/@yext/search-headless/dist/esm/src/slices/universal.js
var initialState2 = {};
var reducers2 = {
  setVerticals: (state, action) => {
    state.verticals = action.payload;
  },
  setLimit: (state, action) => {
    state.limit = action.payload;
  },
  setRestrictVerticals: (state, action) => {
    state.restrictVerticals = action.payload;
  }
};
function createUniversalSlice(prefix2) {
  return createSlice({
    name: prefix2 + "universal",
    initialState: initialState2,
    reducers: reducers2
  });
}

// node_modules/@yext/search-headless/dist/esm/src/slices/filters.js
var import_isEqual2 = __toESM(require_isEqual());

// node_modules/@yext/search-headless/dist/esm/src/utils/filter-utils.js
var import_isEqual = __toESM(require_isEqual());
function areFieldValueFiltersEqual(thisFilter, otherFilter) {
  return thisFilter.fieldId === otherFilter.fieldId && thisFilter.matcher === otherFilter.matcher && (0, import_isEqual.default)(thisFilter.value, otherFilter.value);
}
function areStaticFiltersEqual(thisFilter, otherFilter) {
  if (thisFilter.kind === "fieldValue") {
    return otherFilter.kind === "fieldValue" ? areFieldValueFiltersEqual(thisFilter, otherFilter) : false;
  }
  if (otherFilter.kind === "fieldValue") {
    return false;
  }
  return thisFilter.combinator === otherFilter.combinator && thisFilter.filters.length === otherFilter.filters.length && thisFilter.filters.every((t2) => otherFilter.filters.some((o2) => areStaticFiltersEqual(t2, o2))) && otherFilter.filters.every((o2) => thisFilter.filters.some((t2) => areStaticFiltersEqual(o2, t2)));
}

// node_modules/@yext/search-headless/dist/esm/src/slices/filters.js
var initialState3 = {};
var reducers3 = {
  setStatic: (state, action) => {
    state.static = action.payload;
  },
  setFacets: (state, action) => {
    state.facets = action.payload;
  },
  resetFacets: (state) => {
    var _a;
    (_a = state.facets) === null || _a === void 0 ? void 0 : _a.forEach((facet) => {
      facet.options.forEach((o2) => o2.selected = false);
    });
  },
  setFacetOption: (state, { payload }) => {
    if (!state.facets) {
      console.warn("Trying to select a facet option when no facets exist.");
      return;
    }
    const { fieldId, facetOption: optionToSelect, shouldSelect } = payload;
    const facetsWithFieldId = state.facets.filter((f2) => f2.fieldId === fieldId);
    if (facetsWithFieldId.length === 0) {
      console.warn(`Could not select a facet option for fieldId "${fieldId}": the fieldId was not found.`);
      return;
    }
    facetsWithFieldId.forEach((facet) => {
      facet.options = facet.options.map((o2) => {
        if (o2.matcher !== optionToSelect.matcher || !(0, import_isEqual2.default)(o2.value, optionToSelect.value)) {
          return o2;
        }
        return Object.assign(Object.assign({}, o2), { selected: shouldSelect });
      });
    });
  },
  setFilterOption: (state, { payload }) => {
    if (!state.static) {
      state.static = [];
    }
    const { selected, displayName: _2, filter } = payload;
    const matchingFilter = state.static.find((storedFilter) => {
      return areStaticFiltersEqual(storedFilter.filter, filter);
    });
    if (matchingFilter) {
      matchingFilter.selected = selected;
    } else if (selected) {
      state.static.push(payload);
    } else {
      console.warn(`Could not unselect a non-existing filter option in state with the following fields:
${JSON.stringify(filter)}.`);
    }
  }
};
function createFiltersSlice(prefix2) {
  return createSlice({
    name: prefix2 + "filters",
    initialState: initialState3,
    reducers: reducers3
  });
}

// node_modules/@yext/search-headless/dist/esm/src/slices/directanswer.js
var initialState4 = {};
var reducers4 = {
  setResult: (state, action) => {
    state.result = action.payload;
  }
};
function createDirectAnswerSlice(prefix2) {
  return createSlice({
    name: prefix2 + "directAnswer",
    initialState: initialState4,
    reducers: reducers4
  });
}

// node_modules/@yext/search-headless/dist/esm/src/slices/queryrules.js
var initialState5 = { actions: [] };
var reducers5 = {
  setActions: (state, action) => {
    state.actions = action.payload;
  }
};
function createQueryRulesSlice(prefix2) {
  return createSlice({
    name: prefix2 + "queryRules",
    initialState: initialState5,
    reducers: reducers5
  });
}

// node_modules/@yext/search-headless/dist/esm/src/slices/searchstatus.js
var initialState6 = {};
var reducers6 = {
  setIsLoading: (state, action) => {
    state.isLoading = action.payload;
  }
};
function createSearchStatusSlice(prefix2) {
  return createSlice({
    name: prefix2 + "searchStatus",
    initialState: initialState6,
    reducers: reducers6
  });
}

// node_modules/@yext/search-headless/dist/esm/src/search-headless.js
var SearchHeadless = class {
  constructor(core, stateManager, httpManager, additionalHttpHeaders) {
    this.core = core;
    this.stateManager = stateManager;
    this.httpManager = httpManager;
    this.additionalHttpHeaders = additionalHttpHeaders;
    this.utilities = search_utilities_exports;
  }
  setQuery(input) {
    this.stateManager.dispatchEvent("query/setInput", input);
  }
  setQueryTrigger(trigger) {
    this.stateManager.dispatchEvent("query/setTrigger", trigger);
  }
  setQuerySource(source) {
    this.stateManager.dispatchEvent("query/setSource", source);
  }
  setVertical(verticalKey) {
    this._resetSearcherStates();
    this.stateManager.dispatchEvent("vertical/setVerticalKey", verticalKey);
    this.stateManager.dispatchEvent("meta/setSearchType", SearchTypeEnum.Vertical);
  }
  setUniversal() {
    this._resetSearcherStates();
    this.stateManager.dispatchEvent("vertical/setVerticalKey", void 0);
    this.stateManager.dispatchEvent("meta/setSearchType", SearchTypeEnum.Universal);
  }
  _resetSearcherStates() {
    this.stateManager.dispatchEvent("set-state", Object.assign(Object.assign({}, this.state), { directAnswer: initialState4, filters: initialState3, queryRules: initialState5, searchStatus: initialState6, vertical: initialState, universal: initialState2 }));
  }
  setVerticalLimit(limit) {
    this.stateManager.dispatchEvent("vertical/setLimit", limit);
  }
  setUniversalLimit(limit) {
    this.stateManager.dispatchEvent("universal/setLimit", limit);
  }
  setOffset(offset) {
    this.stateManager.dispatchEvent("vertical/setOffset", offset);
  }
  setStaticFilters(filters) {
    this.stateManager.dispatchEvent("filters/setStatic", filters);
  }
  setFacets(facets) {
    this.stateManager.dispatchEvent("filters/setFacets", facets);
  }
  resetFacets() {
    this.stateManager.dispatchEvent("filters/resetFacets");
  }
  setSpellCheckEnabled(enabled) {
    this.stateManager.dispatchEvent("spellCheck/setEnabled", enabled);
  }
  setSessionTrackingEnabled(enabled) {
    this.stateManager.dispatchEvent("sessionTracking/setEnabled", enabled);
  }
  setSessionId(sessionId) {
    this.stateManager.dispatchEvent("sessionTracking/setSessionId", sessionId);
  }
  setAlternativeVerticals(alternativeVerticals) {
    this.stateManager.dispatchEvent("vertical/setAlternativeVerticals", alternativeVerticals);
  }
  setSortBys(sortBys) {
    this.stateManager.dispatchEvent("vertical/setSortBys", sortBys);
  }
  setContext(context) {
    this.stateManager.dispatchEvent("meta/setContext", context);
  }
  setReferrerPageUrl(referrerPageUrl) {
    this.stateManager.dispatchEvent("meta/setReferrerPageUrl", referrerPageUrl);
  }
  setUserLocation(latLong) {
    this.stateManager.dispatchEvent("location/setUserLocation", latLong);
  }
  setState(state) {
    this.stateManager.dispatchEvent("set-state", state);
  }
  setRestrictVerticals(restrictVerticals) {
    this.stateManager.dispatchEvent("universal/setRestrictVerticals", restrictVerticals);
  }
  setLocationRadius(locationRadius) {
    this.stateManager.dispatchEvent("vertical/setLocationRadius", locationRadius);
  }
  get state() {
    return this.stateManager.getState();
  }
  addListener(listener2) {
    return this.stateManager.addListener(listener2);
  }
  async submitQuestion(request) {
    return this.core.submitQuestion(Object.assign(Object.assign({}, request), { additionalHttpHeaders: this.additionalHttpHeaders }));
  }
  async executeUniversalQuery() {
    if (this.state.meta.searchType !== SearchTypeEnum.Universal) {
      console.error("The meta.searchType must be set to 'universal' for universal search. Set the searchType to universal by calling `setUniversal()`");
      return;
    }
    const thisRequestId = this.httpManager.updateRequestId("universalQuery");
    this.stateManager.dispatchEvent("searchStatus/setIsLoading", true);
    const { input, querySource, queryTrigger } = this.state.query;
    const skipSpellCheck = !this.state.spellCheck.enabled;
    const sessionTrackingEnabled = this.state.sessionTracking.enabled;
    const { limit, restrictVerticals } = this.state.universal;
    const sessionId = this.state.sessionTracking.sessionId;
    const { referrerPageUrl, context } = this.state.meta;
    const { userLocation } = this.state.location;
    const request = Object.assign(Object.assign({
      query: input || "",
      querySource,
      queryTrigger,
      skipSpellCheck
    }, sessionTrackingEnabled && { sessionId }), {
      sessionTrackingEnabled,
      limit,
      location: userLocation,
      context,
      referrerPageUrl,
      restrictVerticals,
      additionalHttpHeaders: this.additionalHttpHeaders
    });
    let response;
    try {
      response = await this.core.universalSearch(request);
    } catch (e2) {
      const isLatestResponse2 = this.httpManager.processRequestId("universalQuery", thisRequestId);
      if (isLatestResponse2) {
        this.stateManager.dispatchEvent("searchStatus/setIsLoading", false);
      }
      return Promise.reject(e2);
    }
    const isLatestResponse = this.httpManager.processRequestId("universalQuery", thisRequestId);
    if (!isLatestResponse) {
      return response;
    }
    this.stateManager.dispatchEvent("universal/setVerticals", response.verticalResults);
    this.stateManager.dispatchEvent("query/setQueryId", response.queryId);
    this.stateManager.dispatchEvent("query/setMostRecentSearch", input);
    this.stateManager.dispatchEvent("spellCheck/setResult", response.spellCheck);
    this.stateManager.dispatchEvent("query/setSearchIntents", response.searchIntents || []);
    this.stateManager.dispatchEvent("location/setLocationBias", response.locationBias);
    this.stateManager.dispatchEvent("searchStatus/setIsLoading", false);
    this.stateManager.dispatchEvent("meta/setUUID", response.uuid);
    this.stateManager.dispatchEvent("directAnswer/setResult", response.directAnswer);
    this.stateManager.dispatchEvent("queryRules/setActions", response.queryRulesActionsData || []);
    return response;
  }
  async executeUniversalAutocomplete() {
    const query = this.state.query.input || "";
    return this.core.universalAutocomplete({
      input: query,
      additionalHttpHeaders: this.additionalHttpHeaders
    });
  }
  async executeVerticalQuery() {
    var _a;
    if (this.state.meta.searchType !== SearchTypeEnum.Vertical) {
      console.error("The meta.searchType must be set to 'vertical' for vertical search. Set the searchType to vertical by calling `setVertical()`");
      return;
    }
    const thisRequestId = this.httpManager.updateRequestId("verticalQuery");
    const verticalKey = this.state.vertical.verticalKey;
    if (!verticalKey) {
      console.error("no verticalKey supplied for vertical search");
      return;
    }
    this.stateManager.dispatchEvent("searchStatus/setIsLoading", true);
    const { input, querySource, queryTrigger } = this.state.query;
    const skipSpellCheck = !this.state.spellCheck.enabled;
    const sessionTrackingEnabled = this.state.sessionTracking.enabled;
    const sessionId = this.state.sessionTracking.sessionId;
    const staticFilter = transformFiltersToCoreFormat(this.state.filters.static) || void 0;
    const facets = (_a = this.state.filters) === null || _a === void 0 ? void 0 : _a.facets;
    const { limit, offset, sortBys, locationRadius } = this.state.vertical;
    const { referrerPageUrl, context } = this.state.meta;
    const { userLocation } = this.state.location;
    const facetsToApply = facets === null || facets === void 0 ? void 0 : facets.map((facet) => {
      return {
        fieldId: facet.fieldId,
        options: facet.options.filter((o2) => o2.selected)
      };
    });
    const request = Object.assign(Object.assign({
      query: input || "",
      querySource,
      queryTrigger,
      verticalKey,
      staticFilter,
      facets: facetsToApply,
      retrieveFacets: true,
      limit,
      offset,
      skipSpellCheck
    }, sessionTrackingEnabled && { sessionId }), {
      sessionTrackingEnabled,
      location: userLocation,
      sortBys,
      context,
      referrerPageUrl,
      locationRadius,
      additionalHttpHeaders: this.additionalHttpHeaders
    });
    let response;
    try {
      response = await this.core.verticalSearch(request);
    } catch (e2) {
      const isLatestResponse2 = this.httpManager.processRequestId("verticalQuery", thisRequestId);
      if (isLatestResponse2) {
        this.stateManager.dispatchEvent("searchStatus/setIsLoading", false);
      }
      return Promise.reject(e2);
    }
    const isLatestResponse = this.httpManager.processRequestId("verticalQuery", thisRequestId);
    if (!isLatestResponse) {
      return response;
    }
    this.stateManager.dispatchEvent("query/setQueryId", response.queryId);
    this.stateManager.dispatchEvent("query/setMostRecentSearch", input);
    this.stateManager.dispatchEvent("filters/setFacets", response.facets);
    this.stateManager.dispatchEvent("spellCheck/setResult", response.spellCheck);
    this.stateManager.dispatchEvent("query/setSearchIntents", response.searchIntents || []);
    this.stateManager.dispatchEvent("location/setLocationBias", response.locationBias);
    this.stateManager.dispatchEvent("directAnswer/setResult", response.directAnswer);
    this.stateManager.dispatchEvent("meta/setUUID", response.uuid);
    this.stateManager.dispatchEvent("searchStatus/setIsLoading", false);
    this.stateManager.dispatchEvent("vertical/handleSearchResponse", response);
    this.stateManager.dispatchEvent("queryRules/setActions", response.queryRulesActionsData || []);
    return response;
  }
  async executeVerticalAutocomplete() {
    if (this.state.meta.searchType !== SearchTypeEnum.Vertical) {
      console.error("The meta.searchType must be set to 'vertical' for vertical autocomplete. Set the searchType to vertical by calling `setVertical()`");
      return;
    }
    const query = this.state.query.input || "";
    const verticalKey = this.state.vertical.verticalKey;
    if (!verticalKey) {
      console.error("no verticalKey supplied for vertical autocomplete");
      return;
    }
    return this.core.verticalAutocomplete({
      input: query,
      verticalKey,
      additionalHttpHeaders: this.additionalHttpHeaders
    });
  }
  async executeFilterSearch(query, sectioned, fields) {
    if (this.state.meta.searchType !== SearchTypeEnum.Vertical) {
      console.error("The meta.searchType must be set to 'vertical' for filter search. Set the searchType to vertical by calling `setVertical()`");
      return;
    }
    const verticalKey = this.state.vertical.verticalKey;
    if (!verticalKey) {
      console.error("no verticalKey supplied for filter search");
      return;
    }
    return this.core.filterSearch({
      input: query,
      verticalKey,
      sessionTrackingEnabled: this.state.sessionTracking.enabled,
      sectioned,
      fields,
      additionalHttpHeaders: this.additionalHttpHeaders
    });
  }
  setFacetOption(fieldId, facetOption, selected) {
    const payload = {
      shouldSelect: selected,
      fieldId,
      facetOption
    };
    this.stateManager.dispatchEvent("filters/setFacetOption", payload);
  }
  setFilterOption(filter) {
    this.stateManager.dispatchEvent("filters/setFilterOption", filter);
  }
};

// node_modules/@yext/search-headless/dist/esm/src/store.js
var initialReducer = (state) => {
  return state || {};
};
function createBaseStore() {
  const store2 = configureStore({
    middleware: (getDefaultMiddleware2) => getDefaultMiddleware2({ serializableCheck: false }),
    reducer: initialReducer,
    devTools: false ? false : {
      name: "SearchHeadless"
    }
  });
  return store2;
}

// node_modules/@yext/search-headless/dist/esm/src/slices/query.js
var initialState7 = {};
var reducers7 = {
  setInput: (state, action) => {
    state.input = action.payload;
  },
  setTrigger: (state, action) => {
    state.queryTrigger = action.payload;
  },
  setSource: (state, action) => {
    state.querySource = action.payload;
  },
  setQueryId: (state, action) => {
    state.queryId = action.payload;
  },
  setMostRecentSearch: (state, action) => {
    state.mostRecentSearch = action.payload;
  },
  setSearchIntents: (state, action) => {
    state.searchIntents = action.payload;
  }
};
function createQuerySlice(prefix2) {
  return createSlice({
    name: prefix2 + "query",
    initialState: initialState7,
    reducers: reducers7
  });
}

// node_modules/@yext/search-headless/dist/esm/src/slices/spellcheck.js
var initialState8 = {
  enabled: true
};
var reducers8 = {
  setResult: (state, action) => {
    return Object.assign({ enabled: state.enabled }, action.payload);
  },
  setEnabled: (state, action) => {
    state.enabled = action.payload;
  }
};
function createSpellCheckSlice(prefix2) {
  return createSlice({
    name: prefix2 + "spellCheck",
    initialState: initialState8,
    reducers: reducers8
  });
}

// node_modules/@yext/search-headless/dist/esm/src/slices/sessiontracking.js
var initialState9 = {
  enabled: false
};
var reducers9 = {
  setEnabled: (state, action) => {
    state.enabled = action.payload;
  },
  setSessionId: (state, action) => {
    state.sessionId = action.payload;
  }
};
function createSessionTrackingSlice(prefix2) {
  return createSlice({
    name: prefix2 + "sessionTracking",
    initialState: initialState9,
    reducers: reducers9
  });
}

// node_modules/@yext/search-headless/dist/esm/src/slices/meta.js
var initialState10 = {
  searchType: SearchTypeEnum.Universal
};
var reducers10 = {
  setContext: (state, action) => {
    state.context = action.payload;
  },
  setReferrerPageUrl: (state, action) => {
    state.referrerPageUrl = action.payload;
  },
  setUUID: (state, action) => {
    state.uuid = action.payload;
  },
  setSearchType: (state, action) => {
    state.searchType = action.payload;
  }
};
function createMetaSlice(prefix2) {
  return createSlice({
    name: prefix2 + "meta",
    initialState: initialState10,
    reducers: reducers10
  });
}

// node_modules/@yext/search-headless/dist/esm/src/slices/location.js
var initialState11 = {};
var reducers11 = {
  setUserLocation: (state, action) => {
    state.userLocation = action.payload;
  },
  setLocationBias: (state, action) => {
    state.locationBias = action.payload;
  }
};
function createLocationSlice(prefix2) {
  return createSlice({
    name: prefix2 + "location",
    initialState: initialState11,
    reducers: reducers11
  });
}

// node_modules/@yext/search-headless/dist/esm/src/headless-reducer-manager.js
var HeadlessReducerManager = class {
  constructor() {
    this.headlessIdToReducer = {};
  }
  addAnswersReducer(headlessId) {
    this.headlessIdToReducer[headlessId] = createAnswersReducer(headlessId + "/");
  }
  getParentReducer() {
    const coreReducer = combineReducers(this.headlessIdToReducer);
    return (state, action) => {
      if (action.type === "set-state") {
        return Object.assign(Object.assign({}, state), { [action.headlessId]: action.payload });
      } else {
        return coreReducer(state, action);
      }
    };
  }
};
function createAnswersReducer(prefix2) {
  return combineReducers({
    query: createQuerySlice(prefix2).reducer,
    vertical: createVerticalSlice(prefix2).reducer,
    universal: createUniversalSlice(prefix2).reducer,
    directAnswer: createDirectAnswerSlice(prefix2).reducer,
    queryRules: createQueryRulesSlice(prefix2).reducer,
    filters: createFiltersSlice(prefix2).reducer,
    spellCheck: createSpellCheckSlice(prefix2).reducer,
    sessionTracking: createSessionTrackingSlice(prefix2).reducer,
    searchStatus: createSearchStatusSlice(prefix2).reducer,
    meta: createMetaSlice(prefix2).reducer,
    location: createLocationSlice(prefix2).reducer
  });
}

// node_modules/@yext/search-headless/dist/esm/src/constants.js
var DEFAULT_HEADLESS_ID = "main";

// node_modules/@yext/search-headless/dist/esm/package.json
var package_default2 = {
  name: "@yext/search-headless",
  version: "2.3.0",
  description: "A library for powering UI components for Yext Search integrations",
  author: "slapshot@yext.com",
  license: "BSD-3-Clause",
  main: "./dist/commonjs/src/index.js",
  module: "./dist/esm/src/index.js",
  keywords: [
    "search",
    "yext",
    "redux",
    "state management"
  ],
  files: [
    "dist",
    "lib",
    "src",
    "THIRD-PARTY-NOTICES"
  ],
  scripts: {
    build: "rm -rf dist/** && tsc -p tsconfig.cjs.json && tsc -p tsconfig.esm.json && npm run api-extractor && npm run generate-docs",
    lint: "eslint .",
    prepublishOnly: "npm run build",
    test: "jest",
    "api-extractor": "api-extractor run --local --verbose",
    "generate-docs": "api-documenter markdown --input-folder temp --output-folder docs && rm -rf temp",
    "generate-notices": "generate-license-file --input package.json --output THIRD-PARTY-NOTICES --overwrite"
  },
  dependencies: {
    "@reduxjs/toolkit": "^1.8.1",
    "@yext/search-core": "^2.3.0",
    "js-levenshtein": "^1.1.6",
    lodash: "^4.17.21"
  },
  devDependencies: {
    "@babel/preset-env": "^7.16.5",
    "@babel/preset-typescript": "^7.16.5",
    "@microsoft/api-documenter": "^7.13.76",
    "@microsoft/api-extractor": "^7.19.2",
    "@types/jest": "^28.1.1",
    "@types/lodash": "^4.14.178",
    "@types/node": "^16.11.12",
    "@typescript-eslint/eslint-plugin": "^5.16.0",
    "@typescript-eslint/parser": "^5.16.0",
    "@yext/eslint-config-slapshot": "^0.4.0",
    "@yext/eslint-plugin-export-star": "^1.0.0",
    "babel-jest": "^27.4.5",
    eslint: "^8.11.0",
    "eslint-config-react-app": "^7.0.1",
    "eslint-plugin-tsdoc": "^0.2.14",
    "generate-license-file": "^1.3.0",
    jest: "^28.1.0",
    "ts-node": "^10.4.0",
    typescript: "^4.5.4"
  },
  jest: {
    bail: 0,
    verbose: true,
    collectCoverage: true,
    collectCoverageFrom: [
      "src/**/*.ts",
      "!src/models/**/*.ts"
    ],
    moduleFileExtensions: [
      "js",
      "ts"
    ],
    moduleDirectories: [
      "node_modules",
      "<rootDir>"
    ],
    testMatch: [
      "<rootDir>/tests/**/*.[jt]s"
    ],
    testPathIgnorePatterns: [
      "<rootDir>/tests/mocks/*",
      "<rootDir>/tests/utils/*",
      "<rootDir>/test-site-node/*"
    ]
  },
  repository: {
    type: "git",
    url: "https://github.com/yext/search-headless.git"
  }
};

// node_modules/@yext/search-headless/dist/esm/src/utils/client-sdk-utils.js
var CLIENT_SDK_HEADER = "Client-SDK";
var { version: version2 } = package_default2;
function getHttpHeaders(additionalHttpHeaders) {
  const clientSDKHeaderValues = Object.assign(Object.assign({}, additionalHttpHeaders === null || additionalHttpHeaders === void 0 ? void 0 : additionalHttpHeaders[CLIENT_SDK_HEADER]), { ANSWERS_HEADLESS: version2 });
  return Object.assign(Object.assign({}, additionalHttpHeaders), { [CLIENT_SDK_HEADER]: clientSDKHeaderValues });
}

// node_modules/@yext/search-headless/dist/esm/src/utils/filter-creators.js
function createEqualsStaticFilter(fieldId, value) {
  return {
    kind: "fieldValue",
    fieldId,
    matcher: Matcher.Equals,
    value
  };
}
function createNumberRangeStaticFilter(fieldId, range) {
  return createRangeStaticFilter(fieldId, range);
}
function createDateRangeStaticFilter(fieldId, range) {
  return createRangeStaticFilter(fieldId, range);
}
function createRangeStaticFilter(fieldId, range) {
  const { min, max } = range;
  let minFilter;
  if (min) {
    minFilter = {
      kind: "fieldValue",
      fieldId,
      value: min.value,
      matcher: min.inclusive ? Matcher.GreaterThanOrEqualTo : Matcher.GreaterThan
    };
  }
  let maxFilter;
  if (max) {
    maxFilter = {
      kind: "fieldValue",
      fieldId,
      value: max.value,
      matcher: max.inclusive ? Matcher.LessThanOrEqualTo : Matcher.LessThan
    };
  }
  if (minFilter && maxFilter) {
    return combineStaticFilters(minFilter, maxFilter, FilterCombinator.AND);
  } else if (minFilter) {
    return minFilter;
  } else {
    return maxFilter;
  }
}
function createNearMeStaticFilter(position) {
  return {
    kind: "fieldValue",
    fieldId: "builtin.location",
    matcher: Matcher.Near,
    value: position
  };
}
function combineStaticFilters(filterA, filterB, combinator) {
  if (combinator === FilterCombinator.OR) {
    if (filterA.kind === "conjunction" || filterB.kind == "conjunction") {
      throw new Error("Cannot combine conjunction filters in a disjunction");
    }
    return {
      kind: "disjunction",
      combinator,
      filters: [filterA, filterB]
    };
  }
  return {
    kind: "conjunction",
    combinator,
    filters: [filterA, filterB]
  };
}

// node_modules/@yext/search-headless/dist/esm/src/index.js
var __rest = function(s2, e2) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var firstHeadlessInstance;
var store = createBaseStore();
var headlessReducerManager = new HeadlessReducerManager();
function provideHeadless(config, additionalHttpHeaders) {
  const { verticalKey, headlessId } = config, searchConfig = __rest(config, ["verticalKey", "headlessId"]);
  if (headlessId === DEFAULT_HEADLESS_ID) {
    throw new Error(`Cannot instantiate a SearchHeadless using the default headlessId "${headlessId}". Specify a different headlessId.`);
  }
  const searchCore = provideCore(searchConfig);
  const stateManager = new ReduxStateManager(store, headlessId || DEFAULT_HEADLESS_ID, headlessReducerManager);
  const httpManager = new HttpManager();
  const httpHeaders = getHttpHeaders(additionalHttpHeaders);
  const headless = new SearchHeadless(searchCore, stateManager, httpManager, httpHeaders);
  verticalKey ? headless.setVertical(verticalKey) : headless.setUniversal();
  if (!firstHeadlessInstance) {
    firstHeadlessInstance = headless;
  } else {
    linkSessionTracking(firstHeadlessInstance, headless);
    linkSessionTracking(headless, firstHeadlessInstance);
  }
  return headless;
}
function linkSessionTracking(firstHeadless, secondHeadless) {
  firstHeadless.addListener({
    valueAccessor: (state) => state.sessionTracking,
    callback: (sessionTracking) => {
      secondHeadless.setState(Object.assign(Object.assign({}, secondHeadless.state), { sessionTracking }));
    }
  });
}

export {
  SearchHeadlessContext,
  useSearchActions,
  useSearchState,
  useSearchUtilities,
  SearchHeadlessProvider,
  SearchCore,
  DirectAnswerType,
  Source,
  BuiltInFieldType,
  Matcher,
  Environment,
  CloudRegion,
  SandboxEndpoints,
  QuerySource,
  SearchError,
  FilterCombinator,
  QueryTrigger,
  SortType,
  Direction,
  AppliedQueryFilterType,
  LocationBiasMethod,
  SearchIntent,
  SpellCheckType,
  ErrorType,
  search_utilities_exports,
  SearchTypeEnum,
  SearchHeadless,
  DEFAULT_HEADLESS_ID,
  createEqualsStaticFilter,
  createNumberRangeStaticFilter,
  createDateRangeStaticFilter,
  createNearMeStaticFilter,
  combineStaticFilters,
  provideHeadless
};
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=chunk-SGLK4FHA.js.map
