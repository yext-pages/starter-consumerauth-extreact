import{useState as e,useRef as n,useCallback as t,useEffect as o,useLayoutEffect as r}from"react";import{flushSync as l}from"react-dom";import i from"tiny-warning";function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},a.apply(this,arguments)}function s(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n.indexOf(t=l[o])>=0||(r[t]=e[t]);return r}const c=()=>{};function d(e){return null!=e&&e.current?e.current.scrollHeight:(i(!0,"useCollapse was not able to find a ref to the collapse element via `getCollapseProps`. Ensure that the element exposes its `ref` prop. If it exposes the ref prop under a different name (like `innerRef`), use the `refKey` property to change it. Example:\n\n{...getCollapseProps({refKey: 'innerRef'})}"),"auto")}const u=(...e)=>(...n)=>e.forEach(e=>e&&e(...n));function p(...e){return e.every(e=>null==e)?null:n=>{e.forEach(e=>{!function(e,n){if(null!=e)if("function"==typeof e)e(n);else try{e.current=n}catch(t){throw new Error(`Cannot assign value "${n}" to ref "${e}"`)}}(e,n)})}}const f="undefined"!=typeof window?r:o;let h=!1,g=0;const m=()=>++g,x=["duration","easing","collapseStyles","expandStyles","onExpandStart","onExpandEnd","onCollapseStart","onCollapseEnd","isExpanded","defaultExpanded","hasDisabledAnimation"],y=["disabled","onClick"],E=["style","onTransitionEnd","refKey"],b="cubic-bezier(0.4, 0, 0.2, 1)";function C(r={}){let{duration:g,easing:C=b,collapseStyles:w={},expandStyles:v={},onExpandStart:S=c,onExpandEnd:k=c,onCollapseStart:$=c,onCollapseEnd:A=c,isExpanded:O,defaultExpanded:P=!1,hasDisabledAnimation:T=!1}=r,q=s(r,x);const[D,F]=function(r,l){const[a,s]=e(l||!1),c=n(null!=r),d=c.current?r:a,u=t(e=>{c.current||s(e)},[]);return o(()=>{i(!(c.current&&null==r),"useCollapse is changing from controlled to uncontrolled. useCollapse should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop."),i(!(!c.current&&null!=r),"useCollapse is changing from uncontrolled to controlled. useCollapse should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.")},[r]),[d,u]}(O,P),K=function(n){const t=h?m():null,[r,l]=e(t);return f(()=>{null===r&&l(m())},[]),o(()=>{!1===h&&(h=!0)},[]),null!=r?String(r):void 0}(),j=n(null);!function(e){let n=e=>{};"production"!==process.env.NODE_ENV&&(n=e=>{if(null==e||!e.current)return;const{paddingTop:n,paddingBottom:t}=window.getComputedStyle(e.current);i(!(n&&"0px"!==n||t&&"0px"!==t),"react-collapsed: Padding applied to the collapse element will cause the animation to break and not perform as expected. To fix, apply equivalent padding to the direct descendent of the collapse element.")}),o(()=>{n(e)},[e])}(j);const N=`${q.collapsedHeight||0}px`,z={display:"0px"===N?"none":"block",height:N,overflow:"hidden"},[H,I]=e(D?{}:z),R=e=>{l(()=>{I(e)})},B=e=>{R(n=>a({},n,e))};function M(e){if(T)return{};const n=g||function(e){if(!e||"string"==typeof e)return 0;const n=e/36;return Math.round(10*(4+15*n**.25+n/5))}(e);return{transition:`height ${n}ms ${C}`}}!function(e,t){const r=n(!0);o(()=>{r.current?r.current=!1:D?requestAnimationFrame(()=>{S(),B(a({},v,{willChange:"height",display:"block",overflow:"hidden"})),requestAnimationFrame(()=>{const e=d(j);B(a({},M(e),{height:e}))})}):requestAnimationFrame(()=>{$();const e=d(j);B(a({},w,M(e),{willChange:"height",height:e})),requestAnimationFrame(()=>{B({height:N,overflow:"hidden"})})})},t)}(0,[D,N]);const V=e=>{if(e.target===j.current&&"height"===e.propertyName)if(D){const e=d(j);e===H.height?R({}):B({height:e}),k()}else H.height===N&&(R(z),A())};return{getToggleProps:function(e={}){let{disabled:n=!1,onClick:t=c}=e,o=s(e,y);return a({type:"button",role:"button",id:`react-collapsed-toggle-${K}`,"aria-controls":`react-collapsed-panel-${K}`,"aria-expanded":D,tabIndex:0,disabled:n},o,{onClick:n?c:u(t,()=>F(e=>!e))})},getCollapseProps:function(e={}){let{style:n={},onTransitionEnd:t=c,refKey:o="ref"}=e,r=s(e,E);return a({id:`react-collapsed-panel-${K}`,"aria-hidden":!D},r,{[o]:p(j,r[o]),onTransitionEnd:u(V,t),style:a({boxSizing:"border-box"},n,H)})},isExpanded:D,setExpanded:F}}export{C as default};
//# sourceMappingURL=react-collapsed.modern.js.map
